// support for acme; acid must be run with /acme/acid/$cputype/Acid

defn w(*code)
{
	local dir;

	printto(acmesrvfile, "New "+itoa(pid)+"/stk");
	dir = readfile(acmesrvfile);
	printto(dir+"/body", eval code);
	return dir;
}

defn procstk(pid, name)
{
	local dir;

	setproc(pid);
	dir = w(stk());
	printto(dir+"/tag", " "+name);
}

defn taskstk(tid, name)
{
	local dir;

	dir = w(labstk(tid));
	printto(dir+"/tag", " "+name);
}

defn _stk(pc, sp, link, dolocals)
{
	local stk;

	print("At pc:", pc, ":", fmt(pc, 'a'), " ");
	pfl(pc);

	stk = strace(pc, sp, link);

	while stk do {
		frame = head stk;
		print(fmt(frame[0], 'a'), "(");
		params(frame[2], frame[0]);
		print(") ");
		print("\n\tcalled from ", fmt(frame[1], 'a'), " ");
		pfl(frame[1]);
		stk = tail stk;
		if dolocals then
			locals(frame[3], frame[0]);
	}
}

//defn _stk(pc, sp, dolocals)
//{
//	w(__stk(pc, sp, dolocals));
//}


defn params(param, name)
{
	while param do {
		sym = head param;
		print("*", fmt(name, 'a'), ":", sym[0], "=", sym[1]);
		param = tail param;
		if param then
			print (",");
	}	
}

defn locals(l, name)
{
	local sym;

	while l do {
		sym = head l;
		print("\t*", fmt(name, 'a'), ":", sym[0], "=", sym[1], "\n");
		l = tail l;
	}	
}

defn bptab()					// print a table of breakpoints
{
	local lst, addr;

	lst = bplist;
	while lst do {
		addr = head lst;
		print("\tbpdel(", fmt(addr, 'a'), ")\n");
		lst = tail lst;
	}
}

defn procs()			// print status of processes
{
	local c, lst, cpid;

	cpid = pid;
	lst = proclist;
	while lst do {
		np = head lst;
		setproc(np);
		if np == cpid then
			print(">");
		print("\t", "setproc(", np, ")\t", status(np), " at ", fmt(*PC, 'a'), "\n");
		lst = tail lst;
	}
	pid = cpid;
	if pid != 0 then
		setproc(pid);
}

acmesrvfile = readfile("/env/Acidsrv");

print("/sys/lib/acid/acme");
