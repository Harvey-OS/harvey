% Caps and Small Caps in Computer Modern Roman

font_coding_scheme:=if ligs=0: "TeX typewriter text"
 else: "TeX text without f-ligatures" fi;
spanish_shriek=oct"016"; spanish_query=oct"017";

mode_setup; font_setup;
input romanu;  % upper case (majuscules)
input greeku;  % upper case greek letters
input romand;  % numerals
input romanp;  % ampersand, question marks, currency sign
input romspu;  % uppercase specials (\AE, \OE, \O)
input punct;  % punctuation symbols common to all roman and italic
input accent;  % accents common to roman and italic text
input romsub;  % substitutes for ligatures
if ligs>0: input comlig; fi  % ligatures common with italic

ligtable "!": "`" =: spanish_shriek;
ligtable "?": "`" =: spanish_query;
font_slant slant; font_x_height x_height#;
if monospace: font_normal_space 9u#; % no stretching or shrinking
 font_quad 18u#;
 font_extra_space 9u#;
else: font_normal_space 6u#+2letter_fit#;
 font_normal_stretch 3u#; font_normal_shrink 2u#;
 font_quad 18u#+4letter_fit#;
 font_extra_space 2u#;
 k#:=-.5u#; kk#:=-1.5u#; kkk#:=-2u#; % three degrees of kerning
 ligtable "P": "T": "Y": "a" kern kk#, "A" kern kk#;
 ligtable "F": "V": "W": if serifs: "a" kern kkk#, "A" kern kkk#,
  else: "a" kern kk#, "A" kern kk#, fi
  "K": "X": "o" kern k#, "O" kern k#, "c" kern k#, "C" kern k#,
   "g" kern k#, "G" kern k#, "q" kern k#, "Q" kern k#;
 ligtable "O": "D": "x" kern k#, "X" kern k#, "w" kern k#, "W" kern k#,
   "a" kern k#, "A" kern k#, "v" kern k#, "V" kern k#, "y" kern k#, "Y" kern k#;
 ligtable "A": if serifs: "R": fi "c" kern k#, "C" kern k#,
   "o" kern k#, "O" kern k#, "g" kern k#, "G" kern k#,
   "u" kern k#, "U" kern k#, "q" kern k#, "Q" kern k#,
  "L": "T" kern kk#, "t" kern kk#, "Y" kern kk#, "y" kern kk#,
   "V" kern kkk#, "v" kern kkk#, "W" kern kkk#, "w" kern kkk#;
 ligtable "I": "I" kern -k#; fi % Richard III
% ligature programs for |"-"|, |"`"|, and |"'"| are in the {\tt comlig} file

%%% fine lower
forsuffixes $= u, width_adj, cap_serif_fit, letter_fit,
 body_height, cap_height, x_height, bar_height, comma_depth,
 flare, cap_hair, stem, cap_stem, cap_curve, cap_ess,
 cap_jut, beak_jut, beak, slab, cap_bar, cap_band, cap_notch_cut,
 o, apex_o:  $.#:=lower.$.#; endfor
fudge:=lower.fudge;
font_setup; % now try again with |lower| settings
extra_endchar:=extra_endchar&"charcode:=charcode+code_offset";
code_offset:=ASCII"a" - ASCII"A";
input romanu;  % majuscules (in lowercase positions)
code_offset:=-3;
input romspu;  % \AE, \OE, \O\ (in positions of \ae, \oe, \o)
code_offset:=0;
input cscspu;  % substitutes for the remaining characters of romspl
if not monospace:
 k#:=-.5u#; kk#:=-1.5u#; kkk#:=-2u#; % three degrees of kerning
 ligtable "p": "t": "y": "a" kern kk#;
 ligtable "f": "v": "w": "a" kern if serifs: kkk# else: kk#\\fi,
  "k": "x": "o" kern k#, "c" kern k#, "g" kern k#, "q" kern k#;
 ligtable "o": "d": "x" kern k#, "w" kern k#, "a" kern k#,
   "v" kern k#, "y" kern k#;
 ligtable "a": if serifs: "r": fi "c" kern k#, "o" kern k#,
   "g" kern k#, "u" kern k#, "q" kern k#,
  "l": "'" kern kk#, "t" kern kk#, "y" kern kk#, "v" kern kkk#, "w" kern kkk#;
 ligtable "i": "i" kern -k#; fi % skiing
bye.
