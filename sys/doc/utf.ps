%!PS
%!PS
%%Version: 3.3.1
%%DocumentFonts: (atend)
%%Pages: (atend)
%%EndComments
%
% Version 3.3.1 prologue for troff files.
%

/#copies 1 store
/aspectratio 1 def
/formsperpage 1 def
/landscape false def
/linewidth .3 def
/magnification 1 def
/margin 0 def
/orientation 0 def
/resolution 720 def
/rotation 1 def
/xoffset 0 def
/yoffset 0 def

/roundpage true def
/useclippath true def
/pagebbox [0 0 612 792] def

/R  /Times-Roman def
/I  /Times-Italic def
/B  /Times-Bold def
/BI /Times-BoldItalic def
/H  /Helvetica def
/HI /Helvetica-Oblique def
/HB /Helvetica-Bold def
/HX /Helvetica-BoldOblique def
/CW /Courier def
/CO /Courier def
/CI /Courier-Oblique def
/CB /Courier-Bold def
/CX /Courier-BoldOblique def
/PA /Palatino-Roman def
/PI /Palatino-Italic def
/PB /Palatino-Bold def
/PX /Palatino-BoldItalic def
/Hr /Helvetica-Narrow def
/Hi /Helvetica-Narrow-Oblique def
/Hb /Helvetica-Narrow-Bold def
/Hx /Helvetica-Narrow-BoldOblique def
/KR /Bookman-Light def
/KI /Bookman-LightItalic def
/KB /Bookman-Demi def
/KX /Bookman-DemiItalic def
/AR /AvantGarde-Book def
/AI /AvantGarde-BookOblique def
/AB /AvantGarde-Demi def
/AX /AvantGarde-DemiOblique def
/NR /NewCenturySchlbk-Roman def
/NI /NewCenturySchlbk-Italic def
/NB /NewCenturySchlbk-Bold def
/NX /NewCenturySchlbk-BoldItalic def
/ZD /ZapfDingbats def
/ZI /ZapfChancery-MediumItalic def
/S  /S def
/S1 /S1 def
/GR /Symbol def

/inch {72 mul} bind def
/min {2 copy gt {exch} if pop} bind def

/setup {
	counttomark 2 idiv {def} repeat pop

	landscape {/orientation 90 orientation add def} if
	/scaling 72 resolution div def
	linewidth setlinewidth
	1 setlinecap

	pagedimensions
	xcenter ycenter translate
	orientation rotation mul rotate
	width 2 div neg height 2 div translate
	xoffset inch yoffset inch neg translate
	margin 2 div dup neg translate
	magnification dup aspectratio mul scale
	scaling scaling scale

	addmetrics
	0 0 moveto
} def

/pagedimensions {
	useclippath userdict /gotpagebbox known not and {
		/pagebbox [clippath pathbbox newpath] def
		roundpage currentdict /roundpagebbox known and {roundpagebbox} if
	} if
	pagebbox aload pop
	4 -1 roll exch 4 1 roll 4 copy
	landscape {4 2 roll} if
	sub /width exch def
	sub /height exch def
	add 2 div /xcenter exch def
	add 2 div /ycenter exch def
	userdict /gotpagebbox true put
} def

/addmetrics {
	/Symbol /S null Sdefs cf
	/Times-Roman /S1 StandardEncoding dup length array copy S1defs cf
} def

/pagesetup {
	/page exch def
	currentdict /pagedict known currentdict page known and {
		page load pagedict exch get cvx exec
	} if
} def

/decodingdefs [
	{counttomark 2 idiv {y moveto show} repeat}
	{neg /y exch def counttomark 2 idiv {y moveto show} repeat}
	{neg moveto {2 index stringwidth pop sub exch div 0 32 4 -1 roll widthshow} repeat}
	{neg moveto {spacewidth sub 0.0 32 4 -1 roll widthshow} repeat}
	{counttomark 2 idiv {y moveto show} repeat}
	{neg setfunnytext}
] def

/setdecoding {/t decodingdefs 3 -1 roll get bind def} bind def

/w {neg moveto show} bind def
/m {neg dup /y exch def moveto} bind def
/done {/lastpage where {pop lastpage} if} def

/f {
	dup /font exch def findfont exch
	dup /ptsize exch def scaling div dup /size exch def scalefont setfont
	linewidth ptsize mul scaling 10 mul div setlinewidth
	/spacewidth ( ) stringwidth pop def
} bind def

/changefont {
	/fontheight exch def
	/fontslant exch def
	currentfont [
		1 0
		fontheight ptsize div fontslant sin mul fontslant cos div
		fontheight ptsize div
		0 0
	] makefont setfont
} bind def

/sf {f} bind def

/cf {
	dup length 2 idiv
	/entries exch def
	/chtab exch def
	/newencoding exch def
	/newfont exch def

	findfont dup length 1 add dict
	/newdict exch def
	{1 index /FID ne {newdict 3 1 roll put}{pop pop} ifelse} forall

	newencoding type /arraytype eq {newdict /Encoding newencoding put} if

	newdict /Metrics entries dict put
	newdict /Metrics get
	begin
		chtab aload pop
		1 1 entries {pop def} for
		newfont newdict definefont pop
	end
} bind def

%
% A few arrays used to adjust reference points and character widths in some
% of the printer resident fonts. If square roots are too high try changing
% the lines describing /radical and /radicalex to,
%
%	/radical	[0 -75 550 0]
%	/radicalex	[-50 -75 500 0]
%
% Move braceleftbt a bit - default PostScript character is off a bit.
%

/Sdefs [
	/bracketlefttp		[201 500]
	/bracketleftbt		[201 500]
	/bracketrighttp		[-81 380]
	/bracketrightbt		[-83 380]
	/braceleftbt		[203 490]
	/bracketrightex		[220 -125 500 0]
	/radical		[0 0 550 0]
	/radicalex		[-50 0 500 0]
	/parenleftex		[-20 -170 0 0]
	/integral		[100 -50 500 0]
	/infinity		[10 -75 730 0]
] def

/S1defs [
	/underscore		[0 80 500 0]
	/endash			[7 90 650 0]
] def
%
% Tries to round clipping path dimensions, as stored in array pagebbox, so they
% match one of the known sizes in the papersizes array. Lower left coordinates
% are always set to 0.
%

/roundpagebbox {
    7 dict begin
	/papersizes [8.5 inch 11 inch 14 inch 17 inch] def

	/mappapersize {
		/val exch def
		/slop .5 inch def
		/diff slop def
		/j 0 def
		0 1 papersizes length 1 sub {
			/i exch def
			papersizes i get val sub abs
			dup diff le {/diff exch def /j i def} {pop} ifelse
		} for
		diff slop lt {papersizes j get} {val} ifelse
	} def

	pagebbox 0 0 put
	pagebbox 1 0 put
	pagebbox dup 2 get mappapersize 2 exch put
	pagebbox dup 3 get mappapersize 3 exch put
    end
} bind def

%%EndProlog
%%BeginSetup
mark
10 dict dup begin
	/FontType 3 def
	/FontMatrix [1 0 0 1 0 0] def
	/FontBBox [1 1 0 0] def
	/Encoding 256 array def
	0 1 255 {Encoding exch /.notdef put} for
	Encoding 33 /h33 put
	Encoding 34 /h34 put
	Encoding 35 /h35 put
	Encoding 36 /h36 put
	Encoding 37 /h37 put
	Encoding 38 /h38 put
	Encoding 39 /h39 put
	Encoding 40 /h40 put
	Encoding 41 /h41 put
	Encoding 42 /h42 put
	Encoding 43 /h43 put
	Encoding 44 /h44 put
	Encoding 45 /h45 put
	Encoding 46 /h46 put
	Encoding 47 /h47 put
	Encoding 48 /h48 put
	Encoding 49 /h49 put
	Encoding 50 /h50 put
	Encoding 51 /h51 put
	Encoding 52 /h52 put
	Encoding 53 /h53 put
	Encoding 54 /h54 put
	Encoding 55 /h55 put
	Encoding 56 /h56 put
	Encoding 57 /h57 put
	Encoding 58 /h58 put
	Encoding 59 /h59 put
	Encoding 60 /h60 put
	Encoding 61 /h61 put
	Encoding 62 /h62 put
	Encoding 63 /h63 put
	Encoding 64 /h64 put
	Encoding 65 /h65 put
	Encoding 66 /h66 put
	Encoding 67 /h67 put
	Encoding 68 /h68 put
	Encoding 69 /h69 put
	Encoding 70 /h70 put
	Encoding 71 /h71 put
	Encoding 72 /h72 put
	Encoding 73 /h73 put
	Encoding 74 /h74 put
	Encoding 75 /h75 put
	Encoding 76 /h76 put
	Encoding 77 /h77 put
	Encoding 78 /h78 put
	Encoding 79 /h79 put
	Encoding 80 /h80 put
	Encoding 81 /h81 put
	Encoding 82 /h82 put
	Encoding 83 /h83 put
	Encoding 84 /h84 put
	Encoding 85 /h85 put
	Encoding 86 /h86 put
	Encoding 87 /h87 put
	Encoding 88 /h88 put
	Encoding 89 /h89 put
	Encoding 90 /h90 put
	Encoding 91 /h91 put
	Encoding 92 /h92 put
	Encoding 93 /h93 put
	Encoding 94 /h94 put
	Encoding 95 /h95 put
	Encoding 96 /h96 put
	Encoding 97 /h97 put
	Encoding 98 /h98 put
	Encoding 99 /h99 put
	Encoding 100 /h100 put
	Encoding 101 /h101 put
	Encoding 102 /h102 put
	Encoding 103 /h103 put
	Encoding 104 /h104 put
	Encoding 105 /h105 put
	Encoding 106 /h106 put
	Encoding 107 /h107 put
	Encoding 108 /h108 put
	Encoding 109 /h109 put
	Encoding 110 /h110 put
	Encoding 111 /h111 put
	Encoding 112 /h112 put
	Encoding 113 /h113 put
	Encoding 114 /h114 put
	Encoding 115 /h115 put
	Encoding 116 /h116 put
	Encoding 117 /h117 put
	Encoding 118 /h118 put
	Encoding 119 /h119 put
	Encoding 161 /k33 put
	Encoding 162 /k34 put
	Encoding 163 /k35 put
	Encoding 164 /k36 put
	Encoding 165 /k37 put
	Encoding 166 /k38 put
	Encoding 167 /k39 put
	Encoding 168 /k40 put
	Encoding 169 /k41 put
	Encoding 170 /k42 put
	Encoding 171 /k43 put
	Encoding 172 /k44 put
	Encoding 173 /k45 put
	Encoding 174 /k46 put
	Encoding 175 /k47 put
	Encoding 176 /k48 put
	Encoding 177 /k49 put
	Encoding 178 /k50 put
	Encoding 179 /k51 put
	Encoding 180 /k52 put
	Encoding 181 /k53 put
	Encoding 182 /k54 put
	Encoding 183 /k55 put
	Encoding 184 /k56 put
	Encoding 185 /k57 put
	Encoding 186 /k58 put
	Encoding 187 /k59 put
	Encoding 188 /k60 put
	Encoding 189 /k61 put
	Encoding 190 /k62 put
	Encoding 191 /k63 put
	Encoding 192 /k64 put
	Encoding 193 /k65 put
	Encoding 194 /k66 put
	Encoding 195 /k67 put
	Encoding 196 /k68 put
	Encoding 197 /k69 put
	Encoding 198 /k70 put
	Encoding 199 /k71 put
	Encoding 200 /k72 put
	Encoding 201 /k73 put
	Encoding 202 /k74 put
	Encoding 203 /k75 put
	Encoding 204 /k76 put
	Encoding 205 /k77 put
	Encoding 206 /k78 put
	Encoding 207 /k79 put
	Encoding 208 /k80 put
	Encoding 209 /k81 put
	Encoding 210 /k82 put
	Encoding 211 /k83 put
	Encoding 212 /k84 put
	Encoding 213 /k85 put
	Encoding 214 /k86 put
	Encoding 215 /k87 put
	Encoding 216 /k88 put
	Encoding 217 /k89 put
	Encoding 218 /k90 put
	Encoding 219 /k91 put
	Encoding 220 /k92 put
	Encoding 221 /k93 put
	Encoding 222 /k94 put
	Encoding 223 /k95 put
	Encoding 224 /k96 put
	Encoding 225 /k97 put
	Encoding 226 /k98 put
	Encoding 227 /k99 put
	Encoding 228 /k100 put
	Encoding 229 /k101 put
	Encoding 230 /k102 put
	Encoding 231 /k103 put
	Encoding 232 /k104 put
	Encoding 233 /k105 put
	Encoding 234 /k106 put
	Encoding 235 /k107 put
	Encoding 236 /k108 put
	Encoding 237 /k109 put
	Encoding 238 /k110 put
	Encoding 239 /k111 put
	Encoding 240 /k112 put
	Encoding 241 /k113 put
	Encoding 242 /k114 put
	Encoding 243 /k115 put
	Encoding 244 /k116 put
	Encoding 245 /k117 put
	Encoding 246 /k118 put
	Encoding 247 /k119 put
	/BuildChar {
		0 begin
		/char exch def
		/fontdict exch def
		/charname fontdict /Encoding get char get def
		/charinfo fontdict /CharData get charname get def
		1 0 setcharwidth
		charinfo 5 get charinfo 6 get true
		fontdict /imagemaskmatrix get
			dup 4 charinfo 7 get put
			dup 5 charinfo 8 get put
		charinfo 9 1 getinterval cvx
		imagemask
		end
	} def
	/BuildChar load 0 6 dict put
	/imagemaskmatrix [24 0 0 -24 0 0] def
	/CharData 256 dict def
	CharData begin
/h33 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000000000000400000300000300000270007fe00004000004400004400007f0001c4c003486006483004503008603008e03009a0600e20c0000700000000> ] def
/h34 [1 0 0 1 1 24 24 -.5 23.5
 <00c000007000006000006300107f800ffc0000c00000c40000860000860000bf8001cc6002883004981808901810a00c10c00c20c00c20c00c2140182660183c6030300060000380> ] def
/h35 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000000000000000000000000000000000000800000403000400c00400400400600400200420300440300640300280f0038030038000018000000000000000> ] def
/h36 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000002000001000001000c018002018001018001818000818000c18000c18400418400618c0060c801e0d800e0f0006070000070000030000000000000000000000> ] def
/h37 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000002000001800000e00000600000000000000010e0000f30000c180000180000180000180000180000300000300000600000c00003000000000> ] def
/h38 [1 0 0 1 1 24 24 -.5 23.5
 <006000001c00000700000300000000000000000000001e0004710003c0800300c00000c00000c00000c00000c00000c00000c000018000018000030000060000180000e000000000> ] def
/h39 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000001000000c00000700000300000000000200008f00007300004600000c0000180000300000600000d000018800038c000307f00003e0000000> ] def
/h40 [1 0 0 1 1 24 24 -.5 23.5
 <002000001800000e00000600000000000000000200021f0001f300018600000c0000180000300000200000400000c0000180000360000610000e10001c1800180ff80003f8000000> ] def
/h41 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000000000000000001000000c00000c0000081c000983004f830038040008000008f0000b0c000c0600180600380601680600c80c0058f00008000000000> ] def
/h42 [1 0 0 1 1 24 24 -.5 23.5
 <00000003000001c00001800001806001801801980c31f80c1fc0300100000100000103c0011c7001601801800c03000c07000c4d000c7900183900381788f00387c0010000000000> ] def
/h43 [1 0 0 1 1 24 24 -.5 23.5
 <00000001800000c00000e00000c00000800000806001f81847860c79020633020603020702020706023f0606060c06000c0400180c00180c0031180070f800607000006000000000> ] def
/h44 [1 0 0 1 1 24 24 -.5 23.5
 <00000601800300c03300e01800c0180080000080c001f83047861879020c33020c03020e02020e06023e06060c0c06000c0400180c00180c0031180070f800607000006000000000> ] def
/h45 [1 0 0 1 1 24 24 -.5 23.5
 <01c00000c000006000006700103e000ff0000718000008e0000fc0081c0007e2000303000001800000c000f8e00307e00400600800000800000c000007000003fe0000fe00000000> ] def
/h46 [1 0 0 1 1 24 24 -.5 23.5
 <01c00600c003006033006718103e180ff0000718000008e0000fc0081c0007e2000303000001800000c000f8e00307e00400600800000800000c000007000003fe0000fe00000000> ] def
/h47 [1 0 0 1 1 24 24 -.5 23.5
 <0000800000c00001c0000380000700000e0000380000600001800006000008000008000004000003000001c000006000003000001c00000e000007000003800001800001c00000c0> ] def
/h48 [1 0 0 1 1 24 24 -.5 23.5
 <000100000180000386000703000e33001c1800301800600001800006000008000008000004000003000001c000006000003000001800000c00000600000700000300000380000180> ] def
/h49 [1 0 0 1 1 24 24 -.5 23.5
 <0000001803800c00e00c00600c00601800601800661841ff103fe01018603000603000603200603200603200603400403400c01c00c01800c0180080180180080100000200000400> ] def
/h50 [1 0 0 1 1 24 24 -.5 23.5
 <000006300003180e3318039818019830018030018030018c2107fe20ff80606180600180640180640180640180680100680300380300300300300200300600100400000800001000> ] def
/h51 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000002000001f000007fc00007c0001c000060000000000000000000000000000000000000000800001000001000001000001000000c000007fff001fff0000000000000> ] def
/h52 [1 0 0 1 1 24 24 -.5 23.5
 <00000600000302003301f018007f98000780001c000060000000000000000000000000000000000000000800001000001000001000001000000c000007fff001fff0000000000000> ] def
/h53 [1 0 0 1 1 24 24 -.5 23.5
 <00e00001c00000c1800060e00031c0101f000ffc000386000003000001800000c00000e0003e6001c3f006007004002008000008000004000007000003f00000ff80000f80000000> ] def
/h54 [1 0 0 1 1 24 24 -.5 23.5
 <01c00603800301863300c398006718103c000ff800038c000006000003000001800001c0003cc001c7e00600e004004008000008000004000007000003f00000ff80000f80000000> ] def
/h55 [1 0 0 1 1 24 24 -.5 23.5
 <0600000300000380000380000380000300000300000300000300000300000300000300000300000300000200000200000200040200080200100200600103c001ff00007800000000> ] def
/h56 [1 0 0 1 1 24 24 -.5 23.5
 <0600000300000380000381800380c0030cc00306000306000300000300000300000300000300000300000200000200000200040200080200100200600103c001ff00007800000000> ] def
/h57 [1 0 0 1 1 24 24 -.5 23.5
 <001800000e00000700000600000600001ffe83fc1f7f0400300400007c00008c0001060001060001060001060000860000fe00006400000c0000080000180000100000200000c000> ] def
/h58 [1 0 0 1 1 24 24 -.5 23.5
 <001806000e0300073300061800061800060083fffe7f041f300400007c00008c0001060001060001060001060000860000fe00006400000c0000080000180000100000200000c000> ] def
/h59 [1 0 0 1 1 24 24 -.5 23.5
 <0003000001800001c006018003018003018003018003018e031fff0ff180fb0180630180030100030300031300030e0003060001000001000001800000e000007ff0001ff0000000> ] def
/h60 [1 0 0 1 1 24 24 -.5 23.5
 <00000600060300033306039803031803030003030003031c031ffe0ff300fb0300630300030200030600032600031c00030c0001000001000001800000e000007ff0001ff0000000> ] def
/h61 [1 0 0 1 1 24 24 -.5 23.5
 <00000000070001398001e380008600000c000018000030000040000081f8011ffc0666000f88003c1000302000002000004000004000004000002000003000001e00000f80000380> ] def
/h62 [1 0 0 1 1 24 24 -.5 23.5
 <00000000070001398601e383008633000c180018180030000040000081f8011ffc0666000f88003c1000302000002000004000004000004000002000003000001e00000f80000380> ] def
/h63 [1 0 0 1 1 24 24 -.5 23.5
 <00000001800000c00000c000008c0001bc0041f0007f81c033007803001c02001c0600600400000c00000c0000180000181000302000302000701000601c00000ffc0001fc000000> ] def
/h64 [1 0 0 1 1 24 24 -.5 23.5
 <00000601800300c03300c018008c1801bc0041f0007f81c033007803001c02001c0600600400000c00000c0000180000181000302000302000701000601c00000ffc0001fc000000> ] def
/h65 [1 0 0 1 1 24 24 -.5 23.5
 <01800000c00000c00000800001860021bf003fe0001980000100000100000300000303c0021c3002701802c00c07000c07000c0600180000380000700000e0000380001c00000000> ] def
/h66 [1 0 0 1 1 24 24 -.5 23.5
 <01800000c00000c00600800301863321bf183fe0181980000100000100000300000303c0021c3002701802c00c07000c07000c0600180000380000700000e0000380001c00000000> ] def
/h67 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000000000000000000000000000f000078c013c0600f00300400300000300000300000600000600000c0000300000c00000000000000000000> ] def
/h68 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000fc000f03003c0088f000c7c000438000600000600000600000e00000c00001c0000380000700001c0000700003800000000000000000000> ] def
/h69 [1 0 0 1 1 24 24 -.5 23.5
 <000006000003000033000018000018000f8000f0e003c0308f00187c001838000c00000c00000c00000c0000180000380000700000e0000380000e00007000000000000000000000> ] def
/h70 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000f0001ff841f3807f06003c0c0010100000200000200000400000400000800000800000800000800000c000004000006000003800001f000007c00001c0000000> ] def
/h71 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000e0001ff041f3807f06063c0c0310103300201800201800400000400000800000800000800000800000c000004000006000003800001f000007c00001c0000000> ] def
/h72 [1 0 0 1 1 24 24 -.5 23.5
 <00000003000001800001c0000180000180000180000080000081c00087c0009f0000780000e0000180000300000600000400000800000800000800000400e003ffe000ff80000000> ] def
/h73 [1 0 0 1 1 24 24 -.5 23.5
 <00000003000c01800601c0660180300180300180000080000081c00087c0009f0000780000e0000180000300000600000400000800000800000800000400e003ffe000ff80000000> ] def
/h74 [1 0 0 1 1 24 24 -.5 23.5
 <00600000300000600000600040cc007ffe0038800001007003000c02003e0600c60c010018010038020070020060020000020000020000fa000107800202e002067001fc30007800> ] def
/h75 [1 0 0 1 1 24 24 -.5 23.5
 <0000000800000c00000c00000c01e00c0ff818303c1800601800801800001000003000003000003100003100003210003220003220001430001c1ffe1c07fc0c0000080000000000> ] def
/h76 [1 0 0 1 1 24 24 -.5 23.5
 <000000006000001000001800101000101000103f8010f06013201816200c18600c18400638c0062c800647800647000e83000c8787cccd883858083c300ce6000386000000000000> ] def
/h77 [1 0 0 1 1 24 24 -.5 23.5
 <0600000300000180000180000180000300000300000783c05f1c3032601802800807000c06000c0e000c0a000c1a000c12001c320798730c786b083c4f0c660607c6060000000000> ] def
/h78 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000001f0000f8c0038c30060c180c0c0c18180c10180620300620200640600640400640c00661800663000c36000c3c00181800300000c0000300000000000000> ] def
/h79 [1 0 0 1 1 24 24 -.5 23.5
 <0000003001801800601c006018006018004018004030204e301ffc300c403000402000406000406400406400606400606c0060680fe028307038407c3840ee183fc6100f00000000> ] def
/h80 [1 0 0 1 1 24 24 -.5 23.5
 <0000063000031806331c0198180198180180180100308138307ff03031003001002001006001006401006401806401806c0180681f802861c03881f03883b8187f18101c00000000> ] def
/h81 [1 0 0 1 1 24 24 -.5 23.5
 <00000030000018060e1c019118019118019118010e308130307ff03031003001002001006001006401006401806401806c0180681f802861c03881f03883b8187f18101c00000000> ] def
/h82 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000806003c0604fc0603980600300600200700600500400580c00980c008c08008e180187180102180100180300180200180600080c000e380007f00001c000000000> ] def
/h83 [1 0 0 1 1 24 24 -.5 23.5
 <0000060000030100330781989f81987301800601800401c00c014008016018016018013010013830011c300208300200300200300400300c001018001c70000fe000038000000000> ] def
/h84 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000001000e0781919f819173019106018e0401c00c014008016018016018013010013830011c300208300200300200300400300c001018001c70000fe000038000000000> ] def
/h85 [1 0 0 1 1 24 24 -.5 23.5
 <000000004000002000003000001800000c00000c00001000002000002000004000004000002000003000001fe000783c018806860c079c0c1f780c0670fc00203800000000000000> ] def
/h86 [1 0 0 1 1 24 24 -.5 23.5
 <00000000400000200000300000180c000c06000c66001030002030002000004000004000002000003000001fe000783c018806860c079c0c1f780c0670fc00203800000000000000> ] def
/h87 [1 0 0 1 1 24 24 -.5 23.5
 <000000004000002000003000001800000c00000c38001044002044002044004038004000002000003000001fe000783c018806860c079c0c1f780c0670fc00203800000000000000> ] def
/h88 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000000380000640000420000c20000c1000081800180c00180600b00300f001806000e000007000003800001e00000f000003000000000000000000000000> ] def
/h89 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000600000300003300381800641800420000c20000c1000081800180c00180600b00300f001806000e000007000003800001e00000f000003000000000000000000000000> ] def
/h90 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000700380880640880420880c20700c1000081800180c00180600b00300f001806000e000007000003800001e00000f000003000000000000000000000000> ] def
/h91 [1 0 0 1 1 24 24 -.5 23.5
 <0000003000001801f81c3ffc1800c018006018006030006030007c3001f8303f602000606000606400606400606400606c00606807e028187038207c3820ee181fc6100700000000> ] def
/h92 [1 0 0 1 1 24 24 -.5 23.5
 <0000003000001803c61cffe318030318019818018c30018c3001803001f030ffe02001806001806401806401806401806c0180681f802861c03881f03883b8187f18101c00000000> ] def
/h93 [1 0 0 1 1 24 24 -.5 23.5
 <00000e3000111803911cffd118030e1801801801803001803001f0300fe030f9802001806001806401806401806401806c0180681f802861c03881f03883b8187f18101c00000000> ] def
/h94 [1 0 0 1 1 24 24 -.5 23.5
 <001800000c00000e00000c00000c001009e00fffc00708000009000008c0080bc007ff00038800000800000800000c00000c0003fc000c0f80100de0183c700ff83003e000000000> ] def
/h95 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000083c0007ce00030e00001c0000180000304000202000603000403000c03003fe600d87e03100702300fc4600ce4c0186580180700300200200000400000000000000> ] def
/h96 [1 0 0 1 1 24 24 -.5 23.5
 <00000006000003000003000003380003f8007fe03033004802004c0200460e004613005e2300442300402300401200200e00200600200400300400700601f003ffe000ff00000000> ] def
/h97 [1 0 0 1 1 24 24 -.5 23.5
 <000000001800000c00200c00300c00100800101f8018f8e00b90380e301c1c200c34600e64400646c006c3800683800e83800c86c01c4c40187000302000c0000300000000000000> ] def
/h98 [1 0 0 1 1 24 24 -.5 23.5
 <00c00000600000700000600000600008400007400001c00000c00001800006800008800009008007e04001f8600118200300300300300300300100600180e000ffc0003f00000000> ] def
/h99 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000000000000200000180001f8000218000207c0033c6001c0302380301ec4600c6380003000001000001800000800000c00000c00000600000600000000> ] def
/h100 [1 0 0 1 1 24 24 -.5 23.5
 <001000000800038c00047e00080c000801f00c0e0c06700603c0030700039d8007f8c61e7063fc0060f0003000001800001800000c00000c00000e00000600000700000300000000> ] def
/h101 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000000001800002400024700025ac0046260048220048230054230054230064230062620063460021cc0000700000c00000800001000000000> ] def
/h102 [1 0 0 1 1 24 24 -.5 23.5
 <000000003800404400208600308fc031323031421831830c21030c63030665030665030668830668830c68460c304618302670301fe0100f80000800001800001000002000004000> ] def
/h103 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000000001000000c00000c00000c000008c0000fc000080000080000080000080000080000080000f800030f00020bc00118c000f000000000> ] def
/h104 [1 0 0 1 1 24 24 -.5 23.5
 <006000003800001c000018000018000018000018e0001ff000180000180000180000180000180000180000180000180000180007fe000c1f801019e01018701870300fc000000000> ] def
/h105 [1 0 0 1 1 24 24 -.5 23.5
 <004000002000003000001800003c0000cc000100000100000200000200000200000200000207800618600660300780180f00180e00180400380000300000e0000380001c00000000> ] def
/h106 [1 0 0 1 1 24 24 -.5 23.5
 <020000030000010f000111800120c00120c00340600340600380600380600300600300600300600300600100600000c00000c00000c0000180000180000300000600000c00003000> ] def
/h107 [1 0 0 1 1 24 24 -.5 23.5
 <000000000c00027e0003c700018e00000c0000180000300000600000c000008000019f0003e0c00380600700300e00301c0030187030019830010c600106c0018700007c00000000> ] def
/h108 [1 0 0 1 1 24 24 -.5 23.5
 <0600000300000380000300000300000207000218808720c07f40c03280c00700c00700c00e00800c01801c01801c0180340180340180660180f601c3ce00fe0e0038040000000000> ] def
/h109 [1 0 0 1 1 24 24 -.5 23.5
 <000000020c0003fe0001c600000c0000180000100000200000600000c000018f800370600780300e00181c00183800183000180000380000300000600001c0000700007800000000> ] def
/h110 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000000000000800000600000600000400000400000e00007c7000298c000a06001c0600180300380300280300480600e80600980c000c70000c000000000> ] def
/h111 [1 0 0 1 1 24 24 -.5 23.5
 <01800000c00000e00000c00000c00000800000800001e00027e1e01cc63800980c01a00e02c0060280060580060c800608800e18800c34c01872c03061c0c001c300008000000000> ] def
/h112 [1 0 0 1 1 24 24 -.5 23.5
 <00000004180003fc00018c00001800001800001000003000002000006f8000f06003c0100c801819800811000c23000c22000c260f1c3410d81c10700818e0000f80000000000000> ] def
/h113 [1 0 0 1 1 24 24 -.5 23.5
 <000600023f0003e600018400000c000018000037800078c000c06001806007006006786000ccc0008d80007e000060000080000100e00603380d860c387c0e70383e601004000000> ] def
/h114 [1 0 0 1 1 24 24 -.5 23.5
 <0060000030000030001026000fff0006600000c00000800001007003603807b0f80e1bc01c1e0018380000780000980001180002080004000004000007800003ffc000ffc0000000> ] def
/h115 [1 0 0 1 1 24 24 -.5 23.5
 <000000001800000c00001c0000180000380000300000600000600000c0000080000180000300000270000798000e18000c1802181806180c0c300c18700c70600fe0600780000000> ] def
/h116 [1 0 0 1 1 24 24 -.5 23.5
 <202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020> ] def
/h117 [1 0 0 1 1 24 24 -.5 23.5
 <202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020> ] def
/h118 [1 0 0 1 1 24 24 -.5 23.5
 <202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020> ] def
/h119 [1 0 0 1 1 24 24 -.5 23.5
 <202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020> ] def
/k33 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000000000000000040083fe007e0600700f0002300001c00001800001800001000003000003000002000006000004000008000010000000000> ] def
/k34 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000f021fffc3fc01e1c003e003078001cc0000f00000c00000c0000180000180000100000300000200000600000400000c000008000010000020000040000000000> ] def
/k35 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000000000100000180000180000300000600000c00001800003c0000640000c400030400000400000400000c00000c00000c00000400000000> ] def
/k36 [1 0 0 1 1 24 24 -.5 23.5
 <0001000001800003c0000380000700000600000e00001c0000380000780000cc00018c00030c000c0c00300c00000c00000c00000c00000c00000c00000c00000c00000800000000> ] def
/k37 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000000002000001800001800021fe001f0700100600300600300c00100c0000180000180000300000200000400000800001000002000000000> ] def
/k38 [1 0 0 1 1 24 24 -.5 23.5
 <0000000070000038000018000018003018f01ffff80f803c0c00380c00300c00700c00600c00600c00c00800c0000180000180000300000600000400000800001000002000000000> ] def
/k39 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000000000000000000000000000000000000000002038001ffc001a0000018000018000018000018000010000010001010c00ffff0070030000000000000> ] def
/k40 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000001000e00ffff007303000180000180000180000180000180000180000180000380000300000300080fff87ffffe3c000e000000000000000000000000> ] def
/k41 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000000001000000c00000c00000c60087ff007cc00021c0000140000340000640000c4000184000304000c0400003c00001c00000c00000000> ] def
/k42 [1 0 0 1 1 24 24 -.5 23.5
 <000000000c000007000003000003000003000003fc21fffe1fc7000c0f00001f00003b0000330000630000c300018300030300060300180300600300001300000f00000700000200> ] def
/k43 [1 0 0 1 1 24 24 -.5 23.5
 <000000001800000c00000e00000c00001c00001820107ff00ffe3807303800603000603000c06000c0600180600180c00300c00600c00c0180182180301380400f00000700000200> ] def
/k44 [1 0 0 1 1 24 24 -.5 23.5
 <000006001803000c33000e18000c18001c00001820107ff00ffe3807303800603000603000c06000c0600180600180c00300c00600c00c0180182180301380400f00000700000200> ] def
/k45 [1 0 0 1 1 24 24 -.5 23.5
 <00000001800000e0000060000061c0002fe0007e0021e0001f30000c3000001038001bfc001f0040f8003f8c001c0c00000400000600000600000600000300000300000300000100> ] def
/k46 [1 0 0 1 1 24 24 -.5 23.5
 <00000601800300e033006018006198002fc0007c0021e0001f30000c3000001038001bfc001f0040f8003f8c001c0c00000400000600000600000600000300000300000300000100> ] def
/k47 [1 0 0 1 1 24 24 -.5 23.5
 <000000002000003800003040007fe0007c7000e07001c0e00300c00601c0080180100380000700000e00000c0000180000300000600000c000018000030000060000180000000000> ] def
/k48 [1 0 0 1 1 24 24 -.5 23.5
 <00000600000300403300701800609800ffc000f8e001c0e00381c00601800c0380100700200e00001c0000180000300000600000c0000180000300000600000c0000300000000000> ] def
/k49 [1 0 0 1 1 24 24 -.5 23.5
 <00000000c00000600000600000e00000c00001807c03fffe067e000c0300100300200300000600000600000c00000c0000180000300000600000c0000180000300000c0000000000> ] def
/k50 [1 0 0 1 1 24 24 -.5 23.5
 <00000600c00300603300601800e01800c00001800003007c06fffe0c3e00100300200300000600000600000c00000c0000180000300000600000c0000180000300000c0000000000> ] def
/k51 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000000000e0107ff00ff0380700300000300000700000600000600000600000600000e00000c00000c01000c00fffe007c060000000000000000000000000> ] def
/k52 [1 0 0 1 1 24 24 -.5 23.5
 <0000060000030000330000180000180001c0107fe00ff0700700600000600000e00000c00000c00000c00001c00001800001801001800fffc007c0c0000000000000000000000000> ] def
/k53 [1 0 0 1 1 24 24 -.5 23.5
 <0000000006000003800301c001818001818001819e819fff7ff180398180018180018180018380018300018300010300000600000600000400000c00001800001000002000004000> ] def
/k54 [1 0 0 1 1 24 24 -.5 23.5
 <000006000c0300073303039801831801830001830001831c819ffe7ff300398300018300018700018600018600010600000c00000c00000800001800003000002000004000008000> ] def
/k55 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000006000003800001c00000c0000000000000000000021800040f00080380100180600000c0000180000300000e00003c0010f0001fe0000f8000060000000000000000> ] def
/k56 [1 0 0 1 1 24 24 -.5 23.5
 <00000600000306003303801801c01800c0000000000000000000021800040f00080380100180600000c0000180000300000e00003c0010f0001fe0000f8000060000000000000000> ] def
/k57 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000180041fc003f8e001c1c0000180000380000300000600000600000c00001c0000320000618000c0e001807006003818001c60000c000000000000000000> ] def
/k58 [1 0 0 1 1 24 24 -.5 23.5
 <000006000003000033000318083f9807f1c0038180000380000300000700000600000e00000c0000180000360000618000c0e001807006003818001c60000c000000000000000000> ] def
/k59 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000001800000c00000e00000c00000c00000c07000cff800fc3c07c0707ec0c030c10000c20000c00000c00000c000004000007000003ff8000ff8000000000000000000> ] def
/k60 [1 0 0 1 1 24 24 -.5 23.5
 <00000600000301803300c01800e01800c00000c00000c07000cff800fc3c07c0707ec0c030c10000c20000c00000c00000c000004000007000003ff8000ff8000000000000000000> ] def
/k61 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000600000301000380c00300600700700600300e00380c00181c0000180000300000300000600000c00000c00001800003000002000004000008000010000000000> ] def
/k62 [1 0 0 1 1 24 24 -.5 23.5
 <0000060000030000330003184001983001c01801801c01800c03000e0300060600000600000c00000c00001800001000003000006000004000008000010000020000040000000000> ] def
/k63 [1 0 0 1 1 24 24 -.5 23.5
 <000000003000001800001860003ff000773800603000c0700180600360c00631c0181980001b00000700000600000c0000180000300000600000c000018000060000180000000000> ] def
/k64 [1 0 0 1 1 24 24 -.5 23.5
 <000006006003003033003018006198007fc000d8e00180c003018006c1800c6300303300003600000c00000c0000180000300000600000c0000180000300000c0000300000000000> ] def
/k65 [1 0 0 1 1 24 24 -.5 23.5
 <000000000200000300000f80003e0000f800070c00000c00000c00000c7841fffe3f8c061c0c00000c00000c00001800001800001800003000003000006000004000008000010000> ] def
/k66 [1 0 0 1 1 24 24 -.5 23.5
 <000006000203000333000f98003e1800f800070c00000c00000c00000c7841fffe3f8c061c0c00000c00000c00001800001800001800003000003000006000004000008000010000> ] def
/k67 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000000000000000000000000000000000000020400410700218600318600308c00100c0000180000100000300000600000400000800001000002000000000> ] def
/k68 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000403000601820201c1030181830381c30300c00300c00600000600000c00000c0000180000180000300000600000c00001800003000006000018000000000> ] def
/k69 [1 0 0 1 1 24 24 -.5 23.5
 <0000060000030000330103180181984081c020c18030c18038c380180300180300000600000600000c00000c0000180000180000300000600000c0000180000300000c0000000000> ] def
/k70 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000403c003ffe001e00000000000000000000000007840fffe3fc80e1c0c00000c00000c00001800001800001800003000003000002000006000004000008000010000> ] def
/k71 [1 0 0 1 1 24 24 -.5 23.5
 <00000600000304073303ff9801c0180000000000000000000000f040fffc3fc81c1c0c00000c00000c00001800001800001800003000003000002000006000004000008000010000> ] def
/k72 [1 0 0 1 1 24 24 -.5 23.5
 <00000003000001c00000e00000e00000c00000c00000c00000c00000f00000ce0000c38000c0e000c07000c03000c00000c00000c00000c00000c00000c00000c000008000000000> ] def
/k73 [1 0 0 1 1 24 24 -.5 23.5
 <00000003000001c03000e01800e19800c0c000c0c000c00000c00000f00000ce0000c38000c0e000c07000c03000c00000c00000c00000c00000c00000c00000c000008000000000> ] def
/k74 [1 0 0 1 1 24 24 -.5 23.5
 <000000003000001800000c00000c00000c00000c00000c7841fffe3f8c0e1c0c00000c00001c00001800001800001800003000003000002000006000004000008000010000000000> ] def
/k75 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000008078007ffe00380e0000000000000000000000000000000000000000000000000000000400ff03ffffe1f001e000000000000000000000000000000> ] def
/k76 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000200e001fff000e0e00000c00001c000018003030000c300003600001c00000e00001b000033800031800061c000c0c00180000300000c0000300000000000> ] def
/k77 [1 0 0 1 1 24 24 -.5 23.5
 <003000001c00000e00000600000000000180087fc007e380030700000e00001c00003c80006c6000cc38018c1c030c0e0c0c06300c00000c00000c00000c00000c00000800000000> ] def
/k78 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000600000300000380000700000600000e00000c00001c0000180000300000700000600000c0000180000300000600000c000018000060000180000000000000000> ] def
/k79 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000000300000182000181000180800380c00300600300300600380600180c001c0c000c18000e100006200006c00006000000000000000000000000000000> ] def
/k80 [1 0 0 1 1 24 24 -.5 23.5
 <0000060000030000330000180300180182000181000180800380c00300600300300600380600180c001c0c000c18000e100006200006c00006000000000000000000000000000000> ] def
/k81 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000e00001103001101821101810e0180800380c00300600300300600380600180c001c0c000c18000e100006200006c00006000000000000000000000000000000> ] def
/k82 [1 0 0 1 1 24 24 -.5 23.5
 <0000001800000e000007000006000006000006000006078007ffc006e00006000006000006000006000006000006000006000007000003c07001fff0007fc0000000000000000000> ] def
/k83 [1 0 0 1 1 24 24 -.5 23.5
 <0000061800030e003307001806001806000006000006078007ffc006e00006000006000006000006000006000006000006000007000003c07001fff0007fc0000000000000000000> ] def
/k84 [1 0 0 1 1 24 24 -.5 23.5
 <0000001800000e001c07002206002206002206001c06078007ffc006e00006000006000006000006000006000006000006000007000003c07001fff0007fc0000000000000000000> ] def
/k85 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000001003e00ffff003c0380000700000600000600000c00000c0000180000180000300000600000c00001800003000006000018000060000000000000000> ] def
/k86 [1 0 0 1 1 24 24 -.5 23.5
 <0000060000030000330000182007981fffc00780e00000c00001c0000180000180000300000300000600000600000c0000180000300000600000c0000300000c0000000000000000> ] def
/k87 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000e000011400f113fff910f01ce000180000380000300000300000600000600000c00000c0000180000300000600000c000018000060000180000000000000000> ] def
/k88 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000001000003800002c0000660000c30000c1800180c00380600f003006001800000e000007000003c00001e000007000003000000000000000000000000> ] def
/k89 [1 0 0 1 1 24 24 -.5 23.5
 <00000000006000003000033001018003818002c0000660000c30000c1800180c00380600f003006001800000e000007000003c00001e000007000003000000000000000000000000> ] def
/k90 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000e001011003811002c1100660e00c30000c1800180c00380600f003006001800000e000007000003c00001e000007000003000000000000000000000000> ] def
/k91 [1 0 0 1 1 24 24 -.5 23.5
 <000000003000001800001c00001800001800001870403ffc3ff80c1e18000018000018000018400418200418300c181808181c18180c38180c309800007800003800001000000000> ] def
/k92 [1 0 0 1 1 24 24 -.5 23.5
 <000006003003001833001c180018180018000018e0203ff81ff8180e18000018000018000018400418200418300c181808181c18180c38180c309800007800003800001000000000> ] def
/k93 [1 0 0 1 1 24 24 -.5 23.5
 <00000000600000300e0038110030110030110031ce407fe03ff0601c300000300000300000308008304008306018303010303830301870301861300000f000007000002000000000> ] def
/k94 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000038401ffc3ff80e1f001c0800380000300000600000c0000180008200006400003800001c00000e00000700000700000300000000000000000000> ] def
/k95 [1 0 0 1 1 24 24 -.5 23.5
 <00000001000000c000007c00001f800003c00000c000000001000001800000f000003f000007c00000c000000000000004000003000001e000007f00000fc00001e0000060000000> ] def
/k96 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000003000001800001c00001c0000380000300000300000600000600000410000c0800080400180600100300300184201f87ffe0c3f800c18000c000000000000000000> ] def
/k97 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000c00000600000700000e00000c003018000c180003300001f00000e00000f00001b800031c00060c000c0e0018060030000060000180000600000000000000000> ] def
/k98 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000001007800fffc007c0000060000060000060000060000063f841fffc3fe0001c6000006000006000006000006000006000007800003ff8000ff8000000000000> ] def
/k99 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000000000000000000000001c00000c00000c0600043f0007c3821e0401f20800c3100001000001000001800001800000800000c00000c00000c00000000> ] def
/k100 [1 0 0 1 1 24 24 -.5 23.5
 <00000001800003c00000c00000c00000400c0061fe007f0701f00e8fa01c7c30303030c0001000001000001800001800000800000800000c00000c00000600000600000600000000> ] def
/k101 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000000000000000000000000000000000000000001030000ff8000c300000300000300000200000600000400000400107ff80fc0380c0000000000000000> ] def
/k102 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000080f0007ff8003838000030000030000030000030000060000060000060000040000040081fffe7fc03f380000000000000000000000000000> ] def
/k103 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000000000000000000000000000000000002018001ffc000c18000018000018002018001ff8000c10000010000010000010002010001ff8000c000000000> ] def
/k104 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000001003e00ffff0070070000060000060000060000060080fe007fcc00380c00000c00000c00000c0000080000080101f800fffc0070000000000000000000000> ] def
/k105 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000403c003ffe001c000000000000000000030101ff80ffc380700300000700000600000e00000c00001c0000380000300000600000c00001800006000038000000000> ] def
/k106 [1 0 0 1 1 24 24 -.5 23.5
 <0000000001800400c00200e00300c00300c00300c00300c00300c00300c00300c00300c00300c00300c00201c0000180000180000300000300000600000c0000300001c000000000> ] def
/k107 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000003000001800001c000c18000718000618000618000618000618010c18020c18040c18080c18101818601818c0101b80301f00203e00401c00800800000000000000> ] def
/k108 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000001800000e00000700000600000600000600000600000600040600080600100600200600c0060180060700060e0006380007f0000fc0000f0000040000000000000000> ] def
/k109 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000301ff01ffff818001c18001c1800180800180c00180c00300c00300c00300c00200c00600c00600ffff0040030040000000000000000000000> ] def
/k110 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000000000000000000000040041fe003f0700100600100c00100c0030180030180010300000200000600000c00000800001000006000000000> ] def
/k111 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000003000f01ffff80fc01c0c00180c00380c00300c00300c00600c00600400c0000180000180000300000600000c00001800003000006000018000000000000000> ] def
/k112 [1 0 0 1 1 24 24 -.5 23.5
 <000c00000600000700000600000600000600101fe00ffff007c60003060003060003060003060003061c87fffe7f860e380600000600000600000600000600000600000600000400> ] def
/k113 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000000000000001c010fff00fc0e00601c0003300001c000018000018000018000010000010000010000010f080fffe7fe01f3c0003000000000000000000000000> ] def
/k114 [1 0 0 1 1 24 24 -.5 23.5
 <0000000000000000600407f003fe1801e038000030000030000060081fe007f8c00381c0000180000300000700000600000c0000180000300000600000c000018000020000000000> ] def
/k115 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000008000004000007000003800201c00400c0080000100000200000c0000180000300000600000c0000380000700011e0000f80000f0000040000000000000000> ] def
/k116 [1 0 0 1 1 24 24 -.5 23.5
 <00000600e0030070330030180030183031c01fffe00f80f00c00e00c00c00c01c00c01800c01800c0300080300000600000600000c00000800001000002000004000008000000000> ] def
/k117 [1 0 0 1 1 24 24 -.5 23.5
 <000000000000000000000000000000000000001000000c00000c00000c0002086001fff00190600030600020400060c000c0c0008080010180021100040f00000600000400000000> ] def
/k118 [1 0 0 1 1 24 24 -.5 23.5
 <00000000000000000000000000000000000000000000400000600000c00000c0e0018ff0037c00060600080600000400000c00000800001800001000002000004000018000000000> ] def
/k119 [1 0 0 1 1 24 24 -.5 23.5
 <202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020> ] def
	/.notdef [0 0 0 0 0 1 1 0 0 <>] def
	end
	/UniqueID 2 def
end
/Kana exch definefont pop
/Jp /Kana def
/resolution 720 def
%
% Encoding vector and redefinition of findfont for the ISO Latin1 standard.
% The 18 characters missing from ROM based fonts on older printers are noted
% below.
%

/ISOLatin1Encoding [
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/space
	/exclam
	/quotedbl
	/numbersign
	/dollar
	/percent
	/ampersand
	/quoteright
	/parenleft
	/parenright
	/asterisk
	/plus
	/comma
	/minus
	/period
	/slash
	/zero
	/one
	/two
	/three
	/four
	/five
	/six
	/seven
	/eight
	/nine
	/colon
	/semicolon
	/less
	/equal
	/greater
	/question
	/at
	/A
	/B
	/C
	/D
	/E
	/F
	/G
	/H
	/I
	/J
	/K
	/L
	/M
	/N
	/O
	/P
	/Q
	/R
	/S
	/T
	/U
	/V
	/W
	/X
	/Y
	/Z
	/bracketleft
	/backslash
	/bracketright
	/asciicircum
	/underscore
	/quoteleft
	/a
	/b
	/c
	/d
	/e
	/f
	/g
	/h
	/i
	/j
	/k
	/l
	/m
	/n
	/o
	/p
	/q
	/r
	/s
	/t
	/u
	/v
	/w
	/x
	/y
	/z
	/braceleft
	/bar
	/braceright
	/asciitilde
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/.notdef
	/dotlessi
	/grave
	/acute
	/circumflex
	/tilde
	/macron
	/breve
	/dotaccent
	/dieresis
	/.notdef
	/ring
	/cedilla
	/.notdef
	/hungarumlaut
	/ogonek
	/caron
	/space
	/exclamdown
	/cent
	/sterling
	/currency
	/yen
	/brokenbar		% missing
	/section
	/dieresis
	/copyright
	/ordfeminine
	/guillemotleft
	/logicalnot
	/hyphen
	/registered
	/macron
	/degree			% missing
	/plusminus		% missing
	/twosuperior		% missing
	/threesuperior		% missing
	/acute
	/mu			% missing
	/paragraph
	/periodcentered
	/cedilla
	/onesuperior		% missing
	/ordmasculine
	/guillemotright
	/onequarter		% missing
	/onehalf		% missing
	/threequarters		% missing
	/questiondown
	/Agrave
	/Aacute
	/Acircumflex
	/Atilde
	/Adieresis
	/Aring
	/AE
	/Ccedilla
	/Egrave
	/Eacute
	/Ecircumflex
	/Edieresis
	/Igrave
	/Iacute
	/Icircumflex
	/Idieresis
	/Eth			% missing
	/Ntilde
	/Ograve
	/Oacute
	/Ocircumflex
	/Otilde
	/Odieresis
	/multiply		% missing
	/Oslash
	/Ugrave
	/Uacute
	/Ucircumflex
	/Udieresis
	/Yacute			% missing
	/Thorn			% missing
	/germandbls
	/agrave
	/aacute
	/acircumflex
	/atilde
	/adieresis
	/aring
	/ae
	/ccedilla
	/egrave
	/eacute
	/ecircumflex
	/edieresis
	/igrave
	/iacute
	/icircumflex
	/idieresis
	/eth			% missing
	/ntilde
	/ograve
	/oacute
	/ocircumflex
	/otilde
	/odieresis
	/divide			% missing
	/oslash
	/ugrave
	/uacute
	/ucircumflex
	/udieresis
	/yacute			% missing
	/thorn			% missing
	/ydieresis
] def

/NewFontDirectory FontDirectory maxlength dict def

%
% Apparently no guarantee findfont is defined in systemdict so the obvious
%
%	systemdict /findfont get exec
%
% can generate an error. So far the only exception is a VT600 (version 48.0).
%

userdict /@RealFindfont known not {
	userdict begin
		/@RealFindfont systemdict begin /findfont load end def
	end
} if

/findfont {
	dup NewFontDirectory exch known not {
		dup
		%dup systemdict /findfont get exec	% not always in systemdict
		dup userdict /@RealFindfont get exec
		dup /Encoding get StandardEncoding eq {
			dup length dict begin
				{1 index /FID ne {def}{pop pop} ifelse} forall
				/Encoding ISOLatin1Encoding def
				currentdict
			end
			/DummyFontName exch definefont
		} if
		NewFontDirectory 3 1 roll put
	} if
	NewFontDirectory exch get
} bind def

setup
2 setdecoding
%%EndSetup
%%Page: 1 1
/saveobj save def
mark
1 pagesetup
12 B f
(Hello World)1 639 1 2560 1230 t
(or)2823 1380 w
12 R f
(K)2419 1530 w
12 S f
(alhme)2505 1530 w
12 B f
(\264)2796 1530 w
12 S f
(ra ko)1 304 1 2842 1530 t
12 B f
(\264)3093 1530 w
12 S f
(sme)3146 1530 w
12 B f
(or)2823 1680 w
 save /Kana findfont 90 scalefont setfont
 2442 1830 m (\063) show restore
 save /Kana findfont 90 scalefont setfont
 2563 1830 m (\163) show restore
 save /Kana findfont 90 scalefont setfont
 2684 1830 m (\113) show restore
 save /Kana findfont 90 scalefont setfont
 2805 1830 m (\101) show restore
 save /Kana findfont 90 scalefont setfont
 2926 1830 m (\117) show restore
 save 3077 1830 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<071c70061860061860061860061860061860061860061866ffffff061860061860061860061860061860061860061fe006186006186006000006000006000006000c07fffe060000>}
 imagemask restore
 save 3198 1830 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<0800300ffff80c18300c18300c18300ffff00c18300c18300c18300ffff00c743000e20001c1800300e00ee1ff38c19ec0c18600c18000c18000c1800181800181800301800c0180>}
 imagemask restore
(\(DRAFT\))2634 1980 w
10 I f
(Rob Pike)1 363 1 2698 2220 t
(Ken Thompson)1 603 1 2578 2340 t
10 R f
(AT&T Bell Laboratories)2 993 1 2383 2520 t
(Murray Hill, New Jersey 07974)4 1267 1 2246 2640 t
10 I f
(ABSTRACT)2643 3020 w
10 R f
(Plan 9 from Bell Labs has recently been converted from ASCII to an ASCII\255)13 3350 1 1330 3280 t
( this paper we explain the rea\255)6 1262( In)1 143(compatible variant of Unicode, a 16\255bit character set.)7 2195 3 1080 3400 t
( describe the character set and representation we chose, and present)10 2778(sons for the change,)3 822 2 1080 3520 t
( text format.)2 559(the programming models and software changes that support the new)9 3041 2 1080 3640 t
(Although we stopped short of full internationalization)6 2214 1 1080 3760 t
10 S1 f
(\320)3294 3760 w
10 R f
( error mes\255)2 459(for example, system)2 827 2 3394 3760 t
(sages are in Unixese, not Japanese)5 1394 1 1080 3880 t
10 S1 f
(\320)2474 3880 w
10 R f
( Plan 9 is the first system to treat the rep\255)10 1673(we believe)1 433 2 2574 3880 t
(resentation of all major languages on a uniform, equal footing throughout all its software.)13 3576 1 1080 4000 t
10 B f
(NOTE)720 4360 w
10 R f
( used by Plan 9 was the `non\255normative' Annex F of ISO)11 2349(This paper was written when the encoding)6 1721 2 970 4516 t
( different, `file)2 592( of the difficulties in using that encoding, X\255Open has decided to propose a)13 3066(10646. Because)1 662 3 720 4636 t
( and uses no ASCII characters)5 1215( is a synchronizable encoding)4 1185( It)1 112(system safe' encoding, one that we designed.)6 1808 4 720 4756 t
( switched to that encoding \(see)5 1269( 9 has)2 249( Plan)1 236(in multi\255byte sequences.)2 990 4 720 4876 t
10 I f
(utf)3496 4876 w
10 R f
(\(6\)\) but this paper has not yet been)7 1438 1 3602 4876 t
( some of the specific problems with the)7 1594( include this draft in the distribution because, although)8 2195(updated. We)1 531 3 720 4996 t
( the encoding is)3 639( Also,)1 267( to the issue at large.)5 836(encoding are no longer relevant to Plan 9, they are still relevant)11 2578 4 720 5116 t
( revised paper will appear in the January 1993 Usenix proceedings.)10 2680( The)1 205(only part of the story.)4 863 3 720 5236 t
10 B f
(Introduction)720 5476 w
10 R f
( The)1 207( on English and ASCII or worse.)6 1319(The world is multilingual but most computer systems are based)9 2544 3 970 5632 t
( new distributed operating system from Bell Laboratories, seemed a)9 2788(pending release of Plan 9 [Pike90], a)6 1532 2 720 5752 t
( is easier to make such deep changes when building new sys\255)11 2514( It)1 117(good occasion to correct this chauvinism.)5 1689 3 720 5872 t
(tems than by retrofitting old ones.)5 1355 1 720 5992 t
(The ANSI C standard [ANSIC] contains some guidance on the matter of `wide' and `multi\255byte')14 4070 1 970 6148 t
( literature on how)3 707( could find no)3 561( We)1 189(characters but falls far short of solving the myriad associated problems.)10 2863 4 720 6268 t
(to convert a)2 477 1 720 6388 t
10 I f
(system)1225 6388 w
10 R f
(to larger character sets, although some individual)6 1990 1 1519 6388 t
10 I f
(programs)3538 6388 w
10 R f
( This)1 232(have been converted.)2 852 2 3956 6388 t
( problem of representing multilingual text at all levels)8 2178(paper reports what we discovered as we explored the)8 2142 2 720 6508 t
( the file system and kernel through the applications and up to the window sys\255)14 3161(of an operating system, from)4 1159 2 720 6628 t
(tem and display.)2 658 1 720 6748 t
( its manuals are in English, its error messages are in English,)11 2483(Plan 9 has not been `internationalized':)5 1587 2 970 6904 t
( we can address these other problems, we)7 1651( before)1 280( But)1 196(and it can display text that goes from left to right only.)11 2193 4 720 7024 t
( uniformly and comfortably, the textual representation of all the major written languages.)12 3693(need to handle,)2 627 2 720 7144 t
(That subproblem is richer than we had anticipated.)7 2024 1 720 7264 t
cleartomark
showpage
saveobj restore
%%EndPage: 1 1
%%Page: 2 2
/saveobj save def
mark
2 pagesetup
10 R f
(\255 2 \255)2 166 1 2797 480 t
10 B f
(Standards)720 840 w
10 R f
( there were only two viable)5 1184( the time \(January 1992\),)4 1073( At)1 168(Our first step was to select a standard.)7 1645 4 970 996 t
( documents describing both proposals were)5 1773( The)1 215(options: ISO 10646 [ISO10646] and Unicode [Unicode].)6 2332 3 720 1116 t
(still in the draft stage.)4 869 1 720 1236 t
( 10646 was succeeding because)4 1347( Politically,)1 508( 32\255bit characters.)2 759(ISO 10646 defines a sparse set of)6 1456 4 970 1392 t
( partition as they)3 693(national interests were mollified by allocating 16\255bit subcodes to national committees to)11 3627 2 720 1512 t
( sparse 32\255bit code space would be hard to imple\255)9 2018( A)1 126( proposal was hard to justify.)5 1180( the)1 150( Technically,)1 549(saw fit.)1 297 6 720 1632 t
( suggested mode of use was to ``flip'' between)8 1916( The)1 211( would be punitive.)3 790(ment and the storage requirements)4 1403 4 720 1752 t
( did not strike us as a sound basis)8 1365( This)1 232( standards to implement the international standard.)6 2047(separate national)1 676 4 720 1872 t
(for a character set.)3 735 1 720 1992 t
( companies that joined to protest)5 1307(Unicode is a proposal by a consortium of mostly American computer)10 2763 2 970 2148 t
( a uniform 16\255bit code based on the principle of unifi\255)10 2172( defines)1 316( Unicode)1 391(the technical failings of ISO 10646.)5 1441 4 720 2268 t
( they look the same even though they are from different languages.)11 2782(cation: two characters are the same if)6 1538 2 720 2388 t
(This principle allowed the large Japanese, Chinese, and Korean character sets to be packed comfortably into)15 4320 1 720 2508 t
(a 16\255bit representation.)2 923 1 720 2628 t
( Unicode for its technical merits and because it had a more concrete assignment of the code)16 3679(We chose)1 391 2 970 2784 t
( 10646 is now in its)5 797( ISO)1 213( Unicode was derailing the ISO 10646 standard.)7 1933( the existence of)3 660(space. Moreover,)1 717 5 720 2904 t
( expects the)2 473( Everyone)1 433(second draft and has only one 16\255bit group defined, which is almost exactly Unicode.)13 3414 3 720 3024 t
(two code sets to converge and that ISO 10646 will ultimately be almost identical to Unicode.)15 3719 1 720 3144 t
( Unicode standard)2 732( The)1 208(Unicode defines an adequate character set but an unreasonable representation.)9 3130 3 970 3300 t
( also reserves a)3 609( It)1 112( are 16 bits wide and are communicated and stored in 16 bit units.)13 2643(states that all characters)3 956 4 720 3420 t
( adopt Uni\255)2 461( To)1 164( transmitted text.)2 681(pair of characters \(hexadecimal FFFE and FEFF\) to detect byte ordering in)11 3014 4 720 3540 t
( of Plan 9 between ASCII and Unicode,)7 1670(code, we would have had to convert all text going into and out)12 2650 2 720 3660 t
( command of all its input and output, it is possible to)11 2206( a single program, in)4 856( Within)1 336(which cannot be done.)3 922 4 720 3780 t
( applications)1 512(define characters as 16\255bit quantities; in the context of an networked system with hundreds of)14 3808 2 720 3900 t
(on diverse machines by different manufacturers, it is impossible.)8 2585 1 720 4020 t
( by the)2 282(We needed a way to adapt Unicode to the tools\255and\255pipes model of text processing embodied)14 3788 2 970 4176 t
( of Unicode for transmis\255)4 1029( do that, we needed an ASCII\255compatible textual representation)8 2590( To)1 167(Unix system.)1 534 4 720 4296 t
( informative \(non\255required\) Annex called UTF that pro\255)7 2301( the ISO standard there is an)6 1185( In)1 142(sion and storage.)2 692 4 720 4416 t
( in the Plan 9 Programmer's)5 1134( definition as recorded)3 904( Its)1 153(vides a byte stream encoding of the 32\255bit ISO code.)9 2129 4 720 4536 t
(manual is attached as an appendix to this paper.)8 1905 1 720 4656 t
( ASCII)1 288( far the most important is that a byte in the)10 1709( By)1 168(The UTF encoding has several good properties.)6 1905 4 970 4812 t
( UTF is backward compatible with ASCII.)6 1701( Thus)1 250(range 0\255127 represents itself in UTF.)5 1475 3 720 4932 t
( con\255)1 203( ASCII)1 312( byte\255order independent.)2 980( is a byte encoding and is therefore)7 1394( It)1 111(UTF has other advantages.)3 1070 6 970 5088 t
( element of a sequence encoding)5 1339(trol characters appear in the byte stream only as themselves, never as an)12 2981 2 720 5208 t
( ANSI C's)2 466( Finally,)1 381( bytes separate lines of UTF text.)6 1455(another character, so newline)3 1231 4 720 5328 t
10 CW f
(strcmp)4300 5328 w
10 R f
(function)4707 5328 w
(applied to UTF strings preserves the ordering of Unicode characters.)9 2738 1 720 5448 t
( is in general impossi\255)4 899( It)1 114(One major disadvantage is that the UTF encoding is not self\255synchronizing.)10 3057 3 970 5604 t
( character boundaries in a UTF string without reading from the beginning of the string,)14 3708(ble to find the)3 612 2 720 5724 t
(although in practice control characters such as newlines, tabs, and blanks provide synchronization points.)13 4204 1 720 5844 t
( set encoded)2 501(The model for text in Plan 9 is chosen from these two standards*: the Unicode character)15 3569 2 970 6000 t
( this may seem like a precarious position for)8 1770( Although)1 428( by UTF, from Annex F of ISO 10646.)8 1549(as byte stream)2 573 4 720 6120 t
( 0 of 10646, then)4 716( as expected, ISO adopts Unicode as Group)7 1791( If,)1 149(us to adopt, it is not as bad as it sounds.)10 1664 4 720 6240 t
(Plan 9 will be ISO/UTF compatible as long as ISO only uses 16 bits of the 32\255bit set.)17 3405 1 720 6360 t
( the issue of right\255to\255left text such)6 1360( is)1 92( One)1 216(There are a couple of aspects of Unicode we have not faced.)11 2402 4 970 6516 t
( not representation, we believe we can defer that)8 2018( that is an issue of display,)6 1130( Since)1 284(as Hebrew or Arabic.)3 888 4 720 6636 t
( is diacriticals, which)3 870( issue)1 231( Another)1 383(problem for the moment without affecting our ability to solve it later.)11 2836 4 720 6756 t
( these are display issues and, since the Unicode)8 1944( Again,)1 326( Unicode characters.)2 830(cause overstriking of multiple)3 1220 4 720 6876 t
(committee is still deciding their finer points, we felt comfortable deferring.)10 2996 1 720 6996 t
8 S1 f
(__________________)720 7096 w
8 R f
(* ``That's the nice thing about standards)6 1285 1 720 7196 t
8 S1 f
(\320)2005 7196 w
8 R f
(there's so many to choose from.'' \255 Andy Tannenbaum \(no, the other one\))12 2359 1 2085 7196 t
cleartomark
showpage
saveobj restore
%%EndPage: 2 2
%%Page: 3 3
/saveobj save def
mark
3 pagesetup
10 R f
(\255 3 \255)2 166 1 2797 480 t
( this paper, except when stated otherwise, the term `UTF' refers to the UTF encoding of)15 3557(In the rest of)3 513 2 970 840 t
(Unicode characters as adopted by Plan 9.)6 1643 1 720 960 t
10 B f
(C Compiler)1 502 1 720 1200 t
10 R f
( are two levels of con\255)5 904( There)1 285( the C Compiler.)3 676(The first program that had to be converted to UTF was)10 2205 4 970 1356 t
( language)1 398( the syntactic level, input to the C compiler is UTF; on the semantic level, the C)16 3417(version. On)1 505 3 720 1476 t
(needs to define how compiled programs manipulate the UTF set.)9 2591 1 720 1596 t
( defines the source character set to be)7 1562( ANSI C language standard)4 1134( The)1 214(The syntactic part is simple.)4 1160 4 970 1752 t
( The)1 211( compatible with ASCII, the compiler needs little change.)8 2351( UTF is backward)3 739( Since)1 279(essentially ASCII.)1 740 5 720 1872 t
( C)1 93( The)1 206( set is allowed are in character constants, strings, and comments.)10 2586(only places where a larger character)5 1435 4 720 1992 t
( these places to guarantee that the source remains syn\255)9 2254(compiler need only interpret the UTF encoding in)7 2066 2 720 2112 t
( example, in UTF)3 705( For)1 189(chronized with respect to characters.)4 1459 3 720 2232 t
9 CW f
(/*)1008 2402 w
 save 1170 2411 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<01c38001c38001c3800000000000000fffe003006003002003001003008003018003ff800301800300800300000300000300080300080300100300300ffff0000000000000000000>}
 imagemask restore
(/)1261 2402 w
10 R f
(comprises the byte sequence)3 1139 1 720 2582 t
9 CW f
(/ * 0xA5 * /)4 648 1 1008 2752 t
10 R f
(which can easily be misinterpreted to contain a closing comment.)9 2613 1 720 2932 t
( notion of a)3 494(On the semantic level, ANSI C allows, but does not tie down, the)12 2744 2 970 3088 t
10 I f
(wide character)1 614 1 4245 3088 t
10 R f
(and)4896 3088 w
( chose the wide character type to be)7 1524( We)1 202( character constants of this type.)5 1356(admits string and)2 719 4 720 3208 t
10 CW f
(unsigned)4560 3208 w
(short)720 3328 w
10 R f
( the libraries, the word)4 909(. In)1 160 2 1020 3328 t
10 CW f
(Rune)2116 3328 w
10 R f
(is defined by a)3 594 1 2384 3328 t
10 CW f
(typedef)3006 3328 w
10 R f
(to be equivalent to)3 750 1 3454 3328 t
10 CW f
(unsigned short)1 808 1 4232 3328 t
10 R f
(and is used to signify a Unicode character.)7 1696 1 720 3448 t
(There are surprises; for example:)4 1318 1 970 3604 t
9 CW f
(L'x')1008 3774 w
9 R f
(is 120)1 218 1 1440 3774 t
9 CW f
('x')1008 3884 w
9 R f
(is 120)1 218 1 1440 3884 t
9 CW f
(L'\377')1008 3994 w
9 R f
(is 255)1 218 1 1440 3994 t
9 CW f
('\377')1008 4104 w
9 R f
(is)1440 4104 w
9 S1 f
(\261)1523 4104 w
9 R f
(1, stdio)1 266 1 1582 4104 t
9 CW f
(EOF)1871 4104 w
9 R f
(\(if)2056 4104 w
9 CW f
(char)2164 4104 w
9 R f
(is signed\))1 348 1 2403 4104 t
9 CW f
(L')1008 4214 w
 save 1116 4223 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<01c38001c38001c3800000000000000fffe003006003002003001003008003018003ff800301800300800300000300000300080300080300100300300ffff0000000000000000000>}
 imagemask restore
(')1207 4214 w
9 R f
(is 1025)1 263 1 1440 4214 t
9 CW f
(')1008 4324 w
 save 1062 4333 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<01c38001c38001c3800000000000000fffe003006003002003001003008003018003ff800301800300800300000300000300080300080300100300300ffff0000000000000000000>}
 imagemask restore
(')1153 4324 w
9 R f
(is illegal)1 308 1 1440 4324 t
10 R f
(In the string constants,)3 905 1 720 4504 t
9 CW f
(")1008 4674 w
 save /Kana findfont 90 scalefont setfont
 1062 4674 m (\063) show restore
 save /Kana findfont 90 scalefont setfont
 1153 4674 m (\163) show restore
 save /Kana findfont 90 scalefont setfont
 1244 4674 m (\113) show restore
 save /Kana findfont 90 scalefont setfont
 1335 4674 m (\101) show restore
 save /Kana findfont 90 scalefont setfont
 1426 4674 m (\117) show restore
 save 1571 4674 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<071c70061860061860061860061860061860061860061866ffffff061860061860061860061860061860061860061fe006186006186006000006000006000006000c07fffe060000>}
 imagemask restore
 save 1662 4674 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<0800300ffff80c18300c18300c18300ffff00c18300c18300c18300ffff00c743000e20001c1800300e00ee1ff38c19ec0c18600c18000c18000c1800181800181800301800c0180>}
 imagemask restore
(")1753 4674 w
(L")1008 4784 w
 save /Kana findfont 90 scalefont setfont
 1116 4784 m (\063) show restore
 save /Kana findfont 90 scalefont setfont
 1207 4784 m (\163) show restore
 save /Kana findfont 90 scalefont setfont
 1298 4784 m (\113) show restore
 save /Kana findfont 90 scalefont setfont
 1389 4784 m (\101) show restore
 save /Kana findfont 90 scalefont setfont
 1480 4784 m (\117) show restore
 save 1625 4784 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<071c70061860061860061860061860061860061860061866ffffff061860061860061860061860061860061860061fe006186006186006000006000006000006000c07fffe060000>}
 imagemask restore
 save 1716 4784 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<0800300ffff80c18300c18300c18300ffff00c18300c18300c18300ffff00c743000e20001c1800300e00ee1ff38c19ec0c18600c18000c18000c1800181800181800301800c0180>}
 imagemask restore
(",)1807 4784 w
10 R f
(the former is an array of)5 966 1 720 4964 t
10 CW f
(chars)1711 4964 w
10 R f
( array of)2 339(with 16 elements and a null byte, while the latter is an)11 2159 2 2036 4964 t
10 CW f
(unsigned)4560 4964 w
(shorts)720 5084 w
10 R f
(\()1105 5084 w
10 CW f
(Runes)1138 5084 w
10 R f
(\) with 8 elements and a null)6 1110 1 1438 5084 t
10 CW f
(Rune)2573 5084 w
10 R f
(.)2813 5084 w
(The Plan 9 library provides an output conversion function,)8 2347 1 970 5240 t
10 CW f
(print)3344 5240 w
10 R f
(\(analogous to)1 543 1 3671 5240 t
10 CW f
(printf)4241 5240 w
10 R f
(\), with for\255)2 439 1 4601 5240 t
(mats)720 5360 w
10 CW f
(%c)935 5360 w
10 R f
(,)1055 5360 w
10 CW f
(%C)1106 5360 w
10 R f
(,)1226 5360 w
10 CW f
(%s)1277 5360 w
10 R f
(, and)1 195 1 1397 5360 t
10 CW f
(%S)1618 5360 w
10 R f
(. Since)1 298 1 1738 5360 t
10 CW f
(print)2062 5360 w
10 R f
( character conversion)2 852( The)1 205( its output is always UTF.)5 1034(produces text,)1 561 4 2388 5360 t
10 CW f
(%c)720 5480 w
10 R f
( Thus)1 251(\(lower case\) masks its argument to 8 bits before converting to UTF.)11 2718 2 866 5480 t
10 CW f
(L'\377')3861 5480 w
10 R f
(and)4127 5480 w
10 CW f
('\377')4297 5480 w
10 R f
(printed under)1 537 1 4503 5480 t
10 CW f
(%c)720 5600 w
10 R f
(will be identical, but)3 858 1 877 5600 t
10 CW f
(L')1772 5600 w
 save 1892 5610 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<01c38001c38001c3800000000000000fffe003006003002003001003008003018003ff800301800300800300000300000300080300080300100300300ffff0000000000000000000>}
 imagemask restore
(')1992 5600 w
10 R f
( as an ASCII)3 546(will print)1 382 2 2089 5600 t
10 CW f
(SOH)3053 5600 w
10 R f
( character conversion)2 874(. The)1 241 2 3233 5600 t
10 CW f
(%C)4384 5600 w
10 R f
(\(upper case\))1 500 1 4540 5600 t
( Thus)1 254( converting to UTF.)3 806(masks its argument to 16 bits before)6 1467 3 720 5720 t
10 CW f
(L'\377')3276 5720 w
10 R f
(and)3545 5720 w
10 CW f
(L')3718 5720 w
 save 3838 5730 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<01c38001c38001c3800000000000000fffe003006003002003001003008003018003ff800301800300800300000300000300080300080300100300300ffff0000000000000000000>}
 imagemask restore
(')3938 5720 w
10 R f
(will print correctly under)3 1013 1 4027 5720 t
10 CW f
(%C)720 5840 w
10 R f
(, but)1 202 1 840 5840 t
10 CW f
('\377')1091 5840 w
10 R f
( conversion)1 487( The)1 229(will not.)1 358 3 1320 5840 t
10 CW f
(%s)2443 5840 w
10 R f
(\(lower case\) expects a pointer to)5 1408 1 2612 5840 t
10 CW f
(char)4068 5840 w
10 R f
(and copies UTF)2 684 1 4356 5840 t
( conversion)1 479( The)1 220(sequences up to a null byte.)5 1179 3 720 5960 t
10 CW f
(%S)2639 5960 w
10 R f
(\(upper case\) expects a pointer to)5 1373 1 2800 5960 t
10 CW f
(Rune)4214 5960 w
10 R f
(and performs)1 545 1 4495 5960 t
(sequential)720 6080 w
10 CW f
(%C)1150 6080 w
10 R f
(conversions until a null)3 936 1 1295 6080 t
10 CW f
(Rune)2256 6080 w
10 R f
(is encountered.)1 604 1 2521 6080 t
(Here is a complete example:)4 1136 1 970 6236 t
cleartomark
showpage
saveobj restore
%%EndPage: 3 3
%%Page: 4 4
/saveobj save def
mark
4 pagesetup
10 R f
(\255 4 \255)2 166 1 2797 480 t
9 CW f
(#include <u.h>)1 756 1 1008 830 t
(char c[] = ")3 648 1 1008 1050 t
 save /Kana findfont 90 scalefont setfont
 1656 1050 m (\063) show restore
 save /Kana findfont 90 scalefont setfont
 1747 1050 m (\163) show restore
 save /Kana findfont 90 scalefont setfont
 1838 1050 m (\113) show restore
 save /Kana findfont 90 scalefont setfont
 1929 1050 m (\101) show restore
 save /Kana findfont 90 scalefont setfont
 2020 1050 m (\117) show restore
 save 2165 1050 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<071c70061860061860061860061860061860061860061866ffffff061860061860061860061860061860061860061fe006186006186006000006000006000006000c07fffe060000>}
 imagemask restore
 save 2256 1050 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<0800300ffff80c18300c18300c18300ffff00c18300c18300c18300ffff00c743000e20001c1800300e00ee1ff38c19ec0c18600c18000c18000c1800181800181800301800c0180>}
 imagemask restore
(";)2347 1050 w
(Rune s[] = L")3 702 1 1008 1160 t
 save /Kana findfont 90 scalefont setfont
 1710 1160 m (\063) show restore
 save /Kana findfont 90 scalefont setfont
 1801 1160 m (\163) show restore
 save /Kana findfont 90 scalefont setfont
 1892 1160 m (\113) show restore
 save /Kana findfont 90 scalefont setfont
 1983 1160 m (\101) show restore
 save /Kana findfont 90 scalefont setfont
 2074 1160 m (\117) show restore
 save 2219 1160 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<071c70061860061860061860061860061860061860061866ffffff061860061860061860061860061860061860061fe006186006186006000006000006000006000c07fffe060000>}
 imagemask restore
 save 2310 1160 m
 currentpoint translate 90 90 scale
 24 24 true [24 0 0 -24 0 24]
 {<0800300ffff80c18300c18300c18300ffff00c18300c18300c18300ffff00c743000e20001c1800300e00ee1ff38c19ec0c18600c18000c18000c1800181800181800301800c0180>}
 imagemask restore
(";)2401 1160 w
(main\(void\))1008 1380 w
({)1008 1490 w
(print\("%d, %d\\n", sizeof\(c\), sizeof\(s\)\);)3 2160 1 1440 1600 t
(print\("%s\\n", c\);)1 918 1 1440 1710 t
(print\("%S\\n", s\);)1 918 1 1440 1820 t
(})1008 1930 w
10 R f
(This program prints)2 802 1 970 2146 t
10 CW f
(17, 18)1 330 1 1802 2146 t
10 R f
( practice,)1 370( In)1 138(and then two identical lines of UTF text.)7 1656 3 2162 2146 t
10 CW f
(%S)4356 2146 w
10 R f
(and)4506 2146 w
10 CW f
(L"...")4680 2146 w
10 R f
(are rare in programs; one reason is that most formatted I/O is done in unconverted UTF.)15 3516 1 720 2266 t
10 B f
(Ramifications)720 2506 w
10 R f
( change breaks two deep\255)4 1045( This)1 236( now read and write text as UTF, not ASCII.)9 1850(All programs in Plan 9)4 939 4 970 2662 t
(rooted symmetries implicit in most C programs:)6 1923 1 720 2782 t
( character is no longer a)5 955(1. A)1 322 2 720 2938 t
10 CW f
(char)2022 2938 w
10 R f
(.)2262 2938 w
( its external representation)3 1119( internal representation \(Unicode\) of a character now differs from)9 2796(2. The)1 405 3 720 3094 t
(\(UTF\).)970 3214 w
( system software)2 695(In the sections that follow, we show how these issues were faced in the layers of)15 3375 2 970 3370 t
( effects are wide\255reaching and often surprising.)6 1880( The)1 205(from the operating system up to the applications.)7 1954 3 720 3490 t
10 B f
(Operating system)1 752 1 720 3730 t
10 R f
( 9, the interface to the operating system had to be con\255)11 2234(Since UTF is the only format for text in Plan)9 1836 2 970 3886 t
( several places: command arguments, file names, user)7 2239( strings cross the interface in)5 1215( Text)1 247(verted to UTF.)2 619 4 720 4006 t
( in using their native name\), error messages, and miscellaneous minor places such as)13 3419(names \(people can log)3 901 2 720 4126 t
( required: null\255terminated UTF strings are equivalent to)7 2306( change was)2 513( Little)1 280(commands to the I/O system.)4 1221 4 720 4246 t
( the operating system)3 906( fact)1 191( In)1 150(null\255terminated ASCII strings for most purposes of the operating system.)9 3073 4 720 4366 t
( effect was in the parsing of)6 1138(stores no runes; the only place the change from ASCII to UTF had significant)13 3182 2 720 4486 t
( library routines described in the next section made that)9 2306( The)1 215( slash\255separated components.)2 1187(file names into)2 612 4 720 4606 t
(change straightforward.)1 947 1 720 4726 t
(The window system, once called)4 1306 1 970 4882 t
10 CW f
(8.5)2301 4882 w
10 R f
(, is now rightfully called)4 980 1 2481 4882 t
10 CW f
(8\275)3486 4882 w
10 R f
(.)3606 4882 w
10 B f
(Libraries)720 5122 w
10 R f
( the)1 149(A header file included by all programs \(see [Pike92]\) declares)9 2488 2 970 5278 t
10 CW f
(Rune)3634 5278 w
10 R f
(type to hold 16\255bit character)4 1139 1 3901 5278 t
(values:)720 5398 w
9 CW f
(typedef unsigned short Rune.)3 1512 1 1008 5568 t
10 R f
(Also defined are several constants relevant to UTF:)7 2054 1 720 5748 t
9 CW f
(enum)1008 5918 w
({)1008 6028 w
( maximum bytes per rune */)5 1404( /*)1 324( 3,)1 162(UTFmax =)1 594 4 1224 6138 t
( 0x21, /* cannot represent part of a UTF sequence \(<\) */)11 3024(Runesync =)1 594 2 1224 6248 t
( 0xA0, /* rune and UTF sequences are the same \(<\) */)11 2808(Runeself =)1 594 2 1224 6358 t
(Runeerror = 0x80, /* decoding error in UTF */)8 2430 1 1224 6468 t
(}.)1008 6578 w
10 R f
( of value less)3 560( Characters)1 488(Three bytes are sufficient to hold the UTF encoding of any Unicode character.)12 3272 3 720 6758 t
( of a sequence encoding)4 1018(than hexadecimal 21 only appear in a UTF string as themselves, never as part)13 3302 2 720 6878 t
( Finally,)1 370( of the same value.)4 795( of value less than A0 encode into single bytes)9 1946( Characters)1 486(another character.)1 723 5 720 6998 t
(when the library detects errors in UTF input)7 1838 1 720 7118 t
10 S1 f
(\320)2558 7118 w
10 R f
( that are not valid UTF sequences)6 1402(byte sequences)1 612 2 2658 7118 t
10 S1 f
(\320)4672 7118 w
10 R f
(it con\255)1 268 1 4772 7118 t
( program can do)3 666( is little a rune\255oriented)4 948( There)1 286(verts the first byte of the error sequence to the character 80.)11 2420 4 720 7238 t
cleartomark
showpage
saveobj restore
%%EndPage: 4 4
%%Page: 5 5
/saveobj save def
mark
5 pagesetup
10 R f
(\255 5 \255)2 166 1 2797 480 t
( the conversion routines,)3 1009( Originally)1 470( on.)1 159(when given bad data except exit, which is unreasonable, or carry)10 2682 4 720 840 t
( given invalid UTF, but we found ourselves repeatedly checking for)10 2769(described below, returned errors when)4 1551 2 720 960 t
( and continue pro\255)3 729( therefore decided to convert a bad sequence to a valid rune)11 2384( We)1 189(errors and ignoring them.)3 1018 4 720 1080 t
( ANSI C routines, on the other hand, return errors.\))9 2046(cessing. \(The)1 557 2 720 1200 t
( byte strings in and out)5 919(This technique does have the unfortunate property that converting invalid UTF)10 3151 2 970 1356 t
( only occurs when non\255textual input is given to a)9 1969(of runes does not preserve the input, but this circumstance)9 2351 2 720 1476 t
( to represent characters from other sets)6 1605( defines an error character, value FFFD,)6 1649( Unicode)1 397(textual program.)1 669 4 720 1596 t
( The)1 221(that are not represented in Unicode.)5 1504 2 720 1716 t
10 CW f
(Runeerror)2486 1716 w
10 R f
( different concept, related to UTF)5 1416(character is a)2 557 2 3067 1716 t
( by a single byte in)5 773( that 80 is represented)4 884( Note)1 246(rather than Unicode, so we chose a different character for it.)10 2417 4 720 1836 t
(UTF.)720 1956 w
( first set converts)3 721( The)1 217(The Plan 9 C library contains a number of routines for manipulating runes.)12 3132 3 970 2112 t
(between runes and UTF strings:)4 1276 1 720 2232 t
9 CW f
( Rune*\);)1 432( runetochar\(char*,)1 1188(extern int)1 594 3 1008 2402 t
( char*\);)1 432( chartorune\(Rune*,)1 1188(extern int)1 594 3 1008 2512 t
( runelen\(long\);)1 1026(extern int)1 594 2 1008 2622 t
( int\);)1 324( fullrune\(char*,)1 1080(extern int)1 594 3 1008 2732 t
10 CW f
(Runetochar)720 2912 w
10 R f
(translates a single)2 740 1 1360 2912 t
10 CW f
(Rune)2140 2912 w
10 R f
( returns the number of bytes produced.)6 1640(to a UTF sequence and)4 980 2 2420 2912 t
10 CW f
(Chartorune)720 3032 w
10 R f
( many bytes were consumed.)4 1160(goes the other way, reporting how)5 1374 2 1347 3032 t
10 CW f
(Runelen)3932 3032 w
10 R f
(returns the num\255)2 662 1 4378 3032 t
(ber of bytes in the UTF encoding of a rune.)9 1730 1 720 3152 t
10 CW f
(Fullrune)2500 3152 w
10 R f
( number of)2 440(examines a UTF string up to a specified)7 1595 2 3005 3152 t
( routines use the)3 697( these)1 246( All)1 194(bytes and reports whether the string begins with a complete UTF encoding.)11 3183 4 720 3272 t
10 CW f
(Runeerror)720 3392 w
10 R f
(character to work around encoding problems.)5 1812 1 1285 3392 t
( the)1 153(There is also a set of routines for examining null\255terminated UTF strings, based on the model of)16 3917 2 970 3548 t
(ANSI standard)1 596 1 720 3668 t
10 CW f
(str)1341 3668 w
10 R f
(routines, but with)2 703 1 1546 3668 t
10 CW f
(utf)2274 3668 w
10 R f
(substituted for)1 575 1 2479 3668 t
10 CW f
(str)3079 3668 w
10 R f
(and)3284 3668 w
10 CW f
(rune)3453 3668 w
10 R f
(for)3718 3668 w
10 CW f
(chr)3859 3668 w
10 R f
(:)4039 3668 w
9 CW f
( utflen\(char*\);)1 1026(extern int)1 594 2 1008 3838 t
( long\);)1 378( utfrune\(char*,)1 918(extern char*)1 702 3 1008 3948 t
( long\);)1 378( utfrrune\(char*,)1 972(extern char*)1 702 3 1008 4058 t
( char*\);)1 432( utfutf\(char*,)1 864(extern char*)1 702 3 1008 4168 t
10 CW f
(Utflen)720 4348 w
10 R f
(returns the number of runes in a UTF string;)8 1786 1 1107 4348 t
10 CW f
(utfrune)2920 4348 w
10 R f
(returns a pointer to the first occurrence of)7 1673 1 3367 4348 t
(a rune in a UTF string; and)6 1094 1 720 4468 t
10 CW f
(utfrrune)1841 4468 w
10 R f
(a pointer to the last.)4 799 1 2348 4468 t
10 CW f
(Utfutf)3199 4468 w
10 R f
(searches for the first occurrence of a)6 1455 1 3585 4468 t
(UTF string in another UTF string.)5 1361 1 720 4588 t
( mistake to use)3 606(It is a)2 226 2 970 4744 t
10 CW f
(strchr)1830 4744 w
10 R f
(or)2218 4744 w
10 CW f
(strrchr)2329 4744 w
10 R f
(unless searching for a blank or control character, that is,)9 2263 1 2777 4744 t
(a character less than)3 805 1 720 4864 t
10 CW f
(Runeself)1550 4864 w
10 R f
( looking for the final slash in a file name:)9 1651(. Consider)1 436 2 2030 4864 t
9 CW f
(strrchr\(name, '/'\))1 972 1 1008 5034 t
10 R f
( Instead,)1 369( the hidden slash in the UTF encoding of a character.)10 2175(may mistakenly find)2 832 3 720 5214 t
10 CW f
(utfrrune)4127 5214 w
10 R f
(parses the)1 402 1 4638 5214 t
(string to be sure to find slash)6 1227 1 720 5334 t
10 I f
(characters,)1984 5334 w
10 R f
(not slash)1 365 1 2473 5334 t
10 I f
(bytes.)2875 5334 w
10 R f
( same reason,)2 562(For the)1 298 2 3167 5334 t
10 CW f
(utfutf)4063 5334 w
10 R f
(is preferred to)2 581 1 4459 5334 t
10 CW f
(strstr)720 5454 w
10 R f
(.)1080 5454 w
(We have no routines for manipulating null\255terminated arrays of)8 2550 1 970 5610 t
10 CW f
(Runes)3547 5610 w
10 R f
( should prob\255)2 539( they)1 199(. Although)1 455 3 3847 5610 t
( we have found no need for them, for the same reason that)12 2343(ably exist for completeness,)3 1124 2 720 5730 t
10 CW f
(%S)4214 5730 w
10 R f
(and)4361 5730 w
10 CW f
(L"...")4532 5730 w
10 R f
(are)4919 5730 w
(rarely used.)1 465 1 720 5850 t
( contains)1 365( BIO)1 229(Most Plan 9 programs use a new buffered I/O library, BIO, in place of Standard I/O.)15 3476 3 970 6006 t
(routines to read and write UTF streams, converting to and from runes.)11 2952 1 720 6126 t
10 CW f
(Bgetrune)3736 6126 w
10 R f
(returns, as a)2 507 1 4255 6126 t
10 CW f
(Rune)4800 6126 w
10 R f
(within a)1 335 1 720 6246 t
10 CW f
(long)1090 6246 w
10 R f
(, the next character in the UTF input stream;)8 1852 1 1330 6246 t
10 CW f
(Bputrune)3217 6246 w
10 R f
(takes a rune and writes its UTF)6 1308 1 3732 6246 t
(representation.)720 6366 w
10 CW f
(Bungetrune)1360 6366 w
10 R f
(puts a rune back into the input stream for rereading.)9 2068 1 1985 6366 t
( these)1 239( Converting)1 509(Plan 9 programs use a simple set of macros to process command line arguments.)13 3322 3 970 6522 t
(macros to UTF automatically updated the argument processing of most programs.)10 3271 1 720 6642 t
( do not feel qualified to)5 1005(We have done nothing analogous to ANSI C's locales, partly because we)11 3065 2 970 6798 t
( That)1 233( and partly because we remain unconvinced of that model for dealing with the problems.)14 3535(define locales)1 552 3 720 6918 t
( conversion to a larger character set; on the other hand,)10 2271(is really more an issue of internationalization than)7 2049 2 720 7038 t
( have a utility,)3 608( \(We)1 233( for locales is eliminated.)4 1055(because we have chosen a character set, some of the need)10 2424 4 720 7158 t
10 CW f
(tcs)720 7278 w
10 R f
(, that translates between UTF and other character sets.\))8 2194 1 900 7278 t
cleartomark
showpage
saveobj restore
%%EndPage: 5 5
%%Page: 6 6
/saveobj save def
mark
6 pagesetup
10 R f
(\255 6 \255)2 166 1 2797 480 t
( does not follow the ANSI design for wide and multi\255byte)10 2379(There are several reasons why our library)6 1691 2 970 840 t
( ANSI model was designed by a committee, untried, almost as an afterthought, whereas we)14 3683(characters. The)1 637 2 720 960 t
( interface as we became familiar with)6 1513( made several major changes to the)6 1414( \(We)1 223(wanted to design as we built.)5 1170 4 720 1080 t
( the)1 154( Also,)1 271( handling of invalid multi\255byte sequences.)5 1717( disagree with ANSI C's)4 1014( We)1 196(the problems involved.\))2 968 6 720 1200 t
( multi\255byte)1 448(ANSI C library is incomplete: although it contains some crucial routines for handling wide and)14 3872 2 720 1320 t
( our software exploits the fact that UTF pre\255)8 1859( example,)1 401( For)1 202(characters, there are some serious omissions.)5 1858 4 720 1440 t
( remove that assumption by replacing all calls to)8 2041( could)1 259( We)1 200(serves control characters in the byte stream.)6 1820 4 720 1560 t
10 CW f
(strchr)720 1680 w
10 R f
(with)1107 1680 w
10 CW f
(utfrune)1312 1680 w
10 R f
( the standard says nothing about the representation, so)8 2169( C cannot:)2 415( ANSI)1 285(and so on.)2 412 4 1759 1680 t
(portable code should)2 840 1 720 1800 t
10 I f
(never)1589 1800 w
10 R f
(call)1839 1800 w
10 CW f
(strchr)2012 1800 w
10 R f
(, yet there is no ANSI equivalent to)7 1450 1 2372 1800 t
10 CW f
(utfrune)3852 1800 w
10 R f
( C simulta\255)2 455(. ANSI)1 313 2 4272 1800 t
(neously invalidates)1 769 1 720 1920 t
10 CW f
(strchr)1514 1920 w
10 R f
(and offers no replacement.)3 1063 1 1899 1920 t
( characters into the I/O system: it gives no method for)10 2263(Finally, ANSI did nothing to integrate wide)6 1807 2 970 2076 t
( In)1 138( therefore needed to invent some things and decided to invent everything.)11 2989( We)1 193( characters.)1 458(printing wide)1 542 5 720 2196 t
( ANSI routines)2 609(the end, some of our entry points do correspond closely to)10 2332 2 720 2316 t
10 S1 f
(\320)3661 2316 w
10 R f
(for example)1 481 1 3761 2316 t
10 CW f
(chartorune)4269 2316 w
10 R f
(and)4896 2316 w
10 CW f
(runetochar)720 2436 w
10 R f
(are similar to the unpronounceable)4 1450 1 1361 2436 t
10 CW f
(wctomb)2852 2436 w
10 R f
(and)3253 2436 w
10 CW f
(mbtowc)3438 2436 w
10 S1 f
(\320)3798 2436 w
10 R f
(but Plan 9's library defines)4 1142 1 3898 2436 t
(more functionality, enough to write real applications.)6 2125 1 720 2556 t
10 B f
(Converting the tools)2 866 1 720 2796 t
10 R f
( already been converted to work with Latin\2551, so it was)10 2244(The source for our tools and applications had)7 1826 2 970 2952 t
( programs needed no change at)5 1238( Some)1 278( Unicode and UTF is more involved.)6 1468(`8\255bit safe', but the conversion to)5 1336 4 720 3072 t
(all:)720 3192 w
10 CW f
(cat)875 3192 w
10 R f
( UTF, as file names that it passes uninter\255)8 1686(, for instance, interprets its argument strings, delivered in)8 2299 2 1055 3192 t
(preted to the)2 507 1 720 3312 t
10 CW f
(open)1256 3312 w
10 R f
( its output; it never makes deci\255)6 1278(system call, and then just copies bytes from its input to)10 2237 2 1525 3312 t
( 9)1 88( \(Plan)1 274( on the values of the bytes.)6 1146(sions based)1 470 4 720 3432 t
10 CW f
(cat)2736 3432 w
10 R f
(has no options such as)4 946 1 2954 3432 t
10 CW f
(\255v)3938 3432 w
10 R f
(to complicate matters.\))2 944 1 4096 3432 t
(Most programs, however, needed modest change.)5 1979 1 720 3552 t
( places that need attention, but)5 1230(It is difficult to find automatically the)6 1517 2 970 3708 t
10 CW f
(grep)3745 3708 w
10 R f
( that uses)2 378(helps. Software)1 649 2 4013 3708 t
( examine bytes as characters:)4 1191(the libraries conscientiously can be searched for calls to library routines that)11 3129 2 720 3828 t
10 CW f
(strchr)720 3948 w
10 R f
(,)1080 3948 w
10 CW f
(strrchr)1139 3948 w
10 R f
(,)1559 3948 w
10 CW f
(strstr)1618 3948 w
10 R f
( these by calls to)4 702( Replacing)1 464(, etc.)1 200 3 1978 3948 t
10 CW f
(utfrune)3379 3948 w
10 R f
(,)3799 3948 w
10 CW f
(utfrrune)3859 3948 w
10 R f
(, and)1 204 1 4339 3948 t
10 CW f
(utfutf)4578 3948 w
10 R f
(is)4973 3948 w
( internally; more typically they)4 1258( tools actually need to operate on runes)7 1603( Few)1 228(enough to fix many programs.)4 1231 4 720 4068 t
( the 170 C source programs)5 1126( Of)1 159(need only to look for the final slash in a file name and similar trivial tasks.)15 3035 3 720 4188 t
(in the top levels of)4 744 1 720 4308 t
10 CW f
(/sys/src/cmd)1489 4308 w
10 R f
(, only 23 now contain the word)6 1246 1 2209 4308 t
10 CW f
(Rune)3480 4308 w
10 R f
(.)3720 4308 w
(The programs that)2 732 1 970 4464 t
10 I f
(do)1727 4464 w
10 R f
(store runes internally are mostly those whose)6 1803 1 1852 4464 t
10 I f
(raison d'\352tre)1 519 1 3680 4464 t
10 R f
(is character manipu\255)2 816 1 4224 4464 t
(lation:)720 4584 w
10 CW f
(sam)1004 4584 w
10 R f
(\(the text editor\),)2 652 1 1212 4584 t
10 CW f
(sed)1892 4584 w
10 R f
(,)2072 4584 w
10 CW f
(sort)2125 4584 w
10 R f
(,)2365 4584 w
10 CW f
(tr)2418 4584 w
10 R f
(,)2538 4584 w
10 CW f
(troff)2590 4584 w
10 R f
(,)2890 4584 w
10 CW f
(8\275)2942 4584 w
10 R f
(\(the window system and terminal emulator\), and)6 1951 1 3089 4584 t
( the cost)2 343( decide whether to compute using runes or UTF\255encoded byte strings requires balancing)12 3569( To)1 165(so on.)1 243 4 720 4704 t
( For)1 196( relevant text on demand.)4 1040(of converting the data when read and written against the cost of converting)12 3084 3 720 4824 t
( a long time with a relatively constant dataset, runes are the better choice.)13 2982(programs such as editors that run)5 1338 2 720 4944 t
( they are more complicated: plain ASCII text grows when converted)10 2748(There are space considerations too, but)5 1572 2 720 5064 t
(to runes; UTF\255encoded Japanese shrinks.)4 1644 1 720 5184 t
(Again, it is hard to automate the conversion of a program from)11 2573 1 970 5340 t
10 CW f
(chars)3574 5340 w
10 R f
(to)3905 5340 w
10 CW f
(Runes)4014 5340 w
10 R f
( not enough)2 486( is)1 98(. It)1 142 3 4314 5340 t
( are equivalent can be insidi\255)5 1180(just to change the type of variables; the assumption that bytes and characters)12 3140 2 720 5460 t
( instance, to clear a character array by)7 1510(ous. For)1 353 2 720 5580 t
9 CW f
(memset\(buf, 0, BUFSIZE\))2 1242 1 1008 5750 t
10 R f
(becomes wrong if)2 745 1 720 5930 t
10 CW f
(buf)1505 5930 w
10 R f
( an array of)3 504(is changed from)2 673 2 1725 5930 t
10 CW f
(chars)2943 5930 w
10 R f
(to an array of)3 582 1 3284 5930 t
10 CW f
(Runes)3907 5930 w
10 R f
( program that)2 570(. Any)1 263 2 4207 5930 t
( Consider)1 424(indexes tables based on character values needs rethinking.)7 2413 2 720 6050 t
10 CW f
(tr)3595 6050 w
10 R f
( used multiple)2 591(, which originally)2 734 2 3715 6050 t
( Instead)1 348( na\357ve conversion would yield multiple 65536\255rune arrays.)7 2411( The)1 214(256\255byte arrays for the mapping.)4 1347 4 720 6170 t
(Plan 9)1 253 1 720 6290 t
10 CW f
(tr)998 6290 w
10 R f
(saves space by building in effect a run\255encoded version of the map.)11 2688 1 1143 6290 t
10 CW f
(Sort)970 6446 w
10 R f
( cooperation of UTF and)4 1027( The)1 215(has related problems.)2 871 3 1245 6446 t
10 CW f
(strcmp)3393 6446 w
10 R f
( simple sort)2 489(means that a)2 519 2 3788 6446 t
10 S1 f
(\320)4796 6446 w
10 R f
(one)4896 6446 w
(with no options)2 641 1 720 6566 t
10 S1 f
(\320)1361 6566 w
10 R f
(can be done on the original UTF strings using)8 1896 1 1461 6566 t
10 CW f
(strcmp)3390 6566 w
10 R f
( sorting options enabled,)3 1007(. With)1 283 2 3750 6566 t
(however,)720 6686 w
10 CW f
(sort)1126 6686 w
10 R f
( input to runes: for example, option)6 1497(may need to convert its)4 984 2 1404 6686 t
10 CW f
(\255t:)3924 6686 w
10 R f
(requires searching for)2 897 1 4143 6686 t
( of the other options are hopelessly provincial:)7 1891( Some)1 283( crack the input into fields.)5 1096(colons in the input text to)5 1050 4 720 6806 t
( unique dictionary)2 761(consider the case\255folding and dictionary order options \(Japanese doesn't even have a)11 3559 2 720 6926 t
(order\) or)1 352 1 720 7046 t
10 CW f
(\255M)1098 7046 w
10 R f
( these options involves the)4 1061( Handling)1 422( case\255insensitive English month name.)4 1535(which compares by)2 778 4 1244 7046 t
( 9)1 82( Plan)1 235( expertise.)1 417(larger issues of internationalization and is beyond the scope of this paper and our)13 3314 4 720 7166 t
10 CW f
(sort)4800 7166 w
10 R f
( most important options)3 969( simple and)2 473( The)1 211(works sensibly with options that make sense relative to the input.)10 2667 4 720 7286 t
cleartomark
showpage
saveobj restore
%%EndPage: 6 6
%%Page: 7 7
/saveobj save def
mark
7 pagesetup
10 R f
(\255 7 \255)2 166 1 2797 480 t
( particular,)1 432( In)1 133(are, however, usually meaningful.)3 1358 3 720 840 t
10 CW f
(sort)2668 840 w
10 R f
(sorts UTF into the same order that)6 1371 1 2933 840 t
10 CW f
(look)4329 840 w
10 R f
(expects.)4594 840 w
(Programs, such as)2 740 1 970 996 t
10 CW f
(look)1743 996 w
10 R f
(and)2016 996 w
10 CW f
(tail)2193 996 w
10 R f
(, that)1 208 1 2433 996 t
10 CW f
(seek)2674 996 w
10 R f
( character boundaries in the)4 1138(in their input must find)4 955 2 2947 996 t
( presence of newlines and other control char\255)7 1825( general this is impossible, but in practice the)8 1847( In)1 138(UTF stream.)1 510 4 720 1116 t
(acters, which represent only themselves in UTF, reduces the problem.)9 2789 1 720 1236 t
( synchro\255)1 388( The)1 219(Regular expression\255matching algorithms need rethinking to be applied to UTF text.)10 3463 3 970 1392 t
( Deterministic)1 607(nization problem invalidates algorithms such as Boyer\255Moore that skip along UTF input.)11 3713 2 720 1512 t
( usually applied to bytes; converting them to operate on variable\255sized byte sequences is awk\255)14 3805(automata are)1 515 2 720 1632 t
( input stream to runes adds measurable expense and the state tables)11 2692( the other hand, converting the)5 1230(ward. On)1 398 3 720 1752 t
( a more mundane level, even)5 1172( At)1 155( them.)1 255(expand from size 256 to 65536; it can be expensive just to generate)12 2738 4 720 1872 t
( usual bit\255vector representation within a non\255deterministic automaton is)8 2986(character classes are harder: the)4 1334 2 720 1992 t
(unwieldy with 65536 characters in the alphabet.)6 1916 1 720 2112 t
( and executing regular expressions was adapted)6 1931( existing library for compiling)4 1225( An)1 177(We compromised.)1 737 4 970 2268 t
( on runes, with two entry points for searching in arrays of runes and arrays of chars \(the pattern is)19 4005(to work)1 315 2 720 2388 t
( internally as runs of runes; the reserved Unicode value)9 2221( classes are represented)3 935( Character)1 438(always UTF text\).)2 726 4 720 2508 t
10 CW f
(FFFF)720 2628 w
10 R f
( Then)1 271(marks the end of the class.)5 1139 2 1001 2628 t
10 I f
(all)2452 2628 w
10 R f
( regular expressions)2 828(utilities that use)2 666 2 2599 2628 t
10 S1 f
(\320)4093 2628 w
10 R f
(editors,)4193 2628 w
10 CW f
(grep)4530 2628 w
10 R f
(,)4770 2628 w
10 CW f
(awk)4835 2628 w
10 R f
(,)5015 2628 w
(etc.)720 2748 w
10 S1 f
(\320)861 2748 w
10 R f
( some pro\255)2 433( For)1 192( was grandfathered, were converted to use the library.)8 2167(except the shell, whose notation)4 1287 4 961 2748 t
( our knowl\255)2 470( To)1 164(grams, there was a concomitant loss of performance, but there was also a strong advantage.)14 3686 3 720 2868 t
( single definition and implementation of regular expres\255)7 2254(edge, Plan 9 is the only Unix\255like system that has a)10 2066 2 720 2988 t
(sions; patterns are written and interpreted identically by all the programs in the system.)13 3479 1 720 3108 t
( the issue)2 376(A handful of programs have the notion of character built into them so strongly as to confuse)16 3694 2 970 3264 t
( exam\255)1 274( For)1 189( programs were treated as individual special cases.)7 2017( Such)1 250( they should do with UTF input.)6 1287(of what)1 303 6 720 3384 t
(ple,)720 3504 w
10 CW f
(wc)895 3504 w
10 R f
( option,)1 310(is, by default, unchanged in behavior and output; a new)9 2243 2 1043 3504 t
10 CW f
(\255r)3625 3504 w
10 R f
(, counts the number of correctly)5 1295 1 3745 3504 t
(encoded runes)1 573 1 720 3624 t
10 S1 f
(\320)1293 3624 w
10 R f
(valid UTF sequences)2 843 1 1393 3624 t
10 S1 f
(\320)2236 3624 w
10 R f
(in its input;)2 457 1 2336 3624 t
10 CW f
(\255b)2818 3624 w
10 R f
(the number of invalid sequences.)4 1317 1 2963 3624 t
10 B f
(Graphics and fonts)2 818 1 720 3864 t
10 R f
( instead designed to be used with)6 1351( is)1 96( It)1 115(Plan 9 provides only minimal support for plain text terminals.)9 2508 4 970 4020 t
( window system such as)4 990(all character input and output mediated by a)7 1804 2 720 4140 t
10 CW f
(8\275)3545 4140 w
10 R f
( window system and related)4 1139(. The)1 236 2 3665 4140 t
( plain text, the win\255)4 804( For)1 195(software are responsible for the display of UTF text as Unicode character images.)12 3321 3 720 4260 t
(dow system must provide a user\255settable)5 1688 1 720 4380 t
10 I f
(font)2446 4380 w
10 R f
( empty\) picture for each Unicode)5 1381(that provides a \(possibly)3 1019 2 2640 4380 t
( applications that use, say, Roman and Italic fonts, need multiple fonts storing multiple)13 3575(character. Fancier)1 745 2 720 4500 t
( the issues are apparent, though, in just the problem of displaying a)12 2795( All)1 188(pictures for each Unicode value.)4 1337 3 720 4620 t
( 128 or even)3 514( With)1 256( Unicode equivalent of a plain text terminal.)7 1806(single image for each character, that is, the)7 1744 4 720 4740 t
( 65536 characters, a more sophisticated design)6 1884( With)1 254( bitmaps.)1 371(256 characters, a font can be just an array of)9 1811 4 720 4860 t
( store the ideographs for just Japanese as 16)8 1752( To)1 161(is necessary.)1 504 3 720 4980 t
10 S f
(\264)3137 4980 w
10 R f
(16)3192 4980 w
10 S f
(\264)3292 4980 w
10 R f
( reason\255)1 319(1 bit images, the smallest they can)6 1374 2 3347 4980 t
( and)1 173( the images a little larger, store more bits per pixel,)10 2086( Make)1 282(ably be, takes over a quarter of a megabyte.)8 1779 4 720 5100 t
(hold a copy in every running application, and the memory cost becomes unreasonable.)12 3455 1 720 5220 t
( summary,)1 425( In)1 136( [Pike91].)1 397(The structure of the bitmap graphics services is described at length elsewhere)11 3112 4 970 5376 t
( same machine that has the display, mouse, and keyboard:)9 2361(the memory holding the bitmaps is stored in the)8 1959 2 720 5496 t
( memory and associated ser\255)4 1164( to that)2 290( Access)1 338(the terminal in Plan 9 terminology, the workstation in others'.)9 2528 4 720 5616 t
( of those files,)3 662( One)1 248( by system software on the terminal.)6 1643(vices is provided by device files served)6 1767 4 720 5736 t
10 CW f
(/dev/bitblt)720 5856 w
10 R f
( actions corresponding to entry points in)6 1616(, interprets messages written upon it as requests for)8 2044 2 1380 5856 t
( window sys\255)2 539( The)1 208( string, etc.)2 450(the graphics library: allocate a bitmap, execute a raster operation, draw a text)12 3123 4 720 5976 t
( simulating in)2 557(tem acts as a multiplexer that mediates access to the services and resources of the terminal by)16 3763 2 720 6096 t
( is, each window has a dis\255)6 1103( That)1 238( by the system.)3 615(each client window a set of files mirroring those provided)9 2364 4 720 6216 t
(tinct)720 6336 w
10 CW f
(/dev/mouse)926 6336 w
10 R f
(,)1526 6336 w
10 CW f
(/dev/bitblt)1579 6336 w
10 R f
( so on through which applications drive graphical input and out\255)10 2604(, and)1 197 2 2239 6336 t
(put.)720 6456 w
(One of the resources managed by)5 1392 1 970 6612 t
10 CW f
(8\275)2399 6612 w
10 R f
(and the terminal is the set of active)7 1486 1 2557 6612 t
10 I f
(subfonts.)4081 6612 w
10 R f
(Each subfont)1 537 1 4503 6612 t
( are)1 156( Subfonts)1 416( data structures for a sequential set of Unicode characters.)9 2394(holds the bitmaps and associated)4 1354 4 720 6732 t
( and loaded into the terminal by)6 1307(stored in files)2 554 2 720 6852 t
10 CW f
(8\275)2612 6852 w
10 R f
( example, one subfont might hold)5 1374( For)1 195(or an application.)2 708 3 2763 6852 t
( set;)1 178(the images of the first 256 characters of the Unicode space, corresponding to the Latin\2551 character)15 4142 2 720 6972 t
( These)1 289( characters with value 0250 to 02A8.)6 1478(another might hold the standard phonetic character set, Unicode)8 2553 3 720 7092 t
(files are collected in directories corresponding to typefaces:)7 2611 1 720 7212 t
10 CW f
(/lib/font/bit/pelm)3389 7212 w
10 R f
(contains the)1 513 1 4527 7212 t
cleartomark
showpage
saveobj restore
%%EndPage: 7 7
%%Page: 8 8
/saveobj save def
mark
8 pagesetup
10 R f
(\255 8 \255)2 166 1 2797 480 t
( other compo\255)2 588(Pellucida Monospace character set, with subfonts holding the Latin\2551, Greek, Cyrillic and)11 3732 2 720 840 t
( files encodes \(in a subfont\255specific way\) the size of the images:)11 2602( suffix on subfont)3 723( A)1 127(nents of the typeface.)3 868 4 720 960 t
10 CW f
(/lib/font/bit/pelm/latin1.9)720 1080 w
10 R f
(contains the Latin\2551 Pellucida Monospace characters with lower)7 2662 1 2378 1080 t
(case letters 9 pixels high;)4 1110 1 720 1200 t
10 CW f
(/lib/font/bit/jis/jis4400.16)1880 1200 w
10 R f
( high ideographs)2 714(contains 16\255pixel)1 716 2 3610 1200 t
(starting at Unicode value 4400.)4 1251 1 720 1320 t
( a font file, in)4 569( Instead,)1 370( do not identify which portion of the Unicode space they cover.)11 2606(The subfonts)1 525 4 970 1476 t
( font file is presented as an)6 1070( The)1 205( to assemble subfonts into a complete character set.)8 2049(plain text, describes how)3 996 4 720 1596 t
( in text windows and applications.)5 1386(argument to the window system to determine how plain text is displayed)11 2934 2 720 1716 t
(Here is the beginning of the font file)7 1470 1 720 1836 t
10 CW f
(/lib/font/bit/pelm/unicode.9.font)2217 1836 w
10 R f
(, which describes the)3 843 1 4197 1836 t
(layout of a font covering that portion of Unicode for which we have characters of typical display size:)17 4066 1 720 1956 t
9 CW f
(18 14)1 540 1 1008 2126 t
(0x0000 0x00FF latin1.9)2 1296 1 1008 2236 t
(0x0250 0x02E9 ipa.9)2 1134 1 1008 2346 t
(0x0386 0x03F5 greek.9)2 1242 1 1008 2456 t
(0x0400 0x0475 cyrillic.9)2 1404 1 1008 2566 t
(0x2190 0x21EA ../misc/arrows)2 1620 1 1008 2676 t
(0x2200 0x227F ../misc/math1)2 1566 1 1008 2786 t
(0x2280 0x22F1 ../misc/math2)2 1566 1 1008 2896 t
(0x2300 0x232C ../misc/tech)2 1512 1 1008 3006 t
(0x2600 0x266F ../misc/ding)2 1512 1 1008 3116 t
(0x3000 0x303f ../jis/jis3000.16)2 1782 1 1008 3226 t
(0x3041 0x309e ../jis/hiragana.16)2 1836 1 1008 3336 t
(0x30a1 0x30fe ../jis/katakana.16)2 1836 1 1008 3446 t
(0x4000 0x40ff ../jis/jis4000.16)2 1782 1 1008 3556 t
(0x4100 0x41ff ../jis/jis4100.16)2 1782 1 1008 3666 t
(0x4200 0x42ff ../jis/jis4200.16)2 1782 1 1008 3776 t
(...)1008 3886 w
10 R f
( the baseline to)3 617(The first two numbers set the interline spacing of the font \(18 pixels\) and the distance from)16 3703 2 720 4066 t
( they are placed so as best to fit within those)10 1800( characters are displayed,)3 1019( When)1 292(the top of the line \(14 pixels\).)6 1209 4 720 4186 t
( rest of the file associates subfont files with)8 1819( The)1 216( truncated.)1 432(constraints; characters too large to fit will be)7 1853 4 720 4306 t
( in the Pellucida Monospace typeface and directory;)7 2090( first four such files are)5 943( The)1 208(portions of Unicode space.)3 1079 4 720 4426 t
( file names are relative to the font file's own location.)10 2143( The)1 205(others reside in other directories.)4 1311 3 720 4546 t
( it simultaneously breaks the huge Uni\255)6 1577( First,)1 260( several advantages to this two\255level structure.)6 1855(There are)1 378 4 970 4702 t
( into manageable components and provides a unifying architecture for assembling fonts from)12 3872(code space)1 448 2 720 4822 t
( example, we have only one set of Japanese)8 1825( For)1 200( the structure promotes sharing.)4 1306( Second,)1 379(disjoint pieces.)1 610 5 720 4942 t
( to store only one)4 702(characters but dozens of typefaces for the Latin\2551 characters, and this structure permits us)13 3618 2 720 5062 t
( English\255)1 410( customization is easy.)3 968( Also,)1 285( set but use it with any Roman typeface.)8 1769(copy of the Japanese)3 888 5 720 5182 t
( an on\255line Oxford Dictionary can)5 1370(speaking users who don't need Japanese characters but may want to read)11 2950 2 720 5302 t
( \(or even just ASCII\) characters and the International Phonetic)9 2632(assemble a custom font with the Latin\2551)6 1688 2 720 5422 t
( special font editing)3 812( to do so requires just editing a plain text file, not using a)13 2381( Moreover,)1 476(Alphabet \(IPA\).)1 651 4 720 5542 t
( and memory)2 555( the structure guides the design of caching protocols to improve performance)11 3212(tool. Finally,)1 553 3 720 5662 t
(usage.)720 5782 w
( consume too much memory)4 1182(To load a complete Unicode character set into each application would)10 2888 2 970 5938 t
( Plan 9 assembles a multi\255)5 1067( Instead,)1 367(and, particularly on slow terminal lines, would take unreasonably long.)9 2886 3 720 6058 t
( application opens a font file, reads and parses it, and allocates a data)13 2765( An)1 173( structure for each font.)4 937(level cache)1 445 4 720 6178 t
( message written to)3 804(structure. A)1 506 2 720 6298 t
10 CW f
(/dev/bitblt)2064 6298 w
10 R f
(allocates an associated structure held in the terminal, in)8 2282 1 2758 6298 t
( messages copy these images)4 1163( Other)1 278( bitmap to act as a cache for recently used character images.)11 2403(particular, a)1 476 4 720 6418 t
( screen by loading characters from subfonts into the cache on demand and from there)14 3425(to bitmaps such as the)4 895 2 720 6538 t
( charac\255)1 319( protocol to draw characters is in terms of cache indices, not Unicode)12 2775( The)1 206(to the destination bitmap.)3 1020 4 720 6658 t
( details are hidden from the application, which instead sees only a)11 2761( These)1 300(ter number or UTF sequences.)4 1259 3 720 6778 t
( functions to discover character size information,)6 1984(subroutine to draw a string in a bitmap from a given font,)11 2336 2 720 6898 t
(and routines to allocate and to free fonts.)7 1630 1 720 7018 t
( read, and then downloaded to the ter\255)7 1548(As needed, whole subfonts are opened by the graphics library,)9 2522 2 970 7174 t
( a)1 80( when the program closes)4 1068( Even)1 267( are held open by the library in an LRU\255replacement list.)10 2385(minal. They)1 520 5 720 7294 t
cleartomark
showpage
saveobj restore
%%EndPage: 8 8
%%Page: 9 9
/saveobj save def
mark
9 pagesetup
10 R f
(\255 9 \255)2 166 1 2797 480 t
( the application opens the subfont, it asks the ter\255)9 2004( When)1 293(subfont, it is retained in the terminal for later use.)9 2023 3 720 840 t
( level of cache has the)5 888( This)1 230(minal if it already has a copy to avoid reading it from the file server if possible.)16 3202 3 720 960 t
( say, all the Japanese characters are stored only once, in the terminal; the)13 3096(property that the bitmaps for,)4 1224 2 720 1080 t
(applications read only size and width information from the terminal and share the images.)13 3589 1 720 1200 t
( simple algo\255)2 542( A)1 132( by the application are adaptive.)5 1325(The sizes of the character and subfont caches held)8 2071 4 970 1356 t
( size of the character)4 848( The)1 211( required.)1 388(rithm monitors the cache miss rate to enlarge and shrink the caches as)12 2873 4 720 1476 t
( For)1 201( Japanese text.)2 603(cache is limited to 2048 images maximum, which in practice seems enough even for)13 3516 3 720 1596 t
(plain ASCII\255like text it naturally stays around 128 images.)8 2340 1 720 1716 t
( implemented by only about 500 lines in the library and)10 2311(This mechanism sounds complicated but is)5 1759 2 970 1872 t
( driver and)2 434(considerably less in each of the terminal's graphics)7 2057 2 720 1992 t
10 CW f
(8\275)3237 1992 w
10 R f
( has the advantage that only characters)6 1546(. It)1 137 2 3357 1992 t
( the characters being drawn are in the)7 1576( is also efficient: if)4 793( It)1 122(that are being used are loaded into memory.)7 1829 4 720 2112 t
( works particularly well for alphabetic character sets, but also)9 2590( It)1 126(cache the extra overhead is negligible.)5 1604 3 720 2232 t
( a user first looks at Japanese text, it takes a few seconds to)13 2440( When)1 294( for ideographic sets.)3 855(adapts on demand)2 731 4 720 2352 t
( are larger, so)3 545(read all the font data, but thereafter the text is drawn almost as fast as regular text \(the images)18 3775 2 720 2472 t
( by the terminal, if a second application)7 1651( because the bitmaps are remembered)5 1543( Also,)1 273(draw a little slower\).)3 853 4 720 2592 t
(then looks at Japanese text it starts faster than the first.)10 2183 1 720 2712 t
( the applica\255)2 501(We considered building a `font server' to cache character images and associated data for)13 3569 2 970 2868 t
( because, although isolating many of)5 1505( rejected this design)3 823( We)1 197(tions, the window system, and the terminal.)6 1795 4 720 2988 t
( in)1 105( Moreover,)1 470( font management into a separate program, it didn't simplify the applications.)11 3116(the problems of)2 629 4 720 3108 t
( the man\255)2 389( Making)1 367( easy to have too many special purpose servers.)8 1941(a distributed system such as Plan 9 it is)8 1623 4 720 3228 t
( the concern of only the essential components simplifies the system and makes boot\255)13 3481(agement of the fonts)3 839 2 720 3348 t
(strapping less intricate.)2 924 1 720 3468 t
10 B f
(Input)720 3708 w
10 R f
( We)1 210( the system.)2 519(A completely different problem is how to type Unicode characters as input to)12 3341 3 970 3864 t
( gen\255)1 202(selected an unused key on our ASCII keyboards to serve as a prefix for multi\255keystroke sequences that)16 4118 2 720 3984 t
( example, the character \374 is generated by the prefix key \(typically)11 2747( For)1 201(erate Unicode characters.)2 1033 3 720 4104 t
10 CW f
(ALT)4739 4104 w
10 R f
(or)4957 4104 w
10 CW f
(Compose)720 4224 w
10 R f
( the application,)2 645( that character is read by)5 992( When)1 291(\) followed by a double quote and a lower\255case u.)9 1972 4 1140 4224 t
(from the file)2 503 1 720 4344 t
10 CW f
(/dev/cons)1250 4344 w
10 R f
( sequences generate charac\255)3 1117( Such)1 253( course presented as its UTF encoding.)6 1568(, it is of)3 312 4 1790 4344 t
( technical charac\255)2 708(ters from an arbitrary set that includes all of Latin\2551 plus a selection of mathematical and)15 3612 2 720 4464 t
( and four hex\255)3 571( arbitrary Unicode character may be generated by typing the prefix, an upper case X,)14 3406(ters. An)1 343 3 720 4584 t
(adecimal digits that identify the Unicode value.)6 1895 1 720 4704 t
( day\255to\255day needs: it's easy to remember to)7 1797(These simple mechanisms are adequate for most of our)8 2273 2 970 4860 t
( the occasional unusual charac\255)4 1262( For)1 193( Latin letters.)2 538( `ALT accent letter' for accented)5 1333( or)1 121(type `ALT 1 2' for \275)5 873 6 720 4980 t
(ter, the cut and paste features of)6 1301 1 720 5100 t
10 CW f
(8\275)2051 5100 w
10 R f
( program called \(perhaps misleadingly\))4 1589( A)1 127(serve well.)1 437 3 2201 5100 t
10 CW f
(unicode)4384 5100 w
10 R f
(takes)4835 5100 w
( UTF representation of that character, which may then be)9 2346(as argument a hexadecimal value, and prints the)7 1974 2 720 5220 t
(picked up with the mouse and used as input.)8 1768 1 720 5340 t
( the native)2 448( In)1 148(These methods are clearly unsatisfactory when working in a non\255English language.)10 3474 3 970 5496 t
( it's also reasonable)3 829( But)1 208( to be at hand.)4 615(country of such a language the appropriate keyboard is likely)9 2568 4 720 5616 t
10 S1 f
(\320)4940 5616 w
10 R f
(especially now the system handles Unicode)5 1739 1 720 5736 t
10 S1 f
(\320)2459 5736 w
10 R f
(to work in a language foreign to the keyboard.)8 1849 1 2559 5736 t
( Russian, it is straightforward to construct a program that)9 2344(For alphabetic languages such as Greek or)6 1726 2 970 5892 t
( yields the Greek `)4 781(does phonetic substitution, so that, for example, typing a Latin `a')10 2754 2 720 6012 t
10 S f
(a)4255 6012 w
10 R f
( Plan 9,)2 325('. Within)1 397 2 4318 6012 t
(such a program can be inserted transparently between the real keyboard and a program such as the window)17 4320 1 720 6132 t
(system, providing a manageable input device for such languages.)8 2601 1 720 6252 t
( users of such)3 567( Native)1 323( the problem is harder.)4 929(For ideographic languages such as Chinese or Japanese)7 2251 4 970 6408 t
( involve a hybrid technique based on)6 1476(languages have adopted methods for dealing with Latin keyboards that)9 2844 2 720 6528 t
( choose the desired one.)4 1020(phonetics to generate a list of possible symbols followed by menu selection to)12 3300 2 720 6648 t
( be effective, but their design must be rooted in information about the language unknown)14 3587(Such methods can)2 733 2 720 6768 t
( is easy in Plan 9)5 695( the technical problem of implementing such a device)8 2165( Although)1 431(to non\255native speakers.)2 929 4 720 6888 t
10 S1 f
(\320)4940 6888 w
10 R f
(it is just an elaboration of the technique for alphabetic languages)10 2689 1 720 7008 t
10 S1 f
(\320)3409 7008 w
10 R f
( of familiarity with such lan\255)5 1196(our lack)1 335 2 3509 7008 t
(guages has restrained our enthusiasm for building one.)7 2180 1 720 7128 t
( emotionally the most important of)5 1427(The input problem is technically the least interesting but perhaps)9 2643 2 970 7284 t
cleartomark
showpage
saveobj restore
%%EndPage: 9 9
%%Page: 10 10
/saveobj save def
mark
10 pagesetup
10 R f
(\255 10 \255)2 216 1 2772 480 t
( that remain the deeper prob\255)5 1170( Beyond)1 364( a system to an international character set.)7 1695(the problems of converting)3 1091 4 720 840 t
( and command names, problems we are not)7 1737(lems of internationalization such as multi\255lingual error messages)7 2583 2 720 960 t
( the ability to treat text of most languages on an equal footing, though, we can)15 3311( With)1 263( solve.)1 274(qualified to)1 472 4 720 1080 t
( will consider adopting Plan 9,)5 1292( people in non\255English speaking countries)5 1744( Perhaps)1 379(begin down that path.)3 905 4 720 1200 t
(solving the input problem locally)4 1372 1 720 1320 t
10 S1 f
(\320)2092 1320 w
10 R f
( their local terminals)3 854(perhaps just by plugging in)4 1133 2 2192 1320 t
10 S1 f
(\320)4179 1320 w
10 R f
(and begin to use a)4 761 1 4279 1320 t
(system with at least the capacity to be international.)8 2067 1 720 1440 t
10 B f
(Acknowledgements)720 1680 w
10 R f
( Flandrena converted most of the)5 1417( Bob)1 237( and encouragement.)2 868(Dennis Ritchie provided consultation)3 1548 4 970 1836 t
( implementations and)2 875( Kernighan suffered cheerfully with several inadequate)6 2241( Brian)1 280(standard tools to UTF.)3 924 4 720 1956 t
(converted)720 2076 w
10 CW f
(troff)1138 2076 w
10 R f
( thank them all.)3 622( We)1 188( Drechsler converted his Postscript driver to UTF.)7 1997( Rich)1 239(to UTF.)1 317 5 1463 2076 t
10 B f
(References)720 2316 w
10 R f
([ANSIC])720 2472 w
10 I f
( for Information Systems)3 1028(American National Standard)2 1182 2 1124 2472 t
10 S1 f
(\261)3373 2472 w
10 I f
(Programming Language C)2 1106 1 3477 2472 t
10 R f
(, American)1 457 1 4583 2472 t
(National Standards Institute, Inc., New York, 1990)6 2036 1 720 2592 t
([ISO10646] ISO/IEC DIS 10646\2551)3 1429 1 720 2748 t
10 I f
(Information technology)1 952 1 2185 2748 t
10 S1 f
(\261)3173 2748 w
10 I f
(Universal Multiple\255Octet Coded Character)3 1765 1 3275 2748 t
(Set \(UCS\))1 402 1 720 2868 t
10 S1 f
(\320)1147 2868 w
10 I f
(Part 1: Architecture and Basic Multilingual Plane)6 2016 1 1272 2868 t
10 R f
( ``Plan 9 from Bell Labs'', UKUUG Proc. of the)9 2001([Pike90] R. Pike, D. Presotto, K. Thompson, H. Trickey,)8 2319 2 720 3024 t
(Summer 1990 Conf., London, England, 1990)5 1808 1 720 3144 t
([Pike91] Pike, R., ``8.5, The Plan 9 Window System'', USENIX Summer Conf. Proc., Nashville, 1991)14 4114 1 720 3300 t
([Pike92] Pike, R., ``How to Use the Plan 9 C Compiler'', in)11 2517 1 720 3456 t
10 I f
( Manual)1 348(The Plan 9 Programmer's)3 1085 2 3273 3456 t
10 R f
(, AT&T)1 334 1 4706 3456 t
(Bell Laboratories, Murray Hill, NJ, 1992)5 1637 1 720 3576 t
([Unicode])720 3732 w
10 I f
(The Unicode Standard, Worldwide Character Encoding, Version 1.0, Volume 1)9 3287 1 1161 3732 t
10 R f
(, The Unicode)2 592 1 4448 3732 t
(Consortium, Addison Wesley, New York, 1991)5 1904 1 720 3852 t
cleartomark
showpage
saveobj restore
%%EndPage: 10 10
%%Trailer
done
%%Pages: 10
%%DocumentFonts: Times-Bold Times-Italic Times-Roman Symbol Courier Times-Roman
