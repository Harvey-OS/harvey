sizeof_1_ = 8;
aggr _1_
{
	'V' 0 length;
};

defn
_1_(addr) {
	complex _1_ addr;
	print("	length	", addr.length, "\n");
};

UTFmax = 3;
Runesync = 128;
Runeself = 128;
Runeerror = 128;
sizeofFconv = 24;
aggr Fconv
{
	'X' 0 out;
	'X' 4 eout;
	'D' 8 f1;
	'D' 12 f2;
	'D' 16 f3;
	'D' 20 chr;
};

defn
Fconv(addr) {
	complex Fconv addr;
	print("	out	", addr.out\X, "\n");
	print("	eout	", addr.eout\X, "\n");
	print("	f1	", addr.f1, "\n");
	print("	f2	", addr.f2, "\n");
	print("	f3	", addr.f3, "\n");
	print("	chr	", addr.chr, "\n");
};

sizeofTm = 40;
aggr Tm
{
	'D' 0 sec;
	'D' 4 min;
	'D' 8 hour;
	'D' 12 mday;
	'D' 16 mon;
	'D' 20 year;
	'D' 24 wday;
	'D' 28 yday;
	'a' 32 zone;
	'D' 36 tzoff;
};

defn
Tm(addr) {
	complex Tm addr;
	print("	sec	", addr.sec, "\n");
	print("	min	", addr.min, "\n");
	print("	hour	", addr.hour, "\n");
	print("	mday	", addr.mday, "\n");
	print("	mon	", addr.mon, "\n");
	print("	year	", addr.year, "\n");
	print("	wday	", addr.wday, "\n");
	print("	yday	", addr.yday, "\n");
	print("	zone	", addr.zone, "\n");
	print("	tzoff	", addr.tzoff, "\n");
};

PNPROC = 1;
PNGROUP = 2;
sizeofLock = 4;
aggr Lock
{
	'D' 0 val;
};

defn
Lock(addr) {
	complex Lock addr;
	print("	val	", addr.val, "\n");
};

sizeofQLp = 12;
aggr QLp
{
	'D' 0 inuse;
	'A' QLp 4 next;
	'C' 8 state;
};

defn
QLp(addr) {
	complex QLp addr;
	print("	inuse	", addr.inuse, "\n");
	print("	next	", addr.next\X, "\n");
	print("	state	", addr.state, "\n");
};

sizeofQLock = 16;
aggr QLock
{
	Lock 0 lock;
	'D' 4 locked;
	'A' QLp 8 $head;
	'A' QLp 12 $tail;
};

defn
QLock(addr) {
	complex QLock addr;
	print("Lock lock {\n");
	Lock(addr.lock);
	print("}\n");
	print("	locked	", addr.locked, "\n");
	print("	$head	", addr.$head\X, "\n");
	print("	$tail	", addr.$tail\X, "\n");
};

sizeofRWLock = 20;
aggr RWLock
{
	Lock 0 lock;
	'D' 4 readers;
	'D' 8 writer;
	'A' QLp 12 $head;
	'A' QLp 16 $tail;
};

defn
RWLock(addr) {
	complex RWLock addr;
	print("Lock lock {\n");
	Lock(addr.lock);
	print("}\n");
	print("	readers	", addr.readers, "\n");
	print("	writer	", addr.writer, "\n");
	print("	$head	", addr.$head\X, "\n");
	print("	$tail	", addr.$tail\X, "\n");
};

RFNAMEG = 1;
RFENVG = 2;
RFFDG = 4;
RFNOTEG = 8;
RFPROC = 16;
RFMEM = 32;
RFNOWAIT = 64;
RFCNAMEG = 1024;
RFCENVG = 2048;
RFCFDG = 4096;
RFREND = 8192;
RFNOMNT = 16384;
sizeofQid = 8;
aggr Qid
{
	'U' 0 path;
	'U' 4 vers;
};

defn
Qid(addr) {
	complex Qid addr;
	print("	path	", addr.path, "\n");
	print("	vers	", addr.vers, "\n");
};

sizeofDir = 116;
aggr Dir
{
	'a' 0 name;
	'a' 28 uid;
	'a' 56 gid;
	Qid 84 qid;
	'U' 92 mode;
	'D' 96 atime;
	'D' 100 mtime;
	{
	'V' 104 length;
	};
	'u' 112 type;
	'u' 114 dev;
};

defn
Dir(addr) {
	complex Dir addr;
	print("	name	", addr.name, "\n");
	print("	uid	", addr.uid, "\n");
	print("	gid	", addr.gid, "\n");
	print("Qid qid {\n");
	Qid(addr.qid);
	print("}\n");
	print("	mode	", addr.mode, "\n");
	print("	atime	", addr.atime, "\n");
	print("	mtime	", addr.mtime, "\n");
	print("_1_ {\n");
		_1_(addr+104);
	print("}\n");
	print("	type	", addr.type, "\n");
	print("	dev	", addr.dev, "\n");
};

sizeofWaitmsg = 112;
aggr Waitmsg
{
	'a' 0 pid;
	'a' 12 time;
	'a' 48 msg;
};

defn
Waitmsg(addr) {
	complex Waitmsg addr;
	print("	pid	", addr.pid, "\n");
	print("	time	", addr.time, "\n");
	print("	msg	", addr.msg, "\n");
};

Bsize = 8192;
Bungetsize = 4;
Bmagic = 3227993;
Beof = -1;
Bbad = -2;
Binactive = 0;
Bractive = 1;
Bwactive = 2;
Bracteof = 3;
sizeofBiobufhdr = 52;
aggr Biobufhdr
{
	'D' 0 icount;
	'D' 4 ocount;
	'D' 8 rdline;
	'D' 12 runesize;
	'D' 16 state;
	'D' 20 fid;
	'D' 24 flag;
	'V' 28 offset;
	'D' 36 bsize;
	'X' 40 bbuf;
	'X' 44 ebuf;
	'X' 48 gbuf;
};

defn
Biobufhdr(addr) {
	complex Biobufhdr addr;
	print("	icount	", addr.icount, "\n");
	print("	ocount	", addr.ocount, "\n");
	print("	rdline	", addr.rdline, "\n");
	print("	runesize	", addr.runesize, "\n");
	print("	state	", addr.state, "\n");
	print("	fid	", addr.fid, "\n");
	print("	flag	", addr.flag, "\n");
	print("	offset	", addr.offset, "\n");
	print("	bsize	", addr.bsize, "\n");
	print("	bbuf	", addr.bbuf\X, "\n");
	print("	ebuf	", addr.ebuf\X, "\n");
	print("	gbuf	", addr.gbuf\X, "\n");
};

sizeofBiobuf = 8248;
aggr Biobuf
{
	{
	'D' 0 icount;
	'D' 4 ocount;
	'D' 8 rdline;
	'D' 12 runesize;
	'D' 16 state;
	'D' 20 fid;
	'D' 24 flag;
	'V' 28 offset;
	'D' 36 bsize;
	'X' 40 bbuf;
	'X' 44 ebuf;
	'X' 48 gbuf;
	};
	'a' 52 b;
};

defn
Biobuf(addr) {
	complex Biobuf addr;
	print("Biobufhdr {\n");
		Biobufhdr(addr+0);
	print("}\n");
	print("	b	", addr.b, "\n");
};

sizeofScsi = 16;
aggr Scsi
{
	'X' 0 inquire;
	'D' 4 rawfd;
	'D' 8 nchange;
	'U' 12 changetime;
};

defn
Scsi(addr) {
	complex Scsi addr;
	print("	inquire	", addr.inquire\X, "\n");
	print("	rawfd	", addr.rawfd, "\n");
	print("	nchange	", addr.nchange, "\n");
	print("	changetime	", addr.changetime, "\n");
};

Sread = 0;
Swrite = 1;
Snone = 2;
sizeofDisk = 100;
aggr Disk
{
	'X' 0 prefix;
	'a' 4 part;
	'D' 32 fd;
	'D' 36 wfd;
	'D' 40 ctlfd;
	'D' 44 rdonly;
	'D' 48 type;
	'V' 52 secs;
	'V' 60 secsize;
	'V' 68 size;
	'V' 76 offset;
	'D' 84 width;
	'D' 88 c;
	'D' 92 h;
	'D' 96 s;
};

defn
Disk(addr) {
	complex Disk addr;
	print("	prefix	", addr.prefix\X, "\n");
	print("	part	", addr.part, "\n");
	print("	fd	", addr.fd, "\n");
	print("	wfd	", addr.wfd, "\n");
	print("	ctlfd	", addr.ctlfd, "\n");
	print("	rdonly	", addr.rdonly, "\n");
	print("	type	", addr.type, "\n");
	print("	secs	", addr.secs, "\n");
	print("	secsize	", addr.secsize, "\n");
	print("	size	", addr.size, "\n");
	print("	offset	", addr.offset, "\n");
	print("	width	", addr.width, "\n");
	print("	c	", addr.c, "\n");
	print("	h	", addr.h, "\n");
	print("	s	", addr.s, "\n");
};

Tfile = 0;
Tsd = 1;
Tfloppy = 2;
DESbsize = 8;
sizeofDESstate = 148;
aggr DESstate
{
	'U' 0 setup;
	'a' 4 key;
	'a' 12 expanded;
	'a' 140 ivec;
};

defn
DESstate(addr) {
	complex DESstate addr;
	print("	setup	", addr.setup, "\n");
	print("	key	", addr.key, "\n");
	print("	expanded	", addr.expanded, "\n");
	print("	ivec	", addr.ivec, "\n");
};

DES3E = 0;
DES3D = 1;
DES3EEE = 0;
DES3EDE = 2;
DES3DED = 5;
DES3DDD = 7;
sizeofDES3state = 420;
aggr DES3state
{
	'U' 0 setup;
	'a' 4 key;
	'a' 28 expanded;
	'a' 412 ivec;
};

defn
DES3state(addr) {
	complex DES3state addr;
	print("	setup	", addr.setup, "\n");
	print("	key	", addr.key, "\n");
	print("	expanded	", addr.expanded, "\n");
	print("	ivec	", addr.ivec, "\n");
};

SHA1dlen = 20;
MD4dlen = 16;
MD5dlen = 16;
sizeofDigestState = 160;
aggr DigestState
{
	'U' 0 len;
	'a' 4 state;
	'a' 24 buf;
	'D' 152 blen;
	'C' 156 malloced;
	'C' 157 seeded;
};

defn
DigestState(addr) {
	complex DigestState addr;
	print("	len	", addr.len, "\n");
	print("	state	", addr.state, "\n");
	print("	buf	", addr.buf, "\n");
	print("	blen	", addr.blen, "\n");
	print("	malloced	", addr.malloced, "\n");
	print("	seeded	", addr.seeded, "\n");
};

sizeofRC4state = 260;
aggr RC4state
{
	'a' 0 state;
	'b' 256 x;
	'b' 257 y;
};

defn
RC4state(addr) {
	complex RC4state addr;
	print("	state	", addr.state, "\n");
	print("	x	", addr.x, "\n");
	print("	y	", addr.y, "\n");
};

sizeofRSApub = 8;
aggr RSApub
{
	'X' 0 n;
	'X' 4 ek;
};

defn
RSApub(addr) {
	complex RSApub addr;
	print("	n	", addr.n\X, "\n");
	print("	ek	", addr.ek\X, "\n");
};

sizeofRSApriv = 32;
aggr RSApriv
{
	RSApub 0 pub;
	'X' 8 dk;
	'X' 12 p;
	'X' 16 q;
	'X' 20 kp;
	'X' 24 kq;
	'X' 28 c2;
};

defn
RSApriv(addr) {
	complex RSApriv addr;
	print("RSApub pub {\n");
	RSApub(addr.pub);
	print("}\n");
	print("	dk	", addr.dk\X, "\n");
	print("	p	", addr.p\X, "\n");
	print("	q	", addr.q\X, "\n");
	print("	kp	", addr.kp\X, "\n");
	print("	kq	", addr.kq\X, "\n");
	print("	c2	", addr.c2\X, "\n");
};

sizeofEGpub = 12;
aggr EGpub
{
	'X' 0 p;
	'X' 4 alpha;
	'X' 8 key;
};

defn
EGpub(addr) {
	complex EGpub addr;
	print("	p	", addr.p\X, "\n");
	print("	alpha	", addr.alpha\X, "\n");
	print("	key	", addr.key\X, "\n");
};

sizeofEGpriv = 16;
aggr EGpriv
{
	EGpub 0 pub;
	'X' 12 secret;
};

defn
EGpriv(addr) {
	complex EGpriv addr;
	print("EGpub pub {\n");
	EGpub(addr.pub);
	print("}\n");
	print("	secret	", addr.secret\X, "\n");
};

sizeofEGsig = 8;
aggr EGsig
{
	'X' 0 r;
	'X' 4 s;
};

defn
EGsig(addr) {
	complex EGsig addr;
	print("	r	", addr.r\X, "\n");
	print("	s	", addr.s\X, "\n");
};

sizeofAhdr = 120;
aggr Ahdr
{
	'X' 0 name;
	{
	'a' 4 name;
	'a' 32 uid;
	'a' 60 gid;
	Qid 88 qid;
	'U' 96 mode;
	'D' 100 atime;
	'D' 104 mtime;
	{
	'V' 108 length;
	};
	'u' 116 type;
	'u' 118 dev;
	};
};

defn
Ahdr(addr) {
	complex Ahdr addr;
	print("	name	", addr.name\X, "\n");
	print("Dir {\n");
		Dir(addr+4);
	print("}\n");
};

sizeofArch = 132;
aggr Arch
{
	'A' Biobuf 0 b;
	'D' 4 nexthdr;
	'D' 8 canseek;
	Ahdr 12 hdr;
};

defn
Arch(addr) {
	complex Arch addr;
	print("	b	", addr.b\X, "\n");
	print("	nexthdr	", addr.nexthdr, "\n");
	print("	canseek	", addr.canseek, "\n");
	print("Ahdr hdr {\n");
	Ahdr(addr.hdr);
	print("}\n");
};

sizeofUpdate = 28;
aggr Update
{
	'X' 0 desc;
	'X' 4 dir;
	'V' 8 time;
	'V' 16 utime;
	'A' Biobuf 24 bmd5;
};

defn
Update(addr) {
	complex Update addr;
	print("	desc	", addr.desc\X, "\n");
	print("	dir	", addr.dir\X, "\n");
	print("	time	", addr.time, "\n");
	print("	utime	", addr.utime, "\n");
	print("	bmd5	", addr.bmd5\X, "\n");
};

sizeofWrap = 16;
aggr Wrap
{
	'X' 0 name;
	'X' 4 root;
	'A' Update 8 u;
	'D' 12 nu;
};

defn
Wrap(addr) {
	complex Wrap addr;
	print("	name	", addr.name\X, "\n");
	print("	root	", addr.root\X, "\n");
	print("	u	", addr.u\X, "\n");
	print("	nu	", addr.nu, "\n");
};

complex Wrap main:w;
