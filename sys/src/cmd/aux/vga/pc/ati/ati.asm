;        Disassembly of file :ROM.COM
;
;        Define common ASCII control codes.
;
HT       EQU   9
LF       EQU   10
FF       EQU   12
CR       EQU   13
EOF      EQU   26
;
Extra_Seg SEGMENT PUBLIC
L0072H   EQU   00072H
Extra_Seg ENDS
;
Stack_Seg SEGMENT PUBLIC
LFFFFH   EQU   0FFFFH
L3636H   EQU   03636H
LF636H   EQU   0F636H
LFFFFH   EQU   0FFFFH
L3636H   EQU   03636H
LFEC6H   EQU   0FEC6H
L00FFH   EQU   000FFH
L3636H   EQU   03636H
LDE7CH   EQU   0DE7CH
L3636H   EQU   03636H
L36F7H   EQU   036F7H
LF636H   EQU   0F636H
LFFFFH   EQU   0FFFFH
L00FFH   EQU   000FFH
L3636H   EQU   03636H
LFEC6H   EQU   0FEC6H
L00FFH   EQU   000FFH
L3636H   EQU   03636H
L36F6H   EQU   036F6H
LDE7CH   EQU   0DE7CH
L3636H   EQU   03636H
L36F6H   EQU   036F6H
L36F7H   EQU   036F7H
LF636H   EQU   0F636H
LFFFFH   EQU   0FFFFH
Stack_Seg ENDS
;
Code_Seg SEGMENT PUBLIC
L805BH   EQU   0805BH
L80B1H   EQU   080B1H
L80B3H   EQU   080B3H
L80B5H   EQU   080B5H
L80B6H   EQU   080B6H
L80B9H   EQU   080B9H
L80BFH   EQU   080BFH
L80C0H   EQU   080C0H
L80FAH   EQU   080FAH
L82E8H   EQU   082E8H
L839BH   EQU   0839BH
L83E3H   EQU   083E3H
L86E8H   EQU   086E8H
L88B4H   EQU   088B4H
L8AE8H   EQU   08AE8H
L8B2EH   EQU   08B2EH
L8EE8H   EQU   08EE8H
L900FH   EQU   0900FH
L96E8H   EQU   096E8H
L9AE8H   EQU   09AE8H
L9AEEH   EQU   09AEEH
L9C15H   EQU   09C15H
LA000H   EQU   0A000H
LA112H   EQU   0A112H
LA261H   EQU   0A261H
LA5A5H   EQU   0A5A5H
LA6E8H   EQU   0A6E8H
LA8ECH   EQU   0A8ECH
LA8F4H   EQU   0A8F4H
LAA0EH   EQU   0AA0EH
LAA55H   EQU   0AA55H
LAAAAH   EQU   0AAAAH
LAAB2H   EQU   0AAB2H
LB000H   EQU   0B000H
LB151H   EQU   0B151H
LB1B0H   EQU   0B1B0H
LB2EEH   EQU   0B2EEH
LB800H   EQU   0B800H
LBA00H   EQU   0BA00H
LBAE8H   EQU   0BAE8H
LBD07H   EQU   0BD07H
LBEE8H   EQU   0BEE8H
LBFDAH   EQU   0BFDAH
LC012H   EQU   0C012H
LC015H   EQU   0C015H
LC0F1H   EQU   0C0F1H
LC301H   EQU   0C301H
LC3C3H   EQU   0C3C3H
LC3DBH   EQU   0C3DBH
LC416H   EQU   0C416H
LC7B1H   EQU   0C7B1H
LC932H   EQU   0C932H
LCE50H   EQU   0CE50H
LCE51H   EQU   0CE51H
LCE6DH   EQU   0CE6DH
LCFBAH   EQU   0CFBAH
LD102H   EQU   0D102H
LD86CH   EQU   0D86CH
LD918H   EQU   0D918H
LDBC3H   EQU   0DBC3H
LDBDBH   EQU   0DBDBH
LDE6EH   EQU   0DE6EH
LDF00H   EQU   0DF00H
LDF8AH   EQU   0DF8AH
LDFA3H   EQU   0DFA3H
LDFB0H   EQU   0DFB0H
LDFB1H   EQU   0DFB1H
LDFB3H   EQU   0DFB3H
LE00DH   EQU   0E00DH
LE1B2H   EQU   0E1B2H
LE2B6H   EQU   0E2B6H
LE2E8H   EQU   0E2E8H
LE7C3H   EQU   0E7C3H
LE805H   EQU   0E805H
LE853H   EQU   0E853H
LE86FH   EQU   0E86FH
LE880H   EQU   0E880H
LE8DFH   EQU   0E8DFH
LEAEEH   EQU   0EAEEH
LEB80H   EQU   0EB80H
LEEC2H   EQU   0EEC2H
LEF79H   EQU   0EF79H
LEFA6H   EQU   0EFA6H
LEFB0H   EQU   0EFB0H
LEFBEH   EQU   0EFBEH
LF000H   EQU   0F000H
LF065H   EQU   0F065H
LF1CCH   EQU   0F1CCH
LF20CH   EQU   0F20CH
LF28CH   EQU   0F28CH
LF4B8H   EQU   0F4B8H
LF626H   EQU   0F626H
LF7BAH   EQU   0F7BAH
LF7E4H   EQU   0F7E4H
LF802H   EQU   0F802H
LF960H   EQU   0F960H
LFB62H   EQU   0FB62H
LFBA6H   EQU   0FBA6H
LFBB8H   EQU   0FBB8H
LFCB5H   EQU   0FCB5H
LFDB1H   EQU   0FDB1H
LFDB9H   EQU   0FDB9H
LFE00H   EQU   0FE00H
LFE31H   EQU   0FE31H
LFEB1H   EQU   0FEB1H
LFEC6H   EQU   0FEC6H
LFF00H   EQU   0FF00H
LFF02H   EQU   0FF02H
LFF08H   EQU   0FF08H
LFF20H   EQU   0FF20H
LFF8FH   EQU   0FF8FH
LFFA2H   EQU   0FFA2H
LFFA3H   EQU   0FFA3H
LFFC2H   EQU   0FFC2H
LFFE3H   EQU   0FFE3H
LFFE7H   EQU   0FFE7H
LD863H   EQU   0D863H
LD86CH   EQU   0D86CH
LDE6EH   EQU   0DE6EH
LFBA6H   EQU   0FBA6H
LFDB1H   EQU   0FDB1H
LFDB9H   EQU   0FDB9H
LFE31H   EQU   0FE31H
LFEB1H   EQU   0FEB1H
LFF00H   EQU   0FF00H
LFF8FH   EQU   0FF8FH
LFFA2H   EQU   0FFA2H
LFFA3H   EQU   0FFA3H
LFFC2H   EQU   0FFC2H
LFFE3H   EQU   0FFE3H
LFFE7H   EQU   0FFE7H
LD863H   EQU   0D863H
LF065H   EQU   0F065H
LFDB9H   EQU   0FDB9H
LFE00H   EQU   0FE00H
LFEC6H   EQU   0FEC6H
LFF01H   EQU   0FF01H
LDE7CH   EQU   0DE7CH
LFEC6H   EQU   0FEC6H
LFF00H   EQU   0FF00H
LFF20H   EQU   0FF20H
LFF32H   EQU   0FF32H
LFF66H   EQU   0FF66H
LFF8FH   EQU   0FF8FH
LFFA3H   EQU   0FFA3H
LFFC2H   EQU   0FFC2H
LFFE3H   EQU   0FFE3H
LFFE7H   EQU   0FFE7H
LFFFFH   EQU   0FFFFH
Code_Seg ENDS
;
;
Code_Seg SEGMENT PUBLIC
;
	ASSUME CS:Code_Seg,DS:Code_Seg,ES:Extra_Seg,SS:Stack_Seg
	ORG   00000H
chksum:  DB    55H               ;rom checksum
L0001H:  DB    0AAH
L0002H:  DB    40H
start:   JMP   SHORT start1
L0005H:  AAA                     ;Ascii adjust for addition.
L0006H:  DB    34H
L0007H:  DB    30H
L0008H:  DB    30H
L0009H:  DB    93H
L000AH:  DB    0FFH
L000BH:  DB    0FFH
L000CH:  DB    83H
L000DH:  DB    0
L000EH:  DB    98H,24H
extport: DB    0CEH
L0011H:  DW    L0001H
	DB    0
L0014H:  DB    0,0
L0016H:  DB    0,0,0
L0019H:  DB    0
L001AH:  DB    0
L001BH:  DB    0
L001CH:  DB    0
L001DH:  DB    0
L001EH:  DB    49H
L001FH:  DB    42H
L0020H:  DB    4DH,0,0,0
L0024H:  DB    0,0,0,0
L0028H:  DB    0,0,0,0,0,0
	DB    0,0
L0030H:  DB    20H
ati_id:  DB    '761295520'
L003AH:  DB    0,0,0
L003DH:  DB    0,0
L003FH:  DB    0
plug8:   DB    33H,31H           ;set to 23ac by init
ati_card:DB    11H               ;8 bit vga, prog clock chip
ati_chip:DB    34H
	DB    0CH,20H,0B0H,0,0,0
	DB    31H,0,1
L004DH:  DB    4,0,0
L0050H:  DB    31H,39H,39H,31H
L0054H:  DB    2FH
L0055H:  DB    31H
L0056H:  DB    32H,2FH,31H,33H,20H,31H
	DB    36H,3AH,35H,36H
L0060H:  DB    0,0,0,0
L0064H:  DB    0E9H,9AH,70H,0,0E9H,9AH
	DB    70H
L006BH:  DB    0
L006CH:  DB    0E9H,9AH,70H,0,0,0
L0072H:  DB    0
L0073H:  DB    0
L0074H:  DB    0,0,0,0,0,0
	DB    0,0
plug2:   DB    0,0               ;set to 3bec at init
plug3:   DB    0,0               ;set to CS at init
start1:  JMP   SHORT start2
	DB    90H,CR,LF,' ',CR,LF
	DB    0,'(C)'
L008CH:  DB    ' 19'
L008FH:  DB    '88-91, ATI Techn'
	DB    'ologies'
L00A6H:  DB    ' Inc'
L00AAH:  DB    '.'
L00ABH:  DB    CR,LF,'ATI G'
L00B2H:  DB    'raphics ULTRA'
L00BFH:  DB    CR,LF,'AT'
L00C3H:  DB    'I Gr'
L00C7H:  DB    'aphics Vantage'
L00D5H:  DB    ', BIOS P/N 113-1'
	DB    '1504-001',CR
	DB    LF
start2:  PUSH  DS
start3:  PUSH  ES
init:    PUSH  DI
	PUSH  SI
	PUSH  BP
	PUSH  DX
	PUSH  CX
	PUSH  BX
	PUSH  AX
L00F8H:  CALL  initdis
	CALL  suba
	POP   AX
L00FFH:  POP   BX
L0100H:  POP   CX
	POP   DX
L0102H:  POP   BP
	POP   SI
	POP   DI
	POP   ES
	POP   DS
	DB    0CBH              ;*** FAR RETURN ***
;
strange1:CALL  zeroDS            ;plugged with f065
	DB    0EH
plug4:   DB    7,0BDH            ;set to 3fec at init
plug5:   DB    0ABH,0            ;set to cs by init
	MOV   CX,OFFSET L0014H
	MOV   DX,OFFSET L12EEH
	IN    AL,DX
	TEST   AL,10H
	JZ    L0121H
	MOV   BP,OFFSET L00BFH
	MOV   CX,OFFSET L0016H
L0121H:  CALL  L7FF0H
	MOV   BP,OFFSET L00D5H
	MOV   CX,OFFSET L001AH
	CALL  L7FF0H
	RET
;
suba:    CALL  zeroDS
	CALL  stranges
sub1:    PUSH  BX
sub2:    CALL  L1E62H
	OR    AL,AL
	PUSHF
	JZ    sub4
sub3:    CALL  setqm_1
sub4:    CALL  setmode
	CALL  tstmode
	CALL  x                 ;(has an exit from interrupt)
	CALL  tst
	POPF
	JNZ   sub5
	CALL  ggg
sub5:    POP   BX
	CALL  L0245H
	MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,1
	JZ    sub6
	MOV   AX,OFFSET setuex6
	CALL  o_1ce
sub6:    CALL  strange1
	STI                     ;Enable interrupts
	MOV   BL,OFFSET 8
	CALL  strobes
	PUSH  AX
	MOV   BL,OFFSET 9
	CALL  strobes
	POP   AX
	MOV   AH,BL
	MOV   DX,OFFSET L56EEH
	OUT   AX,DX             ; *** 56ee = something!
	MOV   BL,OFFSET 7
	CALL  strobes
sub7:    AND   AL,3
	MOV   AH,AL
	MOV   AL,OFFSET 0BAH
sub8:    CALL  o_1ce
	CALL  way
	RET
;
qma:     MOV   DI,OFFSET L01C1H
L0190H:  MOV   AX,WORD PTR CS:[DI]
	MOV   CH,BYTE PTR CS:[DI]+2
	CALL  ao_1ce
	ADD   DI,3
	CMP   DI,OFFSET setpel
	JNZ   L0190H
	MOV   AL,OFFSET 0AAH
	CALL  rd_1ce
	AND   AL,0FH
	CMP   AL,5
	JL    plug7
	PUSH  AX
	MOV   AX,OFFSET L20BEH
	CALL  o_1ce
	DB    58H
plug7:   CMP   AL,6              ;set to CS by init
	JNZ   L01C0H
	MOV   AX,OFFSET L20A6H
	CALL  o_1ce
L01C0H:  RET
L01C1H:  MOV   CH,OFFSET 8
	ADD   BYTE PTR [BP]+chksum,DH
	MOV   DX,OFFSET chksum
	MOV   AL,OFFSET 0
	SBB   BYTE PTR [BX+SI]+plug8,BH
	MOV   DL,OFFSET 0
	ADD   BYTE PTR [BX+SI]+LE00DH,AH
	MOV   CL,OFFSET 0
	ADD   BYTE PTR [BP+DI]+chksum,DH
	MOV   AH,OFFSET 0
	ADD   BYTE PTR [DI]+0FE00H,BH
	MOV   CX,OFFSET LFE31H
	MOV   SI,OFFSET extport
	MOV   BH,OFFSET 80H
	ADD   BYTE PTR [BX]+4008H,BH
	MOV   BYTE PTR [chksum],AL
	CMPSB                   ;Compare strings.
	ADD   AL,0FFH
	MOV   WORD PTR [LF802H],AX
;
setpel:  MOV   DX,OFFSET L03C6H
	MOV   AL,OFFSET 0FFH
	OUT   AL,DX             ;pel always = ff
	MOV   CX,OFFSET L0300H
L0200H:  MOV   DL,OFFSET 0C8H
	XOR   AL,AL
L0204H:  OUT   AL,DX             ; zero pel register
	INC   DX
setpel2: NOP
	OUT   AL,DX
	NOP                     ;pause - i/o
	LOOP  setpel2           ;Dec CX, loop if CX<>0.
	RET
;
stranges:CALL  setpel
	CMP   WORD PTR [magic],OFFSET 1234H
	JZ    str1
	MOV   BL,OFFSET 10H
	NOP
	NOP
	CALL  set1ce
	XOR   BX,BX
	JMP   SHORT str2
str1:    MOV   AL,OFFSET 0B4H    ;1ce register
	CALL  rd_1ce
	MOV   BL,AL
	MOV   AL,OFFSET 0B6H
	CALL  rd_1ce
	MOV   BH,AL
str2:    MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	AND   AL,1
	AND   BH,0FEH
	OR    BH,AL
	PUSH  BX
	CALL  qma
	CALL  L03D9H
	POP   BX
	RET
;
L0245H:  CALL  zeroDS
	PUSH  BX
	CALL  L0506H
	MOV   BL,OFFSET 2
	CALL  strobes
	MOV   AH,BL
	AND   AH,0C0H
	CMP   AH,0C0H
	JNZ   L025DH
	XOR   AH,AH
L025DH:  MOV   AL,OFFSET 0BBH
	MOV   CH,OFFSET 3FH
	CALL  ao_1ce
	POP   BX
	TEST  BL,3
	JZ    L027DH
	TEST  BL,2
	JZ    L027AH
	TEST  BH,2
	JZ    L0277H
	JMP   L039EH
L0277H:  JMP   L0375H
L027AH:  JMP   L033BH
L027DH:  TEST  BH,1
	JZ    L0288H
	MOV   AX,OFFSET L01B1H
	CALL  o_1ce
L0288H:  MOV   AL,OFFSET 0BBH
	CALL  rd_1ce
	AND   AL,1FH
	CMP   AL,6
	JNZ   L029EH
	MOV   CH,OFFSET 0E0H
	MOV   AX,OFFSET L01BBH
	CALL  ao_1ce
	JMP   L03D5H
L029EH:  MOV   BL,OFFSET 0
	CALL  strobes
	OR    BX,BX
	JNZ   L02ABH
	CALL  setmode
	RET
L02ABH:  MOV   BL,OFFSET 2
	CALL  strobes
L02B0H:  MOV   AL,BH
	SHR   AL,1
L02B4H:  SHR   AL,1
L02B6H:  SHR   AL,1
L02B8H:  SHR   AL,1
	AND   AL,0FH
	JNZ   L02C7H
L02BEH:  AND   BL,10H
	OR    BYTE PTR [flag489],BL
	JMP   SHORT L02DCH
L02C7H:  DEC   AL
	JNZ   L0337H
	AND   BYTE PTR [flag489],0EFH
	MOV   AX,OFFSET L01B1H
	CALL  o_1ce
	MOV   AX,OFFSET setuex6
	CALL  o_1ce
L02DCH:  AND   BH,0FH
	CMP   BH,0BH
	JZ    L0320H
	CMP   BH,7
	JZ    L0317H
	CMP   BH,8
	JZ    L0317H
	CMP   BH,HT
	JZ    L0317H
	CMP   BH,3
	JLE   L0300H
	CMP   BH,5
	JLE   L030CH
	JMP   L03D5H
L0300H:  CALL  setgraf
	OR    AL,AL
	JNZ   L0327H
	ADD   BH,6
	JMP   SHORT L0327H
L030CH:  CALL  settext
	OR    AL,AL
	JNZ   L0327H
	MOV   BH,OFFSET 0BH
	JMP   SHORT L0327H
L0317H:  CALL  settext
	OR    AL,AL
	JNZ   L0334H
	JMP   SHORT L0327H
L0320H:  CALL  setgraf
	OR    AL,AL
	JNZ   L0334H
L0327H:  AND   BYTE PTR [L0488H],0F0H
	OR    BYTE PTR [L0488H],BH
	CALL  setmode
	RET
L0334H:  JMP   L03D5H
L0337H:  DEC   AL
	JNZ   L0371H
L033BH:  CALL  settext
	OR    AL,AL
	JNZ   L0334H
	MOV   BL,BYTE PTR [L0488H]
	AND   BL,0F0H
	OR    BL,9
	MOV   BYTE PTR [L0488H],BL
	MOV   AX,OFFSET L04B1H
	MOV   CH,OFFSET 0FEH
	CALL  ao_1ce
	CALL  setmode
	MOV   AX,OFFSET plug6
	CALL  o_1ce
	MOV   AX,OFFSET L04B8H
	CALL  o_1ce
	MOV   AX,OFFSET LDFB1H
	CALL  a_1ce
	CALL  setmode
	RET
L0371H:  DEC   AL
	JNZ   L039AH
L0375H:  CALL  setgraf
	OR    AL,AL
	JNZ   L03D5H
	MOV   BL,BYTE PTR [L0488H]
	AND   BL,0F0H
	OR    BL,0BH
	MOV   BYTE PTR [L0488H],BL
	AND   BYTE PTR [flag489],0EFH
	MOV   AX,OFFSET LFEB1H
	CALL  a_1ce
	CALL  setmode
	JMP   SHORT seqport
L039AH:  DEC   AL
	JNZ   L03D1H
L039EH:  CALL  setgraf
	OR    AL,AL
	JNZ   L03D5H
	MOV   BL,BYTE PTR [L0488H]
	AND   BL,0F0H
	OR    BL,0BH
	MOV   BYTE PTR [L0488H],BL
	MOV   AX,OFFSET L04B1H
	MOV   CH,OFFSET 0FEH
	CALL  ao_1ce
L03BBH:  MOV   AX,OFFSET L02B6H
	CALL  o_1ce
	CALL  setmode
seqport: MOV   AX,OFFSET L02B4H
L03C7H:  CALL  o_1ce
	MOV   AX,OFFSET L04B8H
	CALL  o_1ce
	RET
L03D1H:  CALL  setmode
L03D4H:  RET
L03D5H:  CALL  setmode
	RET
;
L03D9H:  CALL  zeroDS
	MOV   AX,OFFSET L03BBH
	MOV   CH,OFFSET 0E0H
	CALL  ao_1ce
	CALL  efbe1ce
	MOV   BYTE PTR [flag489],OFFSET 1
	MOV   BYTE PTR [L0449H],OFFSET 6
	CALL  settext
	MOV   AH,OFFSET 0FFH
	MOV   DX,OFFSET L03D4H
	OR    AL,AL
	JZ    L0401H
	MOV   AH,OFFSET 0FEH
L03FFH:  MOV   DL,OFFSET 0B4H
L0401H:  PUSH  AX
L0402H:  MOV   WORD PTR [crtport],DX
L0406H:  MOV   BX,OFFSET L09A4H
	PUSH  CS
	POP   ES
	CALL  setseq
	POP   AX
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	AND   AL,0F3H
	AND   AL,AH
	MOV   DL,OFFSET 0C2H
	OUT   AL,DX
	XOR   SI,SI
	CALL  setcrt
	CALL  setar
	CALL  setgr
	CALL  setpel
	MOV   CX,OFFSET L0002H
	CALL  wait
	MOV   DX,OFFSET L03C6H
	XOR   AL,AL
	OUT   AL,DX
	MOV   BX,OFFSET L047EH
	MOV   CX,OFFSET L0005H
L043AH:  CALL  L04A6H
	JNZ   L0448H
	LOOP  L043AH            ;Dec CX, loop if CX<>0.
	MOV   CH,OFFSET 3
L0443H:  MOV   AH,CH
	JMP   SHORT L0465H
	NOP
L0448H:  MOV   BX,OFFSET L0492H
	MOV   CX,OFFSET L0005H
L044EH:  CALL  L04A6H
	JNZ   L045EH
	LOOP  L044EH            ;Dec CX, loop if CX<>0.
	OR    BYTE PTR [flag489],6
	MOV   CH,OFFSET 1
	JMP   SHORT L0443H
L045EH:  OR    BYTE PTR [flag489],6
crtport: DB    0B4H,1
L0465H:  MOV   CH,OFFSET 0E0H
	DB    0B0H,0BBH,0E8H,16H,1FH,8AH
	DB    0DCH,0B8H
	MOV   AL,BYTE PTR [LE8DFH]
magic:   OUT  AX,1EH
	CALL  L06D1H
	MOV   AX,OFFSET L10BEH
	CALL  o_1ce
	RET
L047EH:  ADC   AL,14H
	ADC   AL,10H
	SUB   AX,OFFSET 1414H
swid_qm: ADD   BYTE PTR [SI],DL
L0487H:  SUB   AX,OFFSET L0014H
L048AH:  DB    14H
	ADC   AL,2DH
	ADD   BYTE PTR [DI],CH
	SUB   AX,OFFSET 2DH
L0492H:  ADD   AL,12H
	ADD   AL,10H
	PUSH  DS
	ADC   AL,BYTE PTR [SI]
	ADD   BYTE PTR [SI],AL
	SUB   AX,OFFSET L0004H
	ADD   AL,16H
	ADC   AX,OFFSET chksum
	ADD   BYTE PTR [BX+SI],AL
	ADC   BYTE PTR [BP+SI]+seqport,BH
L04A9H:  DB    0B0H
plug11:  DB    1,0EEH            ;set to CS by init
	INC   DX
	IN    AL,DX
	OR    AL,20H
	OUT   AL,DX
L04B1H:  MOV   AX,OFFSET L03B5H
	CALL  o_1ce
	MOV   DX,OFFSET L03C8H
	XOR   AL,AL
	OUT   AL,DX
	INC   DX
	MOV   AL,BYTE PTR CS:[BX]
	INC   BX
	OUT   AL,DX
	MOV   AL,BYTE PTR CS:[BX]
	INC   BX
	OUT   AL,DX
	MOV   AL,BYTE PTR CS:[BX]
	INC   BX
	OUT   AL,DX
	PUSH  CX
	MOV   CX,OFFSET extport
L04D1H:  MOV   AX,OFFSET L0001H
	LOOP  L04D1H            ;Dec CX, loop if CX<>0.
	POP   CX
	MOV   DL,OFFSET 0C2H
	IN    AL,DX
	MOV   AH,AL
	PUSH  AX
	MOV   AX,OFFSET LFCB5H
	CALL  a_1ce
	MOV   DX,OFFSET seqport
	MOV   AL,OFFSET 1
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	AND   AL,0DFH
	OUT   AL,DX
	POP   AX
	MOV   DX,OFFSET L03C8H
	XOR   AL,AL
	OUT   AL,DX
	INC   DX
	INC   BX
	OUT   AL,DX
	NOP
	NOP
	OUT   AL,DX
	NOP
	NOP
	OUT   AL,DX
	AND   AH,10H
L0501H:  XOR   AH,BYTE PTR CS:[BX]-1
	RET
;
L0506H:  CALL  L051FH
	RET
;
L050AH:  MOV   DX,OFFSET L023FH
	CALL  L0512H
	MOV   DL,OFFSET 3BH
;
L0512H:  CLI                     ;Disable interupts.
	IN    AL,DX
	NOP
	NOP
	IN    AL,DX
	SUB   DL,3
	MOV   AL,AH
	OUT   AL,DX
	STI                     ;Enable interupts.
	RET
;
L051FH:  MOV   AX,OFFSET L10A6H
	CALL  o_1ce
	XOR   AH,AH
	CALL  L050AH
	MOV   AH,OFFSET 20H
	CALL  L050AH
	MOV   AX,OFFSET LEFA6H
	CALL  a_1ce
	RET
;
ggg:     MOV   BL,OFFSET 3
	CALL  strobes
	XOR   BL,BL
	AND   BH,0F0H
	CMP   BH,0
	JG    gggx
	MOV   BL,OFFSET 2
	CALL  strobes
	TEST  BL,1
	JZ    gggx
	MOV   CX,OFFSET LB800H  ;assume cga????
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	TEST   AL,1             ;mono/color
	JNZ   ggg1              ;if color
	MOV   CH,OFFSET 0B0H    ;set base to mono
ggg1:    MOV   ES,CX             ;es = base address
	MOV   AX,CS
	MOV   DS,AX             ;ds = cs
	MOV   DI,OFFSET L1000H
	MOV   SI,OFFSET ggg_a
	MOV   BH,CH
	MOV   CX,OFFSET plug4
	NOP
	CLI                     ;Disable interupts.
	CLD                     ;Set forward direction flag.
ggg2:    LODSB                   ;Load AL with byt at (SI)+-.
	STOSB                   ;Store byt in AL in (DI)+-.
	LOOP  ggg2              ;Dec CX, loop if CX<>0.
	STI                     ;Enable interupts.
	CMP   BH,0B8H
	JNZ   ggg3
	CALL  DWORD PTR CS:[do_cga]
	JMP   SHORT ggg4
ggg3:    CALL  DWORD PTR CS:[do_mono]
ggg4:    STI                     ;Enable interupts.
gggx:    RET
do_cga:  DW    L1000H,LB800H
do_mono: DW    L1000H,LB000H
ggg_a:   DW    mmm,L0002H
	XOR   CL,CL
	MOV   BP,CX
	MOV   DI,OFFSET aaa8
	MOV   SI,DI
	MOV   CX,OFFSET L1000H
	REPZ MOVSW              ;Move wrd, (SI)+- to (DI)+-.
	CALL  L05A6H
	DB    0CBH              ;*** FAR RETURN ***
;
L05A6H:  MOV   AL,OFFSET 0B7H
	MOV   DX,OFFSET esrport
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	TEST   AL,1
	JZ    L060EH
	XOR   BL,BL
	CALL  set1ce
	MOV   SI,OFFSET L0635H
	SUB   SI,OFFSET ggg_a
L05BEH:  ADD   SI,OFFSET L1000H
L05C2H:  PUSH  SI
	CALL  L060FH
	MOV   DX,OFFSET L0008H
	CALL  L0652H
	OR    DX,DX
	JNZ   L05FAH
	INC   SI
	MOV   AL,BYTE PTR CS:[SI]
	OR    AL,AL
	JZ    L0607H
	CALL  L060FH
	MOV   DX,OFFSET L0008H
	CALL  L0652H
	OR    DX,DX
	JNZ   L05FAH
	INC   SI
	MOV   AL,BYTE PTR CS:[SI]
	OR    AL,AL
	JZ    L0607H
	CALL  L060FH
	MOV   DX,OFFSET L0008H
	CALL  L0652H
	OR    DX,DX
	JZ    L0607H
L05FAH:  POP   SI
	ADD   SI,3
	MOV   AL,BYTE PTR CS:[SI]
	OR    AL,AL
L0603H:  JZ    L0609H
	JMP   SHORT L05C2H
L0607H:  POP   SI
	RET
L0609H:  MOV   BL,OFFSET 10H
	CALL  set1ce
L060EH:  RET
;
L060FH:  MOV   DX,OFFSET esrport
	MOV   AL,OFFSET 0B9H
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	MOV   AH,BYTE PTR CS:[SI]
	AND   AX,OFFSET 30CFH
	OR    AH,AL
	MOV   AL,OFFSET 0B9H
	DEC   DX
	OUT   AX,DX
	MOV   AL,OFFSET 0A3H
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	MOV   AH,BYTE PTR CS:[SI]
	AND   AX,OFFSET 07F8H
	OR    AH,AL
	MOV   AL,OFFSET 0A3H
	DEC   DX
	OUT   AX,DX
	RET
L0635H:  XOR   AL,35H
	ADD   AX,WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
;
set1ce:  MOV   DX,OFFSET esrport
	MOV   AL,OFFSET 0A0H
	OUT   AL,DX             ;out(1ce) = a0
	INC   DX
	IN    AL,DX             ;dx = in(1cf)
	AND   AL,0EFH
	XOR   BL,10H
	OR    AL,BL
	MOV   AH,AL
	MOV   AL,OFFSET 0A0H
	DEC   DX
	OUT   AX,DX             ;out(1ce) = something:a0
	RET
;
L0652H:  PUSH  SI
L0653H:  MOV   DI,OFFSET aaa8
	MOV   SI,DI
	CLD                     ;Set forward direction flag.
	CALL  L0679H
	CMP   AL,2
	JGE   L0667H
	MOV   CX,OFFSET L1000H
	REPZ CMPSW              ;Compare strings.
	JMP   SHORT L0670H
L0667H:  DB    066H
	MOV   CX,OFFSET L0800H
	ADD   BYTE PTR [BX+SI],AL
	DB    0F3H
	DB    066H
	CMPSW                   ;Compare strings.
L0670H:  OR    CX,CX
	JNZ   L0677H
	DEC   DX
	JNZ   L0653H
L0677H:  POP   SI
	RET
;
L0679H:  PUSHF
	PUSHF
	POP   AX
	AND   AH,0FH
	PUSH  AX
	POPF
	PUSHF
	POP   AX
	TEST  AH,0F0H
	JNZ   L0698H
	OR    AH,0F0H
	PUSH  AX
	POPF
	PUSHF
	POP   AX
	TEST  AH,0F0H
	JZ    L0698H
	POPF
	MOV   AL,OFFSET 2
	RET
L0698H:  POPF
	MOV   AL,OFFSET 1
	RET
;
tst:     MOV   AL,OFFSET 0B7H
	CALL  rd_1ce
	TEST   AL,1
	JNZ   tst1
	RET
tst1:    MOV   BL,OFFSET 2
	CALL  strobes
	TEST  BL,8
	JZ    tst2
	MOV   AX,OFFSET L40B9H
	CALL  o_1ce
tst2:    MOV   DX,OFFSET miscoutr
	IN    AL,DX
	MOV   DL,OFFSET 0D4H
	TEST   AL,1
	JZ    tst3
	MOV   DL,OFFSET 0B4H
tst3:    CALL  cqm
	OR    AL,AL
	JZ    tst4
	MOV   AX,OFFSET setuex5
	CALL  o_1ce
	RET
tst4:    RET
;
L06D1H:  AND   BL,1FH
	TEST  BL,19H
	JZ    L06ECH
	MOV   WORD PTR [plug10],OFFSET data1
	MOV   WORD PTR [plug11],CS
	TEST  BYTE PTR [flag489],2
	JNZ   L06ECH
	JMP   SHORT L0705H
L06ECH:  MOV   WORD PTR [L0487H],OFFSET LFB62H
	MOV   BYTE PTR [L048AH],OFFSET 0DH
	CALL  setgraf
	OR    AL,AL
	JZ    L071CH
	MOV   BYTE PTR [L0488H],OFFSET 0F9H
	JMP   SHORT L071CH
L0705H:  MOV   WORD PTR [L0487H],OFFSET LF960H
	MOV   BYTE PTR [L048AH],OFFSET 0BH
	CALL  settext
	OR    AL,AL
	JZ    L071CH
	MOV   BYTE PTR [L0488H],OFFSET 0FBH
L071CH:  OR    BYTE PTR [flag489],10H
	RET
;
setmode: CALL  zeroDS
	MOV   BL,BYTE PTR [L0488H]
	AND   BX,0FH
	MOV   AH,BYTE PTR CS:[BX]+tbl1
	MOV   AL,OFFSET 0BDH
	MOV   CH,OFFSET 0FH
	CALL  ao_1ce
	SHL   BX,1
	JMP   WORD PTR CS:[BX]+tbl2
tbl1:    DB    0,80H,40H,0C0H,20H,0A0H
	DB    60H,0E0H,10H,90H,50H,0D0H
	DB    30H,0B0H,70H,0F0H
tbl2:    DW    seti,seti,seti
	DW    seti,sete,sete
	DW    setf,setf,setf
	DW    setf,setg,setg
	DW    setqm_22,setqm_22,setqm_22
	DW    setqm_22
seti:    MOV   AL,OFFSET 1
seth:    CALL  setvmod
	CALL  set410
	CALL  setmono
	RET
sete:    XOR   AL,AL
	CALL  setvmod
	CALL  setmonox
	CALL  setc
	RET
setf:    MOV   AL,OFFSET 1
	CALL  setvmod
	MOV   AL,BYTE PTR [flag489]
	PUSH  AX
	CALL  setmono
	POP   AX
	MOV   BYTE PTR [flag489],AL
	CALL  set410
	RET
setg:    XOR   AL,AL
	CALL  setvmod
	MOV   AL,BYTE PTR [flag489]
	PUSH  AX
	CALL  setc
	POP   AX
	MOV   BYTE PTR [flag489],AL
	CALL  setmonox
	RET
setqm_22:CALL  setqm_2
	CALL  setqm_2
	RET
;
setmono: OR    BYTE PTR [crtflag],30H
	MOV   WORD PTR [crtport],OFFSET crt_mono
	MOV   AX,OFFSET L0007H
	INT   42H               ;User defined interupt.
	RET
;
setc:    AND   BYTE PTR [crtflag],0CFH
	OR    BYTE PTR [crtflag],20H
	MOV   WORD PTR [crtport],OFFSET L03D4H
	MOV   AX,OFFSET start
	INT   42H               ;User defined interupt.
	RET
setd:    AND   BYTE PTR [crtflag],0CFH
	OR    BYTE PTR [crtflag],10H
	MOV   AX,OFFSET L0001H
	INT   42H               ;User defined interupt.
	RET
;
setmonox:OR    BYTE PTR [crtflag],30H
	MOV   WORD PTR [crtport],OFFSET crt_mono
	MOV   AX,OFFSET L0007H
	INT   6DH               ;User defined interupt.
	RET
;
set410:  AND   BYTE PTR [crtflag],0CFH
	OR    BYTE PTR [crtflag],20H
	MOV   WORD PTR [crtport],OFFSET L03D4H;crt register port
	MOV   AX,OFFSET start
	INT   6DH               ;User defined interupt.
	RET
setb:    AND   BYTE PTR [crtflag],0CFH
	OR    BYTE PTR [crtflag],10H
	MOV   AX,OFFSET L0001H
	INT   6DH               ;User defined interupt.
	RET
modeinfo:DB    28H,18H,8,0,8,9
	DB    3,0,2,63H,2DH,27H
	DB    28H,90H,2BH,0A0H,0BFH,1FH
	DB    0,0C7H,6,7,0,0
	DB    0,0,9CH,8EH,8FH,14H
	DB    1FH,96H,0B9H,0A3H,0FFH
L0847H:  DB    0,1,2,3,4,5
	DB    6,7,10H,11H,12H,13H
	DB    14H,15H,16H,17H,8,0
	DB    0FH,0,0,0,0,0
	DB    0,10H,0EH,0,0FFH,28H
	DB    18H,8,0,8,9,3
	DB    0,2,63H,2DH,27H,28H
	DB    90H,2BH,0A0H,0BFH,1FH,0
	DB    0C7H,6,7,0,0,0
	DB    0,9CH,8EH,8FH,14H,1FH
	DB    96H,0B9H,0A3H,0FFH,0,1
	DB    2,3,4,5,6,7
	DB    10H,11H,12H,13H,14H,15H
	DB    16H,17H,8,0,0FH,0
	DB    0,0,0,0,0,10H
	DB    0EH,0,0FFH,50H,18H,8
	DB    0,10H,1,3,0,2
	DB    63H,5FH,4FH,50H
L08B1H:  DB    82H,55H,81H,0BFH,1FH
L08B6H:  DB    0,0C7H
L08B8H:  DB    6,7,0,0,0,0
L08BEH:  DB    9CH,8EH,8FH,28H,1FH,96H
	DB    0B9H,0A3H,0FFH,0,1,2
	DB    3,4,5,6,7,10H
	DB    11H,12H,13H,14H,15H,16H
	DB    17H,8,0,0FH,0,0
	DB    0,0,0,0,10H,0EH
	DB    0,0FFH,50H,18H,8,0
	DB    10H,1,3,0,2,63H
	DB    5FH,4FH,50H,82H,55H,81H
	DB    0BFH,1FH,0,0C7H,6,7
	DB    0,0,0,0,9CH,8EH
	DB    8FH,28H,1FH,96H,0B9H,0A3H
	DB    0FFH,0,1,2,3,4
	DB    5,6,7,10H,11H,12H
	DB    13H,14H,15H,16H,17H,8
	DB    0,0FH,0,0,0,0
	DB    0,0,10H,0EH,0,0FFH
	DB    28H,18H,8,0,40H,9
	DB    3,0,2,63H,2DH,27H
	DB    28H,90H,2BH,80H,0BFH,1FH
	DB    0,0C1H,0,0,0,0
	DB    0,0,9CH,8EH,8FH,14H
	DB    0,96H,0B9H,0A2H,0FFH,0
	DB    13H,15H,17H,2,4,6
	DB    7,10H,11H,12H,13H,14H
	DB    15H,16H,17H,1,0,3
	DB    0,0,0,0,0,0
	DB    30H,0FH,0,0FFH,28H,18H
	DB    8,0,40H,9,3,0
	DB    2,63H,2DH,27H,28H,90H
	DB    2BH,80H,0BFH,1FH,0,0C1H
	DB    0,0,0,0
L097CH:  DB    0,0,9CH,8EH,8FH,14H
	DB    0,96H,0B9H,0A2H,0FFH,0
	DB    13H,15H,17H,2,4,6
	DB    7,10H,11H,12H,13H,14H
	DB    15H,16H,17H,1,0,3
	DB    0,0,0,0,0,0
	DB    30H,0FH,0,0FFH
L09A4H:  DB    50H,18H,8,0,40H,1
	DB    1,0,6,63H,5FH,4FH
	DB    50H,82H,54H,80H,0BFH,1FH
	DB    0,0C1H,0,0,0,0
	DB    0,0,9CH,8EH,8FH,28H
	DB    0,96H,0B9H,0C2H,0FFH,0
	DB    17H,17H,17H,17H,17H,17H
	DB    17H,17H,17H,17H,17H,17H
	DB    17H,17H,17H,1,0,1
	DB    0,0,0,0,0,0
	DB    0,0DH,0,0FFH,50H,18H
	DB    0EH,0,10H,0,3,0
	DB    3,0A6H,5FH,4FH,50H,82H
	DB    55H,81H,0BFH,1FH,0,4DH
	DB    0BH,0CH,0,0,0,0
	DB    83H,85H,5DH,28H,0DH,63H
	DB    0BAH,0A3H,0FFH,0,8,8
	DB    8,8,8,8,8,10H
	DB    18H,18H,18H,18H,18H,18H
	DB    18H,0EH,0,0FH,8,0
	DB    0,0,0,0,10H,0AH
	DB    0,0FFH,50H,18H,10H,0
	DB    10H,1,3,0,2,62H
	DB    5FH,4FH,50H,82H,55H,81H
	DB    0BFH,1FH,0,4FH,0DH,0EH
	DB    0,0,0,0,9CH,8EH
L0A40H:  DB    8FH,28H,0FH,96H,0B9H,0A3H
	DB    0FFH,0,8,8,8,8
	DB    8,8,8,10H,18H,18H
	DB    18H,18H,18H,18H,18H,0AH
	DB    0,0FH,0,0,0,0
	DB    0,0,10H,0AH,0,0FFH
	DB    28H,18H,10H,0,8,9
	DB    3,0,2,63H,2DH,27H
	DB    28H,90H,2BH,0A0H,0BFH,1FH
	DB    0,4FH,0DH,0EH,0,0
	DB    0,0,9CH,8EH,8FH,14H
	DB    1FH,96H,0B9H,0A3H,0FFH,0
	DB    1,2,3,4,5,14H
	DB    7,38H,39H,3AH,3BH,3CH
	DB    3DH,3EH,3FH,8,0,0FH
	DB    0,0,0,0,0,0
	DB    10H,0EH,0,0FFH,50H,18H
	DB    10H,0,10H,1,3,0
	DB    2,63H,60H,4FH,50H,82H
	DB    56H,82H,0BFH,1FH,0,4FH
	DB    0DH,0EH,0,0,0,0
	DB    9CH,8EH
L0AC0H:  DB    8FH,28H,1FH,96H,0B9H,0A3H
	DB    0FFH,0,1,2,3,4
	DB    5,14H,7,38H,39H,3AH
	DB    3BH,3CH,3DH,3EH,3FH,8
	DB    0,0FH,0,0,0,0
	DB    0,0,10H,0EH,0,0FFH
	DB    50H,0,0,0,0,29H
	DB    0FH,0,6,62H,5FH,4FH
	DB    50H,82H,55H,81H,0BFH,1FH
	DB    0,40H,0,0,0
L0AFBH:  DB    0,0,0,9CH,8EH,8FH
	DB    28H,1FH,96H,0B9H,0E3H,0FFH
	DB    0,0,0,0,0,0
	DB    0,0,0,0,0,0
	DB    0,0,0,3FH,1,0
	DB    0FH,0,0,0,0FH,0
	DB    0,8,5,0FH,0FFH,50H
	DB    0,0,0,0,29H,0FH
	DB    0,6,63H,5FH,4FH,50H
	DB    82H,55H,81H,0BFH,1FH,0
	DB    40H,0,0,0,0,0
	DB    0,9CH,8EH,8FH,28H,1FH
	DB    96H,0B9H,0E3H,0FFH,0,0
	DB    0,0,0,0,0,0
	DB    0,0,0,0,0,0
	DB    0,3FH,1,0,0FH,0
	DB    0,0,0FH,0,0,8
	DB    5,0FH,0FFH,28H,18H,8
	DB    0,20H,9,0FH,0,6
	DB    63H,2DH,27H,28H,90H,2BH
	DB    80H,0BFH,1FH,0,0C0H,0
	DB    0,0,0,0,0,9CH
	DB    8EH,8FH,14H,0,96H,0B9H
	DB    0E3H,0FFH,0,1,2,3
	DB    4,5,6,7,10H,11H
	DB    12H,13H,14H,15H,16H,17H
	DB    1,0,0FH,0,0,0
	DB    0,0,0,0,5,0FH
	DB    0FFH,50H,18H,8,0,40H
	DB    1,0FH,0,6,63H,5FH
	DB    4FH,50H,82H,54H,80H,0BFH
	DB    1FH,0,0C0H
L0BB8H:  DB    0,0,0,0,0,0
	DB    9CH,8EH,8FH,28H,0,96H
	DB    0B9H,0E3H,0FFH,0,1,2
	DB    3,4,5,6,7,10H
	DB    11H,12H,13H,14H,15H,16H
	DB    17H,1,0,0FH,0,0
	DB    0,0,0,0,0,5
	DB    0FH,0FFH,50H,18H,0EH,0
	DB    80H,1,0FH,0,6,0A2H
	DB    5FH,4FH,50H,82H,54H,80H
	DB    0BFH,1FH,0,40H,0,0
	DB    0,0,0,0,83H,85H
	DB    5DH,28H,0FH,63H,0BAH,0E3H
	DB    0FFH,0,8,0,0,18H
	DB    18H,0,0,0,8,0
	DB    0,0,18H,0,0,0BH
	DB    0,5,0,0,0,0
	DB    0,0,0,5,5,0FFH
	DB    50H,18H,0EH,0,80H,1
	DB    0FH,0,6,0A3H,5FH,4FH
	DB    50H,82H,54H,80H,0BFH,1FH
	DB    0,40H,0,0,0,0
	DB    0,0,83H,85H,5DH,28H
	DB    0FH,63H,0BAH,0E3H,0FFH,0
	DB    1,2,3,4,5,14H
	DB    7,38H,39H,3AH,3BH,3CH
	DB    3DH,3EH,3FH,1,0,0FH
	DB    0,0,0,0,0,0
	DB    0,5,0FH,0FFH,50H,18H
	DB    0EH,0,80H,1,0FH,0
	DB    6,0A2H,5FH,4FH,50H,82H
	DB    54H,80H,0BFH,1FH,0,40H
	DB    0,0,0,0,0,0
	DB    83H,85H,5DH,28H,0FH,63H
	DB    0BAH,0E3H,0FFH,0,8,0
	DB    0,18H,18H,0,0,0
	DB    8,0,0,0,18H,0
	DB    0,0BH,0,5,0,0
	DB    0,0,0,0,0,5
	DB    5,0FFH,50H,18H,0EH,0
	DB    80H,1,0FH,0,6,0A3H
	DB    5FH,4FH,50H,82H,54H,80H
	DB    0BFH,1FH,0,40H,0,0
	DB    0,0,0,0,83H,85H
	DB    5DH,28H,0FH,63H,0BAH,0E3H
	DB    0FFH,0,1,2,3,4
	DB    5,14H,7,38H,39H,3AH
	DB    3BH,3CH,3DH,3EH,3FH,1
	DB    0,0FH,0,0,0,0
	DB    0,0,0,5,0FH,0FFH
	DB    28H,18H,0EH,0,8,9
	DB    3,0,2,0A3H,2DH,27H
	DB    28H,90H,2BH,0A0H,0BFH,1FH
	DB    0,4DH,0BH,0CH,0,0
	DB    0,0,83H,85H
L0D00H:  DB    5DH,14H,1FH,63H,0BAH,0A3H
	DB    0FFH,0,1,2,3,4
	DB    5,14H,7,38H,39H,3AH
	DB    3BH,3CH,3DH,3EH,3FH,8
	DB    0,0FH,0,0,0,0
	DB    0,0,10H,0EH,0,0FFH
	DB    28H,18H,0EH,0,8,9
	DB    3,0,2,0A3H,2DH,27H
	DB    28H,90H,2BH,0A0H,0BFH,1FH
	DB    0,4DH,0BH,0CH,0,0
	DB    0,0,83H,85H,5DH,14H
	DB    1FH,63H,0BAH,0A3H,0FFH,0
	DB    1,2,3,4,5,14H
	DB    7,38H,39H,3AH,3BH,3CH
	DB    3DH,3EH,3FH,8,0,0FH
	DB    0,0,0,0,0,0
	DB    10H,0EH,0,0FFH,50H,18H
	DB    0EH,0,10H,1,3,0
	DB    2,0A3H,5FH,4FH,50H,82H
	DB    55H,81H,0BFH,1FH,0,4DH
	DB    0BH,0CH,0,0,0,0
	DB    83H,85H,5DH,28H,1FH,63H
	DB    0BAH,0A3H,0FFH,0,1,2
	DB    3,4,5,14H,7,38H
	DB    39H,3AH,3BH,3CH,3DH,3EH
	DB    3FH,8,0,0FH,0,0
	DB    0,0,0,0,10H,0EH
	DB    0,0FFH,50H,18H,0EH,0
	DB    10H,1,3,0,2,0A3H
	DB    5FH,4FH,50H,82H,55H,81H
	DB    0BFH,1FH,0,4DH,0BH,0CH
	DB    0,0,0,0,83H,85H
	DB    5DH,28H,1FH,63H,0BAH,0A3H
	DB    0FFH,0,1,2,3,4
	DB    5,14H,7,38H,39H,3AH
	DB    3BH,3CH,3DH,3EH,3FH,8
	DB    0,0FH,0,0,0,0
	DB    0,0,10H,0EH,0,0FFH
	DB    28H,18H,10H,0,8,8
	DB    3,0,2,67H,2DH,27H
	DB    28H,90H,2BH,0A0H,0BFH,1FH
	DB    0,4FH,0DH,0EH,0,0
	DB    0,0,9CH,8EH,8FH,14H
	DB    1FH,96H
L0E04H:  DB    0B9H,0A3H
L0E06H:  DB    0FFH,0,1,2,3,4
	DB    5,14H
L0E0EH:  DB    7,38H,39H,3AH,3BH,3CH
	DB    3DH,3EH,3FH,0CH
L0E18H:  DB    0,0FH,8,0,0,0
	DB    0,0
L0E20H:  DB    10H,0EH,0,0FFH,50H,18H
	DB    10H,0,10H,0,3,0
	DB    2,67H,5FH,4FH,50H,82H
	DB    55H,81H,0BFH,1FH,0,4FH
	DB    0DH,0EH,0,0,0,0
	DB    9CH,8EH,8FH,28H,1FH,96H
	DB    0B9H,0A3H,0FFH,0,1,2
	DB    3,4,5,14H,7,38H
	DB    39H,3AH,3BH,3CH,3DH,3EH
	DB    3FH,0CH,0,0FH,8,0
	DB    0,0,0,0,10H,0EH
	DB    0,0FFH,50H,18H,10H,0
	DB    10H,0,3,0,2,66H
	DB    5FH,4FH,50H,82H,55H,81H
	DB    0BFH,1FH,0,4FH,0DH,0EH
	DB    0,0,0,0,9CH,8EH
	DB    8FH,28H,0FH,96H,0B9H,0A3H
	DB    0FFH,0,8,8,8,8
	DB    8,8,8,10H,18H,18H
	DB    18H,18H,18H,18H,18H,0EH
	DB    0,0FH,8,0,0,0
	DB    0,0,10H,0AH,0,0FFH
	DB    50H,1DH,10H,0,0A0H,1
	DB    0FH,0,6,0E3H,5FH,4FH
	DB    50H,82H,54H,80H,0BH,3EH
	DB    0,40H,0,0,0,0
	DB    0,0,0EAH,8CH,0DFH,28H
	DB    0,0E7H,4,0C3H,0FFH,0
	DB    3FH,3FH,3FH,3FH,3FH,3FH
	DB    3FH,3FH,3FH,3FH,3FH,3FH
	DB    3FH,3FH,3FH,1,0,0FH
	DB    0,0,0,0,0,0
	DB    0,5,1,0FFH,50H,1DH
	DB    10H,0
L0EE8H:  DB    0A0H,1,0FH,0,6,0E3H
	DB    5FH,4FH,50H,82H,54H,80H
	DB    0BH,3EH,0,40H,0,0
	DB    0,0,0,0,0EAH,8CH
	DB    0DFH
L0F01H:  DB    28H
L0F02H:  DB    0,0E7H,4,0E3H
L0F06H:  DB    0FFH,0,1,2,3,4
	DB    5,14H,7,38H,39H,3AH
	DB    3BH,3CH,3DH,3EH,3FH,1
	DB    0,0FH,0,0,0,0
	DB    0,0,0,5,0FH,0FFH
	DB    28H,18H,8,0,20H,1
	DB    0FH,0,0EH,63H,5FH,4FH
	DB    50H,82H,54H,80H,0BFH,1FH
	DB    0,41H,0,0,0,0
	DB    0,0,9CH,8EH,8FH,28H
	DB    40H,96H,0B9H,0A3H,0FFH,0
	DB    1,2,3,4,5,6
	DB    7,8,9,0AH,0BH,0CH
	DB    0DH,0EH,0FH,41H,0,0FH
	DB    0,0,0,0,0,0
	DB    40H,5,0FH,0FFH,50H,1DH
	DB    10H,0,20H,1,3,0
	DB    2,0E3H,5FH,4FH,50H,82H
	DB    57H,82H,8,3EH,0,4FH
	DB    0DH,0EH,0,0,0,0
	DB    0EAH,8FH,0DFH,28H,0,0E7H
	DB    4,0A3H,0FFH,0,1,2
	DB    3,4,5,14H,7,38H
	DB    39H,3AH,3BH,3CH,3DH,3EH
	DB    3FH,8,0,0FH,0,0
	DB    0,0,0,0,10H,0EH
	DB    0,0FFH,84H,18H,10H,0
	DB    20H,1,3,0,42H,62H
	DB    9BH,83H,86H,9FH,8AH,1BH
	DB    0BFH,1FH,0,4FH,0DH,0EH
	DB    0,0,0,0,9CH,8EH
	DB    8FH,42H,0FH,96H,0B9H,0A3H
	DB    0FFH,0,8,8,8,8
	DB    8,8,8,10H,18H,18H
	DB    18H,18H,18H,18H,18H,0AH
	DB    0,0FH,0,0,80H,0
	DB    0,0,10H,0AH,0,0FFH
	DB    84H,18H,10H,0,20H,1
	DB    3,0,42H,63H,9BH,83H
	DB    86H,9FH,8AH,1BH,0BFH,1FH
	DB    0,4FH,0DH,0EH,0,0
	DB    0,0,9CH,8EH
L1000H:  DB    8FH,42H,0FH,96H,0B9H
L1005H:  DB    0A3H,0FFH,0,1,2,3
	DB    4,5,14H,7,38H,39H
	DB    3AH,3BH,3CH,3DH,3EH,3FH
	DB    8,0,0FH,0,0,80H
	DB    0,0,0,10H,0EH,0
	DB    0FFH,84H,2BH,8,0,40H
	DB    1,3,0,43H,0A2H,9BH
	DB    83H,86H,9FH,8AH,1BH,0BFH
	DB    1FH,0,47H,6,7,0
	DB    0,0,0,83H,85H,5FH
	DB    42H,7,63H,0BAH,0A3H,0FFH
	DB    0,8,8,8,8,8
	DB    8,8,10H,18H,18H,18H
	DB    18H,18H,18H,18H,0EH,0
	DB    0FH,0,0,0C0H,0,0
	DB    0,10H,0AH,0,0FFH,84H
	DB    2BH,8,0,40H,1,3
	DB    0,42H,0A3H,9BH,83H,86H
	DB    9FH,8AH,1BH,0BFH,1FH,0
	DB    47H,6,7,0,0,0
	DB    0,83H,85H,5FH,42H,7
	DB    63H,0BAH,0A3H,0FFH,0,1
	DB    2,3,4,5,14H,7
	DB    38H,39H,3AH,3BH,3CH,3DH
	DB    3EH,3FH,8,0,0FH,0
	DB    0,0C0H,0,0,0,10H
	DB    0EH,0,0FFH,28H,18H
L10A6H:  DB    8,0,8,9,83H,0
	DB    2,63H,2DH,27H,28H,90H
	DB    2CH,0A0H,0DFH,10H,0,47H
	DB    6,7,0,0,0,0
L10BEH:  DB    0CEH,8FH,0C7H,14H,1FH,0CFH
	DB    0DCH,0A7H,0FFH,0,1,2
	DB    3,4,5,6,7,10H
	DB    11H,12H,13H,14H,15H,16H
	DB    17H,8,0,0FH,0,0
	DB    0,0,0,0,10H,0EH
	DB    0,0FFH,50H,18H,8,0
	DB    10H,1,83H,0,2,63H
	DB    5FH,4FH,50H,82H,57H,83H
	DB    0DFH,10H,0,47H,6,7
	DB    0,0,0,0,0CEH,8FH
	DB    0C7H,28H,1FH,0CFH,0DCH,0A7H
	DB    0FFH,0,1,2,3,4
	DB    5,6,7,10H,11H,12H
	DB    13H,14H,15H,16H,17H,8
	DB    0,0FH,0,0,0,0
	DB    0,0,10H,0EH,0,0FFH
	DB    50H,18H,10H,0,80H,1
	DB    0FH,0,0AH,63H,5FH,4FH
	DB    50H,82H,54H,80H,0BFH,1FH
	DB    0,40H,0,0,0,0
	DB    0,0,9CH,8EH,8FH,28H
	DB    1FH,96H,0B9H,0E3H,0FFH,0
	DB    1,2,3,4,5,6
	DB    7,8,9,0AH,0BH,0CH
	DB    0DH,0EH,0FH,1,0,0FH
	DB    0,40H,0,0,0,0
	DB    0,5,0FH,0FFH,50H,1DH
	DB    10H,0,0A0H,1,0FH,0
	DB    0AH,0E3H,5FH,4FH,50H,82H
	DB    54H,80H,0BH,3EH,0,40H
	DB    0,0,0,0,0,0
	DB    0EAH,8CH,0DFH,28H,0,0E7H
	DB    4,0E3H
L1186H:  DB    0FFH,0,1,2,3,4
	DB    5,6,7,8,9,0AH
	DB    0BH,0CH,0DH,0EH,0FH,1
	DB    0,0FH,0,80H,0,0
	DB    0,0,0,5,0FH,0FFH
	DB    80H,2FH,10H,0,80H,1
	DB    0FH,0C0H,6,2FH,4AH,3FH
	DB    40H,8CH,43H,0EH,32H,0FDH
	DB    0,60H,0,0,0,0
	DB    0,0,6,8FH,0FFH,20H
	DB    0FH,5,2DH,0E3H,0FFH,0
	DB    1,2,3,4,5,6
L11CEH:  DB    7,8,9,0AH,0BH,0CH
	DB    0DH,0EH,0FH,1,0,0FH
	DB    0,10H,0,0,0,0
	DB    0,5,0FH,0FFH,80H,2FH
	DB    10H,0,80H,1,0FH,0C0H
	DB    6,2FH,4AH,3FH,40H,8CH
	DB    43H,0EH,32H,0FDH,0,60H
	DB    0,0,0,0,0,0
	DB    6,8FH,0FFH
L1201H:  DB    20H,0FH,5,2DH,0E3H,0FFH
	DB    0,1,2
L120AH:  DB    3,4,5,6,7,8
	DB    9,0AH,0BH,0CH,0DH,0EH
	DB    0FH,1,0,0FH,0,20H
	DB    0,20H,0,0,0,5
	DB    0FH,0FFH,50H,1DH,10H,0
	DB    0A0H,1,0FH,0,0C6H,0E7H
	DB    65H,4FH,50H,88H,55H,9AH
	DB    9,3EH,0,40H,0,0
	DB    0,0,0,0,0E8H,8BH
	DB    0DFH,28H,0,0E7H,4,0C3H
	DB    0FFH,0,3FH,3FH,3FH,3FH
	DB    3FH,3FH,3FH,3FH,3FH,3FH
	DB    3FH,3FH,3FH,3FH,3FH,1
	DB    0,0FH,0,0,0,0
	DB    0,0,0,5,1,0FFH
L1264H:  DB    50H,1DH,10H,0,0A0H,1
	DB    0FH,0,0C6H,0E7H,65H,4FH
	DB    50H,88H,55H,9AH,9,3EH
	DB    0,40H,0,0,0,0
	DB    0,0,0E8H,8BH,0DFH,28H
	DB    0,0E7H,4,0E3H
L1286H:  DB    0FFH,0,1,2,3,4
	DB    5,14H,7,38H,39H,3AH
	DB    3BH,3CH,3DH,3EH,3FH,1
	DB    0,0FH,0,0,0,0
	DB    0,0,0,5,0FH,0FFH
	DB    50H,1DH,10H,0,20H,1
	DB    3,0,0C2H,0E7H,65H,4FH
	DB    50H,88H,55H,9AH,9,3EH
	DB    0,4FH,0DH,0EH,0,0
	DB    0,0,0E8H,8BH,0DFH,28H
	DB    0,0E7H,4,0A3H,0FFH,0
	DB    1,2,3,4,5,14H
	DB    7,38H,39H,3AH,3BH,3CH
	DB    3DH,3EH,3FH,8,0,0FH
	DB    0,0,0,0,0,0
	DB    10H,0EH,0,0FFH,50H,1DH
	DB    10H,0,0A0H,1,0FH,0
	DB    0CAH,0E7H
L12EEH:  DB    65H,4FH,50H,88H,55H,9AH
	DB    9,3EH,0,40H,0,0
	DB    0,0,0,0,0E8H,8BH
	DB    0DFH,28H,0,0E7H,4,0E3H
L1306H:  DB    0FFH,0,1,2,3,4
	DB    5,6,7
L130FH:  DB    8,9,0AH,0BH,0CH,0DH
	DB    0EH,0FH,1,0,0FH,0
	DB    80H,0,0,0,0,0
	DB    5,0FH,0FFH,80H,2FH,10H
	DB    0,80H,1,0FH,0,46H
	DB    0EFH,4FH,3FH,40H,92H,45H
	DB    9,28H,0FDH,0,60H,0
	DB    0,0,0,0,0,6
	DB    8FH,0FFH,20H,0FH,5,1AH
	DB    0E3H,0FFH,0,1,2,3
	DB    4,5,6,7,8,9
	DB    0AH,0BH,0CH,0DH,0EH,0FH
	DB    1,0,0FH,0,10H,0
	DB    0,0,0,0,5,0FH
	DB    0FFH,80H,2FH,10H,0,80H
	DB    1,0FH,0,46H,0EFH,4FH
	DB    3FH,40H,92H,45H,9,28H
	DB    0FDH,0,60H,0,0,0
	DB    0,0,0,6,8FH,0FFH
	DB    20H,0FH,5,1AH,0E3H,0FFH
	DB    0,1,2,3,4,5
	DB    6,7,8,9,0AH,0BH
	DB    0CH,0DH,0EH,0FH,1,0
	DB    0FH,0,20H,0,20H,0
	DB    0,0,5,0FH,0FFH,80H
	DB    2FH,10H,0,80H,1,0FH
	DB    0,46H,0EBH,4EH,3FH,40H
	DB    90H,43H,0CH,24H,0FDH,0
	DB    60H,0,0,0,0,0
	DB    0,2,88H,0FFH,20H,0FH
	DB    5,1AH,0E3H,0FFH,0,1
	DB    2,3,4,5,6,7
	DB    8,9,0AH,0BH,0CH,0DH
	DB    0EH,0FH,1,0,0FH,0
	DB    10H,0,0,0,0,0
	DB    5,0FH,0FFH,80H,2FH,10H
	DB    0,80H,1,0FH,0,46H
	DB    0EBH,4EH,3FH,40H,90H,43H
	DB    0CH,24H,0FDH,0,60H,0
	DB    0,0,0,0,0,2
	DB    88H,0FFH,20H,0FH,5,1AH
	DB    0E3H,0FFH,0,1,2,3
	DB    4,5,6,7,8,9
	DB    0AH,0BH,0CH,0DH,0EH,0FH
	DB    1,0,0FH,0,20H,0
	DB    20H,0,0,0,5,0FH
	DB    0FFH,64H,29H,0EH,0,0F0H
	DB    1,0FH,0,96H,2FH,7BH
	DB    63H,65H,9DH,68H,91H,37H
	DB    1FH,0,0,0,0,0
	DB    0,0,0,2DH,8EH,2BH
	DB    32H,0FH,32H,34H,0E7H,0FFH
	DB    0,1,2,3,4,5
	DB    14H,7,38H,39H,3AH,3BH
	DB    3CH,3DH,3EH,3FH,1,0
	DB    0FH,0,0,0,0,0
	DB    0,0,5,0FH,0FFH,64H
	DB    29H,0EH,0,0F0H,1,0FH
	DB    0,9AH,2FH,7BH,63H,65H
	DB    9DH,68H,91H,37H,1FH,0
	DB    0,0,0,0,0,0
	DB    0,2DH,8EH,2BH,32H,0FH
	DB    32H,34H,0E7H,0FFH,0,1
	DB    2,3,4,5,6,7
	DB    8,9,0AH,0BH,0CH,0DH
	DB    0EH,0FH,1,0,0FH,0
	DB    80H,0,0,0,0,0
	DB    5,0FH,0FFH
mode54:  DB    64H,29H,0EH,0,0F0H,1
	DB    0FH,0,36H,2FH,7AH,63H
	DB    65H,9DH,67H,92H,39H,1FH
	DB    0,0,0,0,0,0
	DB    0,0,33H,82H,2BH,32H
	DB    0FH,33H,36H,0E7H,0FFH,0
	DB    1,2,3,4,5,14H
	DB    7,38H,39H,3AH,3BH,3CH
	DB    3DH,3EH,3FH,1,0,0FH
	DB    0,0,0,0,0,0
	DB    0,5,0FH,0FFH,64H,29H
	DB    0EH,0,0F0H,1,0FH,0
	DB    3AH,2FH,7AH,63H,65H,9DH
	DB    67H,92H,39H,1FH,0,0
	DB    0,0,0,0,0,0
	DB    33H,82H,2BH,32H,0FH,33H
	DB    36H,0E7H,0FFH,0,1,2
	DB    3,4,5,6,7,8
	DB    9,0AH,0BH,0CH,0DH,0EH
	DB    0FH,1,0,0FH,0,80H
	DB    0,0,0,0,0,5
	DB    0FH,0FFH,64H,29H,0EH,0
	DB    0F0H,1,2FH,0,36H,23H
	DB    7EH,63H,65H,9DH,6CH,9BH
	DB    4BH,1FH,0,0,0,0
	DB    0,0,0,0,3DH,80H
	DB    2BH,32H,0FH,33H,36H,0E7H
	DB    0FFH,0,1,2,3,4
	DB    5,14H,7,38H,39H,3AH
	DB    3BH
L1553H:  DB    3CH,3DH,3EH,3FH,1,0
	DB    0FH,0,0,0,0,0
	DB    0,0,5,0FH,0FFH,64H
	DB    29H,0EH,0,0F0H,1,6FH
	DB    0,3AH,23H,7EH,63H,65H
	DB    9DH,6CH,9BH,4BH,1FH,0
	DB    0,0,0,0,0,0
	DB    0,3DH,80H,2BH,32H,0FH
	DB    33H,36H,0E7H,0FFH,0,1
	DB    2,3,4,5,6,7
	DB    8,9,0AH,0BH,0CH,0DH
	DB    0EH,0FH,1,0,0FH,0
	DB    80H,0,0,0,0,0
	DB    5,0FH,0FFH,64H,29H,0EH
	DB    0,0F0H,1,0FH,0,56H
	DB    23H,7FH,63H,65H,9DH,6BH
	DB    9CH
L15B4H:  DB    38H,1FH,0,0,0,0
	DB    0,0,0,0,2CH,8EH
	DB    2BH,32H,0FH,32H,34H,0E7H
	DB    0FFH,0,1,2,3,4
	DB    5,14H,7,38H,39H,3AH
	DB    3BH
L15D3H:  DB    3CH,3DH,3EH,3FH,1,0
	DB    0FH,0,0,0,0,0
	DB    0,0,5,0FH,0FFH,64H
	DB    29H,0EH,0,0F0H,1,0FH
	DB    0,5AH,23H,7FH,63H,65H
	DB    9DH,6BH,9CH
L15F4H:  DB    38H,1FH,0,0,0,0
	DB    0,0,0,0,2CH,8EH
	DB    2BH,32H,0FH,32H,34H,0E7H
	DB    0FFH,0,1,2,3,4
	DB    5,6,7,8,9,0AH
	DB    0BH
L1613H:  DB    0CH,0DH,0EH,0FH,1,0
	DB    0FH,0,80H,0,0,0
	DB    0,0,5,0FH,0FFH,64H
	DB    29H,0EH,0,0F0H,1,0FH
	DB    0C0H,86H,2FH,80H,63H,65H
	DB    9DH,70H,80H,0BCH,0F0H,0
	DB    60H,0,0,0,0,0
	DB    0,62H,9EH,57H,32H,0FH
	DB    59H,0B0H,0E3H,0FFH,0,1
	DB    2,3,4,5,14H,7
	DB    38H,39H,3AH,3BH
L1653H:  DB    3CH,3DH,3EH,3FH,1,0
	DB    0FH,0,0,0,0,0
	DB    0,0,5,0FH,0FFH,64H
	DB    29H,0EH,0,0F0H,1,0FH
	DB    0C0H,8AH,2FH,80H,63H,65H
	DB    9DH,70H,80H,0BCH,0F0H,0
	DB    60H,0,0,0,0,0
	DB    0,62H,9EH,57H,32H,0FH
	DB    59H,0B0H,0E3H,0FFH,0,1
	DB    2,3,4,5,6,7
	DB    8,9,0AH,0BH,0CH,0DH
	DB    0EH,0FH,1,0,0FH,0
	DB    80H,0,0,0,0
	DB    0,5,0FH,0FFH,0,4CH
	DB    3,8FH,0FFH
;
clrmem:  PUSH  ES
	MOV   CX,OFFSET L4000H
	MOV   DI,OFFSET LB800H
	TEST  BYTE PTR ES:[BX]+51,1;if CGA graphics
	JNZ   clrmem1
	TEST  BYTE PTR ES:[BX]+9,1;if CGA text
	JNZ   clrmem2
	MOV   DI,OFFSET LB000H
	MOV   CH,OFFSET 20H
	JMP   SHORT clrmem2     ;monochrome text
clrmem1: XOR   AX,AX             ;graphics, clear to zero
	JMP   SHORT clrmem3
clrmem2: MOV   AX,OFFSET L0720H  ;text, clear to blanks
clrmem3: MOV   ES,DI
	XOR   DI,DI
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	POP   ES
	RET
;
clrm:    PUSH  DS
	PUSH  ES
	CALL  zeroDS
	MOV   DX,OFFSET seqport
	MOV   AL,OFFSET 1
	MOV   AH,BYTE PTR ES:[BX]+5
	OUT   AX,DX             ;set seq(1)
	TEST  BYTE PTR [L0487H],80H
	JNZ   clrm_5
	CMP   WORD PTR [scrnszqm],0
	JZ    clrm_5
	MOV   AL,BYTE PTR [L0449H]
	MOV   CX,OFFSET L4000H
	MOV   DI,OFFSET LB800H
	TEST  BYTE PTR ES:[BX]+51,1
	JNZ   clrm_1
	TEST  BYTE PTR ES:[BX]+9,1
	JNZ   clrm_3
	MOV   DI,OFFSET LB000H
	JMP   SHORT clrm_3
clrm_1:  CMP   AL,6
	JLE   clrm_2
	MOV   DI,OFFSET LA000H
	MOV   CH,OFFSET 80H
	CMP   AL,13H
	JLE   clrm_2
	CMP   AL,'j'
	JZ    clrm_2            ;if mode 6a
	TEST  BYTE PTR ES:[BX]+57,20H
	JNZ   clrm_6
	TEST  BYTE PTR ES:[BX]+55,0C0H
	JNZ   clrm_7
clrm_2:  XOR   AX,AX
	JMP   SHORT clrm_4
clrm_3:  MOV   AX,OFFSET L0720H
clrm_4:  MOV   ES,DI
	XOR   DI,DI
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
clrm_5:  POP   ES
	POP   DS
	RET
clrm_6:  MOV   CX,OFFSET L0002H
	JMP   SHORT clrm_8
clrm_7:  MOV   CX,OFFSET L0008H
clrm_8:  MOV   ES,DI
	XOR   AH,AH
clrm_9:  PUSH  CX
	PUSH  AX
	MOV   CH,AH
	CALL  ao_b2_e1
	XOR   DI,DI
	XOR   AX,AX
	MOV   CX,OFFSET L8000H
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	POP   AX
	POP   CX
	ADD   AH,2
	LOOP  clrm_9            ;Dec CX, loop if CX<>0.
	XOR   CH,CH
	CALL  ao_b2_e1
	JMP   SHORT clrm_5
;
clrm_10: CMP   BYTE PTR [L0449H],7
	JLE   clrm_12
	TEST  BYTE PTR ES:[BX]+51,1
	JNZ   clrm_12
	MOV   AH,OFFSET 3
	TEST  BYTE PTR ES:[BX]+9,1
	JNZ   clrm_11
	MOV   AH,OFFSET 7
clrm_11: MOV   BYTE PTR [L0449H],AH
clrm_12: RET
;
gmi:     MOV   AH,BYTE PTR [L0449H]
	CALL  gmodeinf
	RET
;
setup:   MOV   DX,OFFSET crt_mono
	TEST  BYTE PTR ES:[BX]+9,1
	JZ    setup1
	MOV   DL,OFFSET 0D4H
setup1:  MOV   WORD PTR [crtport],DX
	MOV   WORD PTR [L044EH],OFFSET chksum
	MOV   BYTE PTR [L0462H],OFFSET 0
	MOV   CX,OFFSET L0008H
	MOV   DI,OFFSET L0450H  ;zero eight words, methinks
	PUSH  ES
	PUSH  DS
	POP   ES
	XOR   AX,AX
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	POP   ES
	MOV   AL,BYTE PTR ES:[BX];al = 64 for mode 54
	XOR   AH,AH
	MOV   WORD PTR [L044AH],AX;=64
	MOV   AL,BYTE PTR ES:[BX]+1
	MOV   BYTE PTR [scrnlenq],AL;=29
	MOV   AL,BYTE PTR ES:[BX]+2
	MOV   WORD PTR [swid_qm],AX;hang!
	MOV   AX,WORD PTR ES:[BX]+3
	MOV   WORD PTR [scrnszqm],AX
	MOV   AX,WORD PTR ES:[BX]+20
	XCHG  AL,AH
	MOV   WORD PTR [L0460H],AX
	RET
;
setseq:  PUSH  BX
	ADD   BX,5
	MOV   DX,OFFSET seqport ;seq reg
	MOV   AX,OFFSET L0100H  ;seq(0) = 1
	OUT   AX,DX
	MOV   CX,OFFSET L0004H  ;seq(4) = 0?
	MOV   AL,OFFSET 1
setseq_1:MOV   AH,BYTE PTR ES:[BX]
	AND   AH,1FH
	OUT   AX,DX             ;seq(?) = ?
	INC   BX
	INC   AL
	LOOP  setseq_1          ;Dec CX, loop if CX<>0.
	POP   BX
	CALL  set_qm            ;look up mo setting
	MOV   AL,BYTE PTR ES:[BX]+9
setseq_2:MOV   DX,OFFSET mo_port
setseq_3:OUT   AL,DX             ;set mo
	MOV   DL,OFFSET 0C4H    ;restart sequencer
	MOV   AX,OFFSET L0300H  ;seq(0) = 3
	OUT   AX,DX
	RET
;
setar:   TEST  BYTE PTR [flag489],8
	JZ    setar3            ;if set the palette as well
	PUSH  BX
	ADD   BX,33H
	MOV   DX,WORD PTR [crtport]
	ADD   DL,6
	IN    AL,DX             ;input status 1
	MOV   CX,OFFSET L0004H
	MOV   AH,OFFSET 10H     ;start at ar(10)
	MOV   DL,OFFSET 0C0H
setar1:  CMP   AH,11H            ;set ar(10) -> ar(13)
	JZ    setar2            ;don't set ar(11) overscan clr
	MOV   AL,AH
	OUT   AL,DX
	MOV   AL,BYTE PTR ES:[BX]
	OUT   AL,DX
setar2:  INC   BX
	INC   AH
	LOOP  setar1            ;Dec CX, loop if CX<>0.
	POP   BX
	RET
setar3:  PUSH  BX
	ADD   BX,23H
	MOV   SI,BX
	MOV   DX,WORD PTR [crtport]
	ADD   DL,6
	IN    AL,DX             ;input status 1
	MOV   CX,OFFSET L0014H
	XOR   AH,AH
	MOV   DL,OFFSET 0C0H
setar4:  MOV   AL,AH             ;set ar(0) -> ar(13)
	OUT   AL,DX
	INC   AH
	MOV   AL,BYTE PTR ES:[BX]
	OUT   AL,DX
	INC   BX
	LOOP  setar4            ;Dec CX, loop if CX<>0.
	MOV   AL,AH
	OUT   AL,DX
	XOR   AL,AL
	OUT   AL,DX             ;ar(14) = 0 (color select)
	PUSH  DS
	PUSH  ES
	CALL  fiddle            ;some short lookup/computation
	OR    BP,BP
	JZ    setar5            ;if nothing to set
	POP   DS
	PUSH  DS
	MOV   CX,OFFSET extport ;set 16 colors?
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	INC   SI
	MOVSB                   ;Move byt, (SI)+- to (DI)+-.
setar5:  POP   ES
	POP   DS
	POP   BX
	RET
;
setgr:   PUSH  BX
	MOV   DH,OFFSET 3
	MOV   DL,OFFSET 0CCH    ;read-only misc output port
	XOR   AL,AL
	OUT   AL,DX             ;port (3cc) = 0 !!
	MOV   DL,OFFSET 0CAH    ;read-only feature control
	MOV   AL,OFFSET 1
	OUT   AL,DX             ;port (3ca) = 1 !!
	ADD   BX,37H
	MOV   DL,OFFSET 0CEH    ;graphics registers
	MOV   CX,OFFSET L0009H
	XOR   AL,AL
setgr1:  MOV   AH,BYTE PTR ES:[BX]
	OUT   AX,DX
	INC   BX
	INC   AL
	LOOP  setgr1            ;Dec CX, loop if CX<>0.
	POP   BX
	RET
;
L1897H:  CALL  L6031H
	MOV   DL,OFFSET 0C0H
	XCHG  AL,AH
	OUT   AL,DX
	JMP   SHORT L18A1H
L18A1H:  JMP   SHORT L18A3H
L18A3H:  XCHG  AL,AH
	OUT   AL,DX
	MOV   AL,OFFSET 20H
	JMP   SHORT L18AAH
L18AAH:  JMP   SHORT L18ACH
L18ACH:  OUT   AL,DX
	RET
	MOV   CX,OFFSET L008CH
;
wait:    PUSH  AX
	CALL  get_is1
wait_1:  PUSH  CX
	MOV   CX,OFFSET L7FFFH
wait_2:  IN    AL,DX
	TEST   AL,8
	LOOPNZ wait_2           ;Dec CX, loop if NZ and CX<>0.
wait_3:  IN    AL,DX
	TEST   AL,8
	LOOPZ wait_3            ;Dec CX, loop if Z and CX<>0.
	POP   CX
	LOOP  wait_1            ;Dec CX, loop if CX<>0.
	POP   AX
	RET
;
L18C8H:  CMP   BYTE PTR CS:[DI],AH
	JNZ   L18D4H
	ADD   BX,WORD PTR CS:[DI]+1
	XOR   SI,SI
	RET
L18D4H:  ADD   DI,3
	CMP   DI,SI
	JNZ   L18C8H
	RET
;
L18DCH:  PUSH  DX
	SUB   DH,CH
	CMP   DH,AL
	JGE   L18E5H
	XOR   AL,AL
L18E5H:  MOV   DI,OFFSET LA000H
L18E8H:  MOV   ES,DI
	POP   DX
	RET
;
L18ECH:  MOV   AL,BYTE PTR [swid_qm]
	MUL   BL
	MOV   DH,BH
	MOV   BX,AX
	MOV   CX,DX
	MOV   DX,OFFSET seqport
	MOV   AX,OFFSET L0F02H
	OUT   AX,DX
	MOV   AH,OFFSET 2
	CALL  L1970H
	MOV   DX,CX
	XOR   CH,CH
	MOV   AH,DH
	MOV   AL,DH
L190BH:  REPZ STOSB              ;Store byt in AL in (DI)+-.
	ADD   DI,BP
	MOV   CL,DL
	DEC   BX
	JNZ   L190BH
	XOR   AH,AH
	CALL  L1970H
	RET
;
L191AH:  PUSH  BX
	MOV   BL,BYTE PTR [L0462H]
	OR    AX,AX
	JNZ   L1927H
	OR    BL,BL
	JZ    L192AH
L1927H:  CALL  L1A8BH
L192AH:  POP   BX
	MOV   DI,AX
	SUB   DX,CX
	ADD   DX,OFFSET 0101H
	MOV   AL,BL
	XOR   AH,AH
	RET
;
L1938H:  MOV   AL,DH
	XOR   DH,DH
	SUB   BP,DX
	OR    BL,BL
	JZ    L196CH
	SUB   AL,BL
	MUL   BYTE PTR [swid_qm]
	MOV   CX,AX
	PUSH  DX
	MOV   AH,OFFSET 1
	CALL  L1970H
	MOV   DL,OFFSET 0C4H
	MOV   AX,OFFSET L0F02H
	OUT   AX,DX
	POP   DX
	PUSH  DS
	PUSH  ES
	POP   DS
	MOV   AX,CX
L195CH:  MOV   CX,DX
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	ADD   SI,BP
	ADD   DI,BP
	DEC   AX
	JNZ   L195CH
	POP   DS
L1968H:  CALL  L18ECH
	RET
L196CH:  MOV   BL,AL
	JMP   SHORT L1968H
;
L1970H:  MOV   DX,OFFSET L03CEH
	MOV   AL,OFFSET 5
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	AND   AL,0FCH
	OR    AL,AH
	OUT   AL,DX
	DEC   DX
	RET
;
r_port:  PUSHF                   ;dx=port, al=index; ret al=value
	CLI                     ;Disable interupts.
	OUT   AL,DX
	INC   DX
	JMP   SHORT r_port_1    ;pause?
r_port_1:IN    AL,DX
	DEC   DX
	POPF
	RET
;
zeroDS:  PUSH  AX
	XOR   AX,AX
	MOV   DS,AX
	POP   AX
	RET
;
getisa:  PUSH  DS                ;get input status reg addr
	XOR   DX,DX
	MOV   DS,DX
	MOV   DX,WORD PTR [crtport]
	ADD   DL,6
	POP   DS
	RET
;
getcrta: PUSH  DS
	XOR   DX,DX
	MOV   DS,DX
	MOV   DX,WORD PTR [crtport]
	POP   DS
	RET
;
setqm_1: PUSH  CX
	MOV   CX,OFFSET L0001H
	CALL  setqm
	POP   CX
	RET
;
setqm_2: PUSH  CX
	MOV   CX,OFFSET L0002H
	CALL  setqm
	POP   CX
	RET
;
setqm:   PUSH  AX
	PUSH  CX
	MOV   AL,OFFSET 0B6H
	OUT  AL,43H
	MOV   AL,OFFSET 33H
	OUT  AL,42H
	MOV   AL,OFFSET 5
	OUT  AL,42H
	IN   AL,61H
	MOV   AH,AL
	OR    AL,3
	OUT  AL,61H
setqm1:  PUSH  CX
	MOV   CX,OFFSET L8000H
setqm2:  MOV   AL,AH
	LOOP  setqm2            ;Dec CX, loop if CX<>0.
	POP   CX
	LOOP  setqm1            ;Dec CX, loop if CX<>0.
	OUT  AL,61H
	POP   CX
	POP   AX
	RET
;
L19E1H:  PUSH  DX
	PUSH  BX
	MOV   BL,BH
	XOR   BH,BH
	SHL   BX,1
	MOV   AX,WORD PTR [BX]+L0450H
	CALL  lookup
	PUSH  AX
	SHR   BX,1
	MOV   AX,WORD PTR [scrnszqm]
	MUL   BX
	POP   BX
	ADD   AX,BX
	POP   BX
	POP   DX
	RET
;
lookup:  PUSH  DX
	MOV   DX,AX
	MOV   AL,BYTE PTR [L044AH]
	MUL   AH
	XOR   DH,DH
	ADD   AX,DX
	SHL   AX,1
	POP   DX
	RET
;
and:     MOV   BP,AX
	AND   BP,0FH
	MOV   AH,BYTE PTR CS:[BP]+1A2BH
	MOV   BP,AX
	SHR   BP,1
	SHR   BP,1
	SHR   BP,1
	SHR   BP,1
	AND   BP,0FH
	MOV   AL,BYTE PTR CS:[BP]+1A2BH
	RET
	DB    0,3,0CH,0FH,30H,33H
	DB    3CH,3FH,0C0H,0C3H,0CCH,0CFH
	DB    0F0H,0F3H,0FCH,0FFH
;
L1A3BH:  MOV   AX,WORD PTR ES:[SI]
	XCHG  AH,AL
	MOV   DX,OFFSET L8000H
L1A43H:  TEST  AH,0C0H
	JZ    L1A4AH
	OR    DL,DH
L1A4AH:  SHR   DH,1
	SHL   AX,1
	SHL   AX,1
	JNZ   L1A43H
	MOV   BYTE PTR [BP]+0,DL
	INC   BP
	RET
;
L1A57H:  MOV   DX,WORD PTR [crtport]
	MOV   AL,CH
	XCHG  AH,AL
	OUT   AX,DX
	MOV   AH,CL
	INC   AL
	OUT   AX,DX
	RET
;
L1A66H:  PUSH  DX
	MOV   DX,AX
	MOV   AL,AH
	MUL   BYTE PTR [L044AH]
	SHL   AX,1
	SHL   AX,1
	XOR   DH,DH
	ADD   AX,DX
	POP   DX
	RET
;
L1A79H:  PUSH  BX
	MOV   BL,BH
	XOR   BH,BH
	SHL   BX,1
	MOV   AX,WORD PTR [BX]+L0450H
	SHR   BX,1
	CALL  L1A8BH
	POP   BX
	RET
;
L1A8BH:  PUSH  DX
	MOV   DX,AX
	XOR   DH,DH
	PUSH  DX
	MOV   AL,AH
	MUL   BYTE PTR [swid_qm]
	MUL   WORD PTR [L044AH]
	POP   DX
	ADD   AX,DX
	OR    BL,BL
	JZ    L1AAAH
L1AA2H:  ADD   AX,WORD PTR [scrnszqm]
	DEC   BL
	JNZ   L1AA2H
L1AAAH:  POP   DX
	RET
;
L1AACH:  PUSH  DX
	MOV   DX,AX
	MOV   AL,BYTE PTR [L044AH]
	MUL   AH
	XOR   DH,DH
	ADD   AX,DX
	SHL   AX,1
	ADD   AX,WORD PTR [L044EH]
	SAR   AX,1
	MOV   CX,AX
	MOV   DX,WORD PTR [crtport]
	MOV   AL,OFFSET 0EH
	MOV   AH,CH
	OUT   AX,DX
	MOV   AH,CL
	INC   AL
	OUT   AX,DX
	POP   DX
	RET
;
L1AD2H:  MOV   AX,DX
	MUL   WORD PTR [L044AH]
	MOV   DI,CX
	SHR   DI,1
	SHR   DI,1
	SHR   DI,1
	ADD   DI,AX
	OR    BH,BH
	JZ    L1AF0H
	MOV   AL,BH
	XOR   AH,AH
	MUL   WORD PTR [scrnszqm]
L1AEEH:  ADD   DI,AX
L1AF0H:  AND   CL,7
	MOV   AH,OFFSET 80H
	SHR   AH,CL
	RET
;
get_is1: CALL  getisa
	IN    AL,DX
	RET
;
setar20: CALL  get_is1
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 20H
	OUT   AL,DX
	RET
;
setari:  CALL  get_is1
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 0
	OUT   AL,DX
	RET
;
fiddle:  LES   DI,DWORD PTR [plug10];Load ES:DI with 32b pointer.
	LES   DI,DWORD PTR ES:[DI]+4;Load ES:DI with 32b pointer.
	MOV   BP,ES
	OR    BP,DI
	RET
;
cqm:     PUSH  BX                ;dx=crt port register?
	MOV   AL,OFFSET 0EH     ;get high cursor location
	CALL  r_port
	MOV   AH,AL
	MOV   AL,OFFSET 0FH     ;get low cursor location
	CALL  r_port
	MOV   BX,AX
	MOV   AX,OFFSET LAA0EH
	OUT   AX,DX             ;cursor low = aa
	MOV   AX,OFFSET L550FH
	OUT   AX,DX             ;cursor high = 55
	MOV   AL,OFFSET 0EH
	CALL  r_port
	CMP   AL,0AAH
	JZ    cqm1              ;if cursor position set
	MOV   AL,OFFSET 0FH
	CALL  r_port
	CMP   AL,'U'
	JZ    cqm1              ;if high cursor position set
	XOR   AL,AL
	POP   BX
	RET                     ;was unable to set cursor pos.
cqm1:    MOV   AL,OFFSET 0EH
	MOV   AH,BH
	OUT   AX,DX             ;set cursor low = 0
	INC   AL
	MOV   AH,BL
	OUT   AX,DX             ;set cursor high = 0
	MOV   AL,OFFSET 1
	OR    AL,AL             ;flag 'ok'
	POP   BX
	RET
;
compute: OR    AX,AX
	JZ    compute1
	CALL  lookup
compute1:ADD   AX,WORD PTR [L044EH]
	ADD   DX,OFFSET 0101H
	SUB   DX,CX
	XOR   CH,CH
	MOV   BP,WORD PTR [L044AH]
	MOV   DI,AX
	MOV   SI,AX
	MOV   AX,BP
	MUL   BL
	SHL   AX,1
	SHL   BP,1
	OR    BL,BL
	RET
;
L1B7FH:  CLD                     ;Set forward direction flag.
	MOV   BL,AL
	MOV   SI,OFFSET LB000H
	MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	CMP   AL,'0'
	JZ    L1B91H
	MOV   SI,OFFSET LB800H
L1B91H:  MOV   ES,SI
	MOV   AX,CX
	CALL  compute
	JNZ   L1B9CH
	MOV   BL,DH
L1B9CH:  ADD   SI,AX
	CMP   DL,BYTE PTR [L044AH]
	JZ    L1BAAH
	PUSH  ES
	POP   DS
	CALL  L1BD9H
	RET
L1BAAH:  PUSH  ES
	POP   DS
	CALL  L1C04H
	RET
;
L1BB0H:  CLD                     ;Set forward direction flag.
	MOV   BL,AL
	MOV   SI,OFFSET LB000H
	MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	CMP   AL,'0'
	JZ    L1BC2H
	MOV   SI,OFFSET LB800H
L1BC2H:  MOV   ES,SI
	MOV   AL,CL
	MOV   AH,DH
	CALL  compute
	JNZ   L1BCFH
	MOV   BL,DH
L1BCFH:  NEG   BP
	SUB   SI,AX
	PUSH  ES
	POP   DS
	CALL  L1BD9H
	RET
;
L1BD9H:  PUSH  BX
	MOV   CL,DH
	SUB   CL,BL
	XOR   CH,CH
	XOR   DH,DH
	SUB   BP,DX
	SUB   BP,DX
	JCXZ  L1BF6H            ;Jump if CX=0.
	MOV   AH,CL
L1BEAH:  MOV   CX,DX
	REPZ MOVSW              ;Move wrd, (SI)+- to (DI)+-.
	ADD   SI,BP
	ADD   DI,BP
	DEC   AH
	JNZ   L1BEAH
L1BF6H:  POP   AX
	MOV   AL,OFFSET 20H
L1BF9H:  MOV   CL,DL
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	ADD   DI,BP
	DEC   BL
	JNZ   L1BF9H
	RET
;
L1C04H:  PUSH  BX
	MOV   AL,DH
	SUB   AL,BL
	JZ    L1C11H
	MUL   DL
	MOV   CX,AX
	REPZ MOVSW              ;Move wrd, (SI)+- to (DI)+-.
L1C11H:  POP   AX
	MOV   CX,AX
	MUL   DL
	XCHG  AX,CX
	MOV   AL,OFFSET 20H
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	RET
;
L1C1CH:  MOV   BX,AX
	CALL  L1C4FH
	MOV   DX,OFFSET LB800H
	MOV   DS,DX
	MOV   AL,BL
	AND   BL,BH
	SHL   BX,CL
	TEST   AL,80H
	JZ    L1C33H
	XOR   BYTE PTR [SI],BL
	RET
L1C33H:  NOT   BH
	MOV   DH,BYTE PTR [SI]
	AND   DH,BH
	OR    BL,DH
	MOV   BYTE PTR [SI],BL
	RET
;
L1C3EH:  MOV   BH,AH
	CALL  L1C4FH
	MOV   DX,OFFSET LB800H
	MOV   DS,DX
	MOV   AL,BYTE PTR [SI]
	SHR   AL,CL
	AND   AL,BH
	RET
;
L1C4FH:  MOV   AL,OFFSET 28H
	MUL   DL
	TEST  DL,1
	JZ    L1C5BH
	ADD   AX,OFFSET 1FD8H
L1C5BH:  MOV   SI,CX
	SHR   SI,1
	SHR   SI,1
	CMP   BH,5
	JG    L1C72H
	ADD   SI,AX
	NOT   CL
	AND   CL,3
	SHL   CL,1
	MOV   BH,OFFSET 3
	RET
L1C72H:  SHR   SI,1
	ADD   SI,AX
	NOT   CL
	AND   CL,7
	MOV   BH,OFFSET 1
	RET
;
L1C7EH:  CLD                     ;Set forward direction flag.
	MOV   BL,AL
	MOV   AX,OFFSET LB800H
	MOV   ES,AX
	MOV   AX,CX
	CALL  L1D11H
	JNZ   L1C8FH
	MOV   BL,DH
L1C8FH:  ADD   SI,AX
	CALL  L1CB8H
	RET
;
L1C95H:  CLD                     ;Set forward direction flag.
	MOV   BL,AL
	MOV   AX,OFFSET LB800H
	MOV   ES,AX
	MOV   AL,CL
	MOV   AH,DH
	CALL  L1D11H
	JNZ   L1CA8H
	MOV   BL,DH
L1CA8H:  NEG   BP
	ADD   SI,OFFSET start3
	ADD   DI,OFFSET start3
	SUB   SI,AX
	CALL  L1CB8H
	RET
;
L1CB8H:  MOV   CL,DH
	SUB   CL,BL
	JCXZ  L1CEAH            ;Jump if CX=0.
L1CBEH:  PUSH  CX
	MOV   CL,DL
	PUSH  SI
	PUSH  DI
	SHR   CX,1
	REPZ MOVSW              ;Move wrd, (SI)+- to (DI)+-.
	ADC   CX,CX
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	MOV   CL,DL
	SUB   SI,CX
	SUB   DI,CX
	ADD   SI,OFFSET aaa8
	ADD   DI,OFFSET aaa8
	SHR   CX,1
	REPZ MOVSW              ;Move wrd, (SI)+- to (DI)+-.
	ADC   CX,CX
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	POP   DI
	POP   SI
	ADD   SI,BP
	ADD   DI,BP
	POP   CX
	LOOP  L1CBEH            ;Dec CX, loop if CX<>0.
L1CEAH:  MOV   AL,BH
	MOV   AH,BH
L1CEEH:  MOV   CL,DL
	PUSH  DI
	SHR   CX,1
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	ADC   CX,CX
	REPZ STOSB              ;Store byt in AL in (DI)+-.
	MOV   CL,DL
	SUB   DI,CX
	ADD   DI,OFFSET aaa8
	SHR   CX,1
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	ADC   CX,CX
	REPZ STOSB              ;Store byt in AL in (DI)+-.
	POP   DI
	ADD   DI,BP
	DEC   BL
	JNZ   L1CEEH
	RET
;
L1D11H:  CALL  L1A66H
	ADD   DX,OFFSET 0101H
	SUB   DX,CX
	PUSH  CX
	MOV   CL,OFFSET 2
	SHL   DH,CL
	SHL   BL,CL
	POP   CX
	XOR   CH,CH
	MOV   BP,OFFSET L0050H
	CMP   BYTE PTR [L0449H],6
	JZ    L1D32H
	SHL   DL,1
	SHL   AX,1
L1D32H:  PUSH  ES
	POP   DS
	MOV   DI,AX
	MOV   SI,AX
	MOV   AL,OFFSET 50H
	MUL   BL
	OR    BL,BL
	RET
;
setregs: MOV   AL,OFFSET 0B8H
	CALL  rd_1ce            ;al = 1ce(b8)
	MOV   AH,AL
	MOV   AL,OFFSET 0B8H
	PUSH  AX
	AND   AH,0FBH           ;ext(b8) &= 1111 1011
	CALL  a_1ce
	CALL  setupext          ;extensive diddling with esr
	CALL  setseq
	CALL  prep              ;wait for vertical retrace
	CALL  setcrt            ;set crt registers
	CALL  setar             ;set attribute registers
	MOV   AL,OFFSET 20H
	OUT  AL,20H             ;clear interrupts!
	CALL  setgr             ;set graphics registers
	MOV   AX,WORD PTR ES:[BX]+8
	AND   AX,OFFSET 0CC0H
	CMP   AX,OFFSET 0840H
	JNZ   setregs1
	MOV   AL,OFFSET 0B8H    ;ext(b8)
	CALL  rd_1ce
	PUSH  AX
	MOV   AX,OFFSET L40B8H  ;ext(b8) = 40
	MOV   CH,OFFSET 3FH     ;ext(b8) = ext(b8)&0x3f | 0x40
	CALL  ao_1ce
setregs1:PUSH  BX
	CALL  setpal            ;set external palette
	POP   BX
	MOV   AX,WORD PTR ES:[BX]+8
	AND   AX,OFFSET 0CC0H
	CMP   AX,OFFSET 0840H
	JNZ   setregs2
	POP   AX
	MOV   AH,AL
	MOV   AL,OFFSET 0B8H
	CALL  wr_1ce            ;ext(b8) = ??
setregs2:CALL  setext            ;set ati extended registers
	POP   AX
	AND   AH,4
	JZ    setregs3
	CALL  o_1ce
setregs3:STI                     ;Enable interupts.
	RET
;
setcrt:  CLI                     ;Disable interupts.
	MOV   AL,OFFSET 0B4H
	CALL  rd_1ce
	MOV   AH,AL
	MOV   AL,OFFSET 0B4H
	PUSH  AX
	XOR   AH,AH
	CALL  wr_1ce            ;ext(b4) = 0
	PUSH  BX
	ADD   BX,0AH
	MOV   DX,WORD PTR [crtport]
	MOV   CX,OFFSET L0011H
	MOV   AX,OFFSET L3011H  ;crt(11)=30
	OUT   AX,DX             ;vertical sync end?
	XOR   AL,AL
setcrt1: MOV   AH,BYTE PTR ES:[BX];loop setting crt registers
	OUT   AX,DX
	INC   BX
	INC   AL
	LOOP  setcrt1           ;Dec CX, loop if CX<>0.
	MOV   AH,BYTE PTR ES:[BX];careful with vert retrace reg
	AND   AH,4FH
	OR    AH,20H
	OUT   AX,DX
	MOV   CX,OFFSET L0007H
setcrt2: INC   BX                ;set remaining CRT registers
	INC   AL
	MOV   AH,BYTE PTR ES:[BX]
	OUT   AX,DX
	LOOP  setcrt2           ;Dec CX, loop if CX<>0.
	XOR   DI,DI
	OR    SI,SI
	JZ    setcrt6           ;yes, probably taken
setcrt3: MOV   AX,WORD PTR ES:[SI];set extra CRT registers?
	AND   AL,3FH            ;(what extra regs?)
	CMP   AL,'?'            ;CRT <3f, it would seem.
	JZ    L1DFDH
	OUT   AX,DX             ;line compare crt, or extra 1
	MOV   DI,AX
	ADD   SI,2
	JMP   SHORT setcrt3
L1DFDH:  PUSH  DX
	MOV   DL,OFFSET 0CCH    ;read misc. output reg
setcrt5: IN    AL,DX
	MOV   AH,BYTE PTR ES:[SI]
	AND   AX,OFFSET 0C03FH
	OR    AL,AH
	MOV   DL,OFFSET 0C2H
	OUT   AL,DX             ;or something into misc out
	POP   DX
	AND   DI,OFFSET L00FFH
setcrt6: POP   BX
	ADD   DL,6
	XOR   AL,AL
	OUT   AL,DX             ;set feature control
	POP   AX
	CALL  wr_1ce
	XOR   CH,CH
	MOV   AL,OFFSET 0B6H
	CALL  rd_1ce
	TEST   AL,20H
	JZ    setcrt7
	MOV   CH,OFFSET 20H
setcrt7: CMP   DI,11H
	JZ    setcrt8
	MOV   DX,WORD PTR [crtport]
	MOV   AL,OFFSET 11H
	MOV   AH,BYTE PTR ES:[BX]+27
	OR    AH,CH             ;set vertical sync end
	OUT   AX,DX
setcrt8: STI                     ;Enable interupts.
	RET
;
prep:    MOV   DL,OFFSET 0DAH
	TEST  BYTE PTR ES:[BX]+9,1;check color bit
	JNZ   prep1             ;if color
	MOV   DL,OFFSET 0BAH
prep1:   MOV   CX,OFFSET LFFFFH  ;don't want to wait too long
prep2:   IN    AL,DX             ;read input status 1
	TEST   AL,8
	LOOPNZ prep2            ;if in vertical sync
prep3:   IN    AL,DX
	TEST   AL,8
	LOOPZ prep3             ;if not in vertical retrace
	MOV   DL,OFFSET 0C4H    ;sequencer port
	MOV   AH,BYTE PTR ES:[BX]+5
	OR    AH,20H
	MOV   AL,OFFSET 1       ;seq(1) = (+5)|20
	OUT   AX,DX
	RET
;
L1E62H:  CALL  zeroDS
	CALL  settext
	MOV   AH,OFFSET 0FFH
	MOV   DX,OFFSET L03D4H
	OR    AL,AL
	JZ    L1E75H
	MOV   AH,OFFSET 0FEH
	MOV   DL,OFFSET 0B4H
L1E75H:  PUSH  AX
	MOV   WORD PTR [crtport],DX
	MOV   AX,OFFSET L0E0EH
	CALL  gmodeinf
	CALL  setseq
	POP   AX
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	AND   AL,AH
	MOV   DL,OFFSET 0C2H
	OUT   AL,DX
	CALL  prep
	CALL  setar
	XOR   SI,SI
	CALL  setcrt
	CALL  setgr
	CALL  setari
	MOV   AX,OFFSET LA000H
	MOV   DS,AX
	MOV   ES,AX
	XOR   AX,AX
	XOR   DI,DI
	XOR   SI,SI
	CLD                     ;Set forward direction flag.
	MOV   CX,OFFSET LFFFFH
	REPZ STOSB              ;Store byt in AL in (DI)+-.
	MOV   CX,OFFSET L0004H
	MOV   BX,OFFSET L0100H
L1EB7H:  PUSH  CX
	PUSH  BX
	CALL  L1F2CH
	POP   BX
	POP   CX
	JNZ   L1EC6H
	SHL   BH,1
	INC   BL
	LOOP  L1EB7H            ;Dec CX, loop if CX<>0.
L1EC6H:  PUSH  AX
	MOV   DL,OFFSET 0C4H
	MOV   AX,OFFSET L0E04H
	OUT   AX,DX
	NOP
	NOP
	MOV   AX,OFFSET L0F02H
	OUT   AX,DX
	MOV   AX,OFFSET L30B0H
	MOV   CH,OFFSET 0E7H
	CALL  ao_1ce
	MOV   AX,OFFSET L04B6H
	CALL  o_1ce
L1EE1H:  MOV   CX,OFFSET extport
	XOR   SI,SI
	MOV   DI,SI
	MOV   AX,OFFSET L5555H
L1EEBH:  MOV   AL,AH
	STOSB                   ;Store byt in AL in (DI)+-.
	LODSB                   ;Load AL with byt at (SI)+-.
	CMP   AL,AH
	JNZ   L1EFFH
	NOT   AH
	LOOP  L1EEBH            ;Dec CX, loop if CX<>0.
	MOV   AX,OFFSET L20BBH
	CALL  o_1ce
	JMP   SHORT L1F1EH
L1EFFH:  MOV   AL,OFFSET 0B0H
	CALL  rd_1ce
	TEST   AL,10H
	JNZ   L1F18H
	MOV   AX,OFFSET L30B0H
L1F0BH:  MOV   CH,OFFSET 0E7H
	CALL  ao_1ce
	MOV   AX,OFFSET LAAB2H
	CALL  wr_1ce
	JMP   SHORT L1EE1H
L1F18H:  MOV   AX,OFFSET LEFB0H
	CALL  a_1ce
L1F1EH:  MOV   AX,OFFSET L00B2H
	CALL  wr_1ce
	MOV   AX,OFFSET LDFB0H
	CALL  a_1ce
	POP   AX
	RET
;
L1F2CH:  MOV   DX,OFFSET seqport
	MOV   AL,OFFSET 2
	MOV   AH,BH
	OUT   AX,DX
	MOV   DL,OFFSET 0CEH
	MOV   AL,OFFSET 4
	MOV   AH,BL
	OUT   AX,DX
	CALL  L1F3FH
	RET
;
L1F3FH:  XOR   AX,AX
	CALL  L1F6CH
	JNZ   L1F60H
	MOV   AX,OFFSET LAAAAH
	CALL  L1F64H
	JNZ   L1F60H
	MOV   AX,OFFSET L5555H
	CALL  L1F64H
	JNZ   L1F60H
	XOR   AX,AX
	CALL  L1F64H
	JNZ   L1F60H
	XOR   AX,AX
	RET
L1F60H:  MOV   AX,OFFSET LFFFFH
	RET
;
L1F64H:  CLD                     ;Set forward direction flag.
	MOV   CX,OFFSET LFFFFH
	XOR   DI,DI
	REPZ STOSB              ;Store byt in AL in (DI)+-.
;
L1F6CH:  XOR   DI,DI
	MOV   CX,OFFSET LFFFFH
	REPZ SCASB              ;Scan (DI)+- for byt in AL.
	RET
;
aaa:     CALL  zeroDS            ;cx =?
	MOV   WORD PTR [L0460H],CX
	MOV   AL,CH
	AND   AL,60H
	TEST   AL,20H
	JZ    aaa2
	MOV   CX,OFFSET setcrt5
	JMP   aaa13
aaa1:    JMP   aaa13
aaa2:    TEST  BYTE PTR [L0487H],1
	JNZ   aaa1
	CMP   BYTE PTR [L0449H],7
	JZ    aaa3
	CMP   BYTE PTR [L0449H],4
	JL    aaa3
	RET
aaa3:    TEST  BYTE PTR [L0487H],8
	JZ    aaa4
	JMP   intrx
aaa4:    MOV   DH,BYTE PTR [swid_qm]
	MOV   DL,DH
	DEC   DL
	CMP   CH,CL
	JLE   aaa6
	MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,2
	JNZ   aaa1
	OR    CL,CL
	JZ    aaa1
	MOV   CH,CL
	MOV   CL,DH
	DEC   CL
	JMP   SHORT aaa13
	NOP
L1FCEH:  CMP   CL,DL
	JZ    aaa13
L1FD2H:  MOV   CL,DH
	CMP   CH,3
	JL    aaa5
	MOV   CH,CL
	SHR   CH,1
aaa5:    DEC   CL
	JMP   SHORT aaa13
aaa6:    CMP   CL,3
	JLE   aaa13
	MOV   AH,CL
	SUB   AH,CH
	OR    AH,AH
	JNZ   aaa7
	CMP   DL,CL
	JZ    aaa12
	DEC   DL
	CMP   DL,CL
	JZ    aaa11
aaa7:    MOV   AL,CH
	OR    AL,CL
	CMP   AL,DH
	JLE   aaa9
aaa8:    CMP   AH,2
	DB    7EH,12H,80H,0FDH,2,7FH
	DB    0C8H
aaa9:    DB    80H,0FCH,3,7DH,0BFH,8AH
	DB    0D6H,0FEH,0CAH,3AH,0CAH,74H
	DB    22H
aaa10:   DB    8AH,0CEH,0FEH,0C9H,0FEH,0C9H
	DB    8AH,0E9H,2AH
L2020H:  DB    0ECH,80H,0FEH,8,7FH,6
	DB    0FEH,0C1H,0FEH,0C5H,0EBH,1AH
aaa11:   DB    0B0H,0B1H,0E8H,46H,3,0A8H
	DB    2,74H,11H,0FEH,0C1H,0EBH
	DB    0DH
aaa12:   DB    0B0H,0B1H,0E8H,39H,3,0A8H
	DB    2,74H,4,0FEH,0CDH,0EBH
	DB    0
aaa13:   DB    0B0H,0B8H,0E8H,2CH,3,50H
	DB    0A8H,4,74H,6,0B8H,0B8H
	DB    0FBH,0E8H,5,3
L2056H:  DB    0B4H,0AH,0E8H,0FCH,0F9H,58H
	DB    0A8H,4,74H,6,0B8H,0B8H
	DB    4,0E8H,0E0H,2,0C3H
;
setupext:MOV   AX,OFFSET LDFA3H  ;called before setting seq regs
	CALL  a_1ce             ;ext(a3) &= 1101 1111
	MOV   AL,OFFSET 0B7H
	CALL  rd_1ce            ;ext(b7)
	TEST   AL,4
	JZ    setuex1
	TEST   AL,80H
	MOV   AX,OFFSET L04A6H  ;ext(a6) = ext(a6)&11111010 |100
	JZ    setuex2
setuex1: MOV   AX,OFFSET L00A6H  ;ext(a6) = ext(a6) & 11111010
setuex2: MOV   CH,OFFSET 0FAH
	CALL  ao_1ce
	MOV   AL,OFFSET 0B7H
	CALL  rd_1ce            ;ext(b7)
	TEST   AL,1
	JZ    setuex6
	MOV   AL,OFFSET 0B0H
	CALL  rd_1ce            ;ext(b0)
	TEST   AL,18H
	JNZ   setuex6
	PUSH  DI
	PUSH  BX
	CALL  check
	MOV   AX,BX
	POP   BX
	POP   DI
	OR    AH,AH
setuex3: JNZ   setuex6
	MOV   AX,OFFSET LDFB3H
	CALL  a_1ce             ;ext(b3) &= 11011111
	CMP   BYTE PTR ES:[BX],'d'
	JNZ   setuex6           ;if not mode 64
setuex4: MOV   AX,OFFSET setuex5 ;ext(b3) |= 20
setuex5: CALL  o_1ce
setuex6: MOV   AX,OFFSET LE2B6H
	CALL  a_1ce             ;ext(b6) &= 1110 0010
	MOV   AX,OFFSET L0100H
	MOV   DX,OFFSET seqport ;seq(0) = 01
	OUT   AX,DX
	MOV   AX,OFFSET L5CB0H
	CALL  a_1ce             ;ext(b0) &= 0101 1100
	MOV   AX,OFFSET L3FB3H
	CALL  a_1ce             ;ext(b3) &= 0011 1111
	MOV   AX,OFFSET L30BEH
	CALL  a_1ce             ;ext(be) &= 0011 0000
	TEST  BYTE PTR ES:[BX]+56,80H
	JZ    setuex7
	MOV   AL,OFFSET 0B0H
	CALL  rd_1ce            ;ext(b0)
	TEST   AL,8
	JNZ   setuex7
	MOV   AX,OFFSET LFBA6H
	CALL  a_1ce             ;ext(a6) &= 1111 1011
	MOV   AX,OFFSET L02B0H
	CALL  o_1ce             ;ext(b0) |= 0000 0010
	MOV   AX,OFFSET L01B0H
	CALL  o_1ce             ;ext(b0) |= 0000 0001
setuex7: MOV   AX,OFFSET LE1B2H
	CALL  a_1ce             ;ext(b2) &= 1110 0001
	MOV   AX,OFFSET L07B1H
	CALL  a_1ce             ;ext(b1) &= 0000 0111
	MOV   AX,OFFSET L7FB5H
	CALL  a_1ce             ;ext(b5) &= 0111 1111
	TEST  BYTE PTR ES:[BX]+57,20H
	JZ    setuex8
	MOV   AX,OFFSET L40B3H
	CALL  o_1ce             ;ext(b3) |= 0100 0000
setuex8: TEST  BYTE PTR ES:[BX]+55,20H
	JZ    setuex9
	MOV   AX,OFFSET L80B5H
	CALL  o_1ce             ;ext(b5) |= 1000 0000
	MOV   AX,OFFSET L18B6H
	CALL  o_1ce             ;ext(b6) |= 0001 1000
setuex9: TEST  BYTE PTR ES:[BX]+55,10H
	JZ    setuex10
	MOV   AX,OFFSET L08B6H
	CALL  o_1ce             ;ext(b6) |= 0000 1000
setuex10:MOV   AX,OFFSET L0300H
	MOV   DX,OFFSET seqport ;seq(0) = 3
	OUT   AX,DX
	MOV   AX,OFFSET LCFBAH
	CALL  a_1ce             ;ext(ba) &= 1100 1111
	MOV   AX,OFFSET LF4B8H
	CALL  a_1ce             ;ext(b8) &= 1111 0100
	MOV   AX,OFFSET L77B4H
	CALL  a_1ce             ;ext(b4) &= 0111 0111
	MOV   AX,OFFSET L7FB9H
	CALL  a_1ce             ;ext(b9) &= 0111 1111
	MOV   AX,OFFSET LF7BAH
	CALL  a_1ce             ;ext(ba) &= 1111 0111
	MOV   AX,OFFSET LFDB1H
	CALL  a_1ce             ;ext(b1) &= 1111 1101
	MOV   AX,OFFSET L7FBFH
	CALL  a_1ce             ;ext(bf) &= 0111 1111
	MOV   AL,OFFSET 0B0H
	CALL  rd_1ce            ;ext(b0)
	TEST   AL,10H
	JZ    setuexx
	MOV   AL,OFFSET 0AAH
	CALL  rd_1ce            ;ext(aa)
	AND   AL,0FH
	JZ    setuexx
	MOV   AX,OFFSET LFBA6H
	CALL  a_1ce             ;ext(a6) &= 1111 1011
	MOV   AX,OFFSET L02B0H
	CALL  o_1ce             ;ext(b0) |= 0000 0010
	MOV   AX,OFFSET L80BFH
	CALL  o_1ce             ;ext(bf) |= 1000 0000
setuexx: RET
	RET
;
setext:  MOV   DL,BYTE PTR ES:[BX]+7;seq(2)
	TEST  DL,40H            ;write plane mask, reserved bit
	JZ    setext1
	MOV   AX,OFFSET L02BEH  ;ext(be) |= 0000 0010
	CALL  o_1ce
setext1: TEST  DL,80H
	JZ    setext2
	MOV   AX,OFFSET L40B1H  ;ext(b1) |= 40
	CALL  o_1ce
setext2: TEST  BYTE PTR ES:[BX]+6,10H;seq(1), ts mode, shift 4
	JZ    setext3
	MOV   AX,OFFSET L20A3H  ;ext(a3) |= 20
	CALL  o_1ce
setext3: TEST  BYTE PTR ES:[BX]+54,40H
	JZ    setext4
	MOV   AX,OFFSET L02B8H  ;ext(b8) |= 02
	CALL  o_1ce
setext4: TEST  BYTE PTR ES:[BX]+8,10H;seq(3), font select?
	JZ    setext5
	MOV   AX,OFFSET L01B0H  ;ext(b0) |= 01
	CALL  o_1ce
setext5: MOV   DL,BYTE PTR ES:[BX]+55
	TEST  DL,20H
	JZ    setext6
	MOV   AX,OFFSET L80B5H  ;ext(b5) |= 80
	CALL  o_1ce
	MOV   AX,OFFSET L18B6H  ;ext(b6) |= 18
	CALL  o_1ce
setext6: TEST  DL,0C0H
	JZ    setext7
	MOV   AX,OFFSET setuex4 ;ext(b0) |= 0010 0000
	CALL  o_1ce
	MOV   AX,OFFSET L04B6H  ;ext(b6) |= 04
	CALL  o_1ce
	RET
setext7: TEST  DL,10H
	JZ    setext8
	MOV   AX,OFFSET L08B6H  ;ext(b6) |= 08
	CALL  o_1ce
	RET
setext8: MOV   DL,BYTE PTR ES:[BX]+57
	TEST  DL,20H
	JZ    setext9
	MOV   AX,OFFSET L40B3H  ;ext(b3) |= 40
	CALL  o_1ce
	MOV   AX,OFFSET L08BEH  ;ext(be) |= 08
	CALL  o_1ce
	MOV   AX,OFFSET plug7   ;ext(b6) |= 01
	CALL  o_1ce
	RET
setext9: MOV   AL,OFFSET 0B1H
	CALL  rd_1ce            ;ext(b1)
	TEST   AL,1
	JZ    setextx
	MOV   AX,OFFSET L05BEH  ;ext(be) |= 0000 0101
	CALL  o_1ce
	MOV   DX,WORD PTR [crtport]
	CMP   BYTE PTR [swid_qm],8
	JZ    setext10          ;if 8
	CMP   BYTE PTR [swid_qm],10H
	JZ    setext12          ;if 16
	MOV   AX,OFFSET L7C15H  ;crt(15) = 7c; vert blank start
	OUT   AX,DX
	JMP   SHORT setext11
setext10:TEST  BYTE PTR ES:[BX]+51,1
	JZ    setext11
	MOV   AX,OFFSET L9C15H  ;crt(15) = 9c
	OUT   AX,DX
setext11:MOV   AX,OFFSET L02B1H
	CALL  o_1ce             ;ext(b1) |= 2
setext12:MOV   AX,OFFSET L08B8H
	CALL  o_1ce             ;ext(b8) |= 8
	MOV   AX,OFFSET L88B4H
	CALL  o_1ce             ;ext(b4) |= 88
	TEST  BYTE PTR ES:[BX]+19,80H;crt(f), cursor low
	JNZ   setext14          ;if text mode?
	TEST  BYTE PTR ES:[BX]+6,80H;seq(1), tsmode, reserved
	JNZ   setext13
	MOV   AX,OFFSET L30B1H
	CALL  o_1ce             ;ext(b1) |= 30
	MOV   AX,OFFSET L80B3H
	CALL  o_1ce             ;ext(b3) |= 80
	JMP   SHORT setext15
setext13:MOV   AX,OFFSET L80B3H  ;ext(b3) |= 80
	CALL  o_1ce
setext14:MOV   AX,OFFSET L28B1H  ;ext(b1) |= 28
	CALL  o_1ce
setext15:TEST  BYTE PTR ES:[BX]+9,1;misc output,
	JNZ   setextx           ;if color
	MOV   AX,OFFSET L0BB8H  ;ext(b8) |= 0000 1011
	CALL  o_1ce             ;set monochrome?
setextx: RET
	RET
;
fff:     MOV   AX,OFFSET L80B9H
	CALL  o_1ce
	MOV   AX,OFFSET L80B6H
	CALL  o_1ce
	MOV   AX,OFFSET L7FB3H
	CALL  a_1ce
	MOV   DX,WORD PTR [crtport]
	MOV   AX,OFFSET L000CH
	OUT   AX,DX
	MOV   AL,OFFSET 0DH
	OUT   AX,DX
	MOV   AL,OFFSET 8
	OUT   AX,DX
	CMP   BYTE PTR [L0449H],3
	JLE   fff_2
	CMP   BYTE PTR [L0449H],7
	JNZ   fff_1
	MOV   AX,OFFSET LC7B1H
	CALL  a_1ce
fff_1:   RET
fff_2:   MOV   AH,BYTE PTR ES:[BX]+19
	MOV   DX,OFFSET L03D4H
	MOV   AL,OFFSET 9
	OUT   AX,DX
	MOV   AX,OFFSET x2
	CALL  a_1ce
	CMP   BYTE PTR [swid_qm],10H
	JZ    fff_3
	MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,1
	JNZ   fff_4
fff_3:   MOV   AX,OFFSET L08B1H
	CALL  o_1ce
	RET
fff_4:   MOV   AX,OFFSET L80B1H
	CALL  o_1ce
	RET
	RET
;
eee:     PUSH  BX
	MOV   DX,WORD PTR [crtport]
	ADD   DL,5
	MOV   BL,BYTE PTR [L0449H]
	AND   BL,1FH
	MOV   AL,OFFSET 30H
	CMP   BL,7
	JG    eee_3
	JZ    eee_2
	CMP   BL,6
	JNZ   eee_1
	MOV   AL,OFFSET 3FH
eee_1:   OUT   AL,DX
eee_2:   MOV   BYTE PTR [L0466H],AL
	XOR   BH,BH
	CLI                     ;Disable interupts.
	MOV   AL,BYTE PTR CS:[BX]+set_a
	MOV   BYTE PTR [L0465H],AL
	AND   DL,0F8H
	OUT   AL,DX
	MOV   DX,WORD PTR [crtport]
	ADD   DL,6
	IN    AL,DX
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 20H
	OUT   AL,DX
	STI                     ;Enable interupts.
eee_3:   POP   BX
	RET
set_a:   DB    2CH,28H,2DH,29H,2AH,2EH
	DB    1EH,29H
;
o_1ce:   PUSH  DX
	PUSH  CX
	MOV   DX,OFFSET esrport
	CLI                     ;Disable interupts.
	OUT   AL,DX             ;set index
	MOV   CL,AL
	INC   DX
	IN    AL,DX             ;read value
	OR    AH,AL             ;or in ah
	MOV   AL,CL
	DEC   DX
	OUT   AX,DX             ;set value
	STI                     ;Enable interupts.
	POP   CX
	POP   DX
	RET
;
a_1ce:   PUSH  DX                ;al=index, ah=mask
	PUSH  CX
	MOV   DX,OFFSET esrport
	CLI                     ;Disable interupts.
	OUT   AL,DX
	MOV   CL,AL
	INC   DX
	IN    AL,DX
	AND   AH,AL
	MOV   AL,CL
	DEC   DX
	OUT   AX,DX
	STI                     ;Enable interupts.
	POP   CX
	POP   DX
	RET
;
wr_1ce:  PUSH  DX                ;ax = value to write
	MOV   DX,OFFSET esrport
	OUT   AX,DX
	POP   DX
	RET
;
rd_1ce:  PUSH  DX                ;al = register
	MOV   DX,OFFSET esrport
	CLI                     ;Disable interupts.
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	STI                     ;Enable interupts.
	POP   DX
	RET
;
ao_1ce:  PUSH  DX                ;al=index, ch=mask, ah=or
	PUSH  CX
	MOV   DX,OFFSET esrport
	CLI                     ;Disable interupts.
	OUT   AL,DX             ;set the index...
	MOV   CL,AL             ;... and save it
	INC   DX
	IN    AL,DX             ;read the value (esrport+1)
	AND   AL,CH             ; & ch ...
	OR    AH,AL             ; | ah
	MOV   AL,CL             ;set index again
	DEC   DX
	OUT   AX,DX
	STI                     ;Enable interupts.
	POP   CX
	POP   DX
	RET
;
ao_b2_e1:PUSH  CX
	MOV   AL,OFFSET 0B2H
	MOV   AH,CH
	MOV   CH,OFFSET 0E1H
	CALL  ao_1ce
	POP   CX
	RET
;
efbe1ce: MOV   AX,OFFSET LEFBEH
	CALL  a_1ce
	RET
intr:    STI                     ;Interupt entry
	CLD                     ;Set forward direction flag.
	PUSH  DS
	PUSH  ES
	PUSH  DI
	PUSH  SI
	PUSH  BP
	PUSH  DX
	PUSH  CX
	PUSH  BX
	PUSH  AX
intr1:   PUSH  AX
	CMP   AH,12H
	JNZ   intr3             ;if not mode 0x12
	CMP   BL,'2'
	JZ    intr2
	CMP   BX,OFFSET L5506H
	JNZ   intr3
intr2:   MOV   AX,OFFSET L0024H  ;set mode to 0x24
	JMP   SHORT intr6
intr3:   MOV   AL,AH
	XOR   AH,AH
	SHL   AX,1
	CMP   AX,OFFSET L0020H
	NOP
	JL    intr6             ;if mode < 0x10
	CMP   AX,OFFSET 26H
	JZ    intr6             ;if mode 0x13
	MOV   SI,OFFSET L003AH  ;set mode = 0x3a/2 = 0x1d
	NOP
	PUSH  AX
	MOV   AL,OFFSET 0B4H
	CALL  rd_1ce
	TEST   AL,3
	JZ    intr4
	MOV   SI,OFFSET L0020H  ;set mode = 0x20/2 = 0x10
	NOP
	JMP   SHORT intr5
intr4:   MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,2
	JZ    intr5
	MOV   SI,OFFSET L0028H  ;set mode = 0x28/2 = 0x14
	NOP
intr5:   POP   AX
L2400H:  CMP   AX,SI
	JGE   intr7
intr6:   MOV   SI,AX
	POP   AX
	JMP   WORD PTR CS:[SI]+jmp;jump to mode processor
intr7:   POP   AX
intrx:   POP   AX
	POP   BX
	POP   CX
	POP   DX
	POP   BP
	POP   SI
	POP   DI
	POP   ES
	POP   DS
	INT   42H               ;User defined interupt.
	IRET                    ;Return from interupt.
iret:    POP   AX
	POP   BX
	POP   CX
	POP   DX
	POP   BP
	POP   SI
	POP   DI
	POP   ES
	POP   DS
	IRET                    ;Return from interupt.
	NOP
jmp:     DW    mode0,mode1,mode2
	DW    mode3,mode4,mode5
	DW    mode6,mode7,mode8
	DW    mode9,modea,modeb
	DW    modec,moded,modee
	DW    modef,mode10,mode11
	DW    mode12,mode13,iret
	DW    iret,iret,iret
	DW    iret,iret,mode1a
	DW    mode1b,mode1c
data1:   DB    24H,8,0,0C0H,0,0
	DB    0,0
L2466H:  DB    0,0,0,0,0,0
	DB    0,0,7EH,24H,0,0C0H
	DB    0,0,0,0,0,0
	DB    0,0,0,0,0,0
	DB    1AH,0,31H,69H,0,0C0H
	DB    0,0,0,0,0,0
	DB    0,0,0,0,0,0
	DB    0,0
L2492H:  DB    0,0,0,0,0,0
L2498H:  POP   SI
	AND   AL,5EH
	AND   AL,0E8H
	JMP   FAR 8726H:80F4H
	ADD   AL,0F3H
	MOV   WORD PTR [swid_qm],OFFSET L0008H
	MOV   BYTE PTR [scrnlenq],OFFSET 18H
	MOV   WORD PTR [plug4],OFFSET L37ECH
	MOV   WORD PTR [plug5],CS
	MOV   AH,AL
	MOV   AL,OFFSET 0B4H
	CALL  rd_1ce
	TEST   AL,2
	JZ    mode0_2
	AND   AH,80H
	MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	CMP   AL,'0'
	JZ    mode0_1
	MOV   AL,AH
	XOR   AH,AH
	JMP   intrx
mode0_1: OR    AH,7
mode0_2: MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,3
	JZ    mode0_3
	MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	CMP   AL,'0'
	JNZ   mode0_3
	MOV   AL,AH
	AND   AL,7FH
	CMP   AL,0FH
L24F2H:  JZ    mode0_3
	CMP   AL,7
	JZ    mode0_3
	CMP   AL,4
	JGE   mode0_3
	AND   AH,80H
	OR    AH,7
mode0_3: MOV   AL,AH
	PUSH  AX
	AND   AL,7FH
	MOV   AH,AL             ;ah = mode (53)
	CALL  gmodeinf          ;get mode info, bx=mode53
	POP   AX
	MOV   AH,AL
	AND   AL,7FH
	CMP   AL,7
	JLE   mode0_4
	CMP   DX,BX
	JNZ   mode0_4
	JMP   L25EDH
mode0_4: PUSH  AX
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	MOV   DL,OFFSET 0B4H
	MOV   CL,OFFSET 30H
	TEST  BYTE PTR ES:[BX]+9,1
	JZ    mode0_5
	MOV   DL,OFFSET 0D4H    ;select color mode
	MOV   CL,OFFSET 20H
	TEST   AL,1
	JNZ   mode0_8
	MOV   CH,OFFSET 9
	JMP   SHORT mode0_6
mode0_5: TEST   AL,1
	JZ    mode0_8
	MOV   CH,OFFSET 0BH
mode0_6: CALL  check
	OR    BH,BH
	JNZ   mode0_7
	AND   BYTE PTR [L0488H],0F0H
	OR    BYTE PTR [L0488H],CH
	JMP   SHORT mode0_8
mode0_7: POP   AX
	OR    BYTE PTR [L0487H],8
	AND   BYTE PTR [crtflag],0CFH
	OR    BYTE PTR [crtflag],CL
	MOV   WORD PTR [crtport],DX
	JMP   intrx
mode0_8: AND   BYTE PTR [crtflag],0CFH
	OR    BYTE PTR [crtflag],CL
	POP   AX
	AND   AH,80H
	AND   BYTE PTR [L0487H],7FH
	OR    BYTE PTR [L0487H],AH
	MOV   AH,AL
	MOV   AL,OFFSET 0B4H
	CALL  rd_1ce
	TEST   AL,3
	JZ    mode0_10
	CMP   AH,7
	JG    mode0_9
	MOV   BYTE PTR [L0449H],AH
	CALL  gmi
	CALL  setup
	MOV   CX,WORD PTR [L0460H]
	CALL  aaa
	CALL  eee
	CALL  fff
	CALL  clrmem
mode0_9: JMP   iret
mode0_10:MOV   BYTE PTR [L0449H],AH;set display mode flag
	CALL  gmi               ;get mode info (again)
	CALL  setari
	CALL  setup             ;base port, screen size, etc.
	CALL  setregs
	CALL  zzz
	MOV   CX,OFFSET extport
	CALL  wait
	CALL  L2F72H            ;plug some instructions (?)
	CALL  clrm
	CALL  eee
	PUSH  ES
	PUSH  BX
	CALL  L30E2H            ;more plugs
	POP   BX
	POP   ES
	CALL  clrm_10
	MOV   AL,OFFSET 0B1H
	CALL  rd_1ce            ;ext(b1)
	TEST   AL,2
	JZ    L25E7H
	MOV   CX,WORD PTR [L0460H]
	CALL  aaa
	JMP   SHORT L25E7H
L25E7H:  CALL  setar20
	CALL  get_is1
L25EDH:  JMP   iret
mode4:   POP   AX
	XOR   AH,AH
	PUSH  AX
	JMP   iret
mode5:   CALL  zeroDS
	MOV   BYTE PTR [L0462H],AL
	XOR   AH,AH
	PUSH  AX
	MUL   WORD PTR [scrnszqm]
	MOV   WORD PTR [L044EH],AX
	MOV   CX,AX
	CMP   BYTE PTR [L0449H],7
	JA    L2612H
	SAR   CX,1
L2612H:  MOV   AH,OFFSET 0CH
	CALL  L1A57H
	POP   SI
	SHL   SI,1
	MOV   AX,WORD PTR [SI]+L0450H
	CALL  L1AACH
	JMP   iret
mode6:   XOR   SI,SI
	MOV   DS,SI
L2628H:  MOV   AH,BYTE PTR [L0449H]
	CMP   AH,7
	JA    L2644H
	JZ    L2638H
	CMP   AH,3
	JG    L263EH
L2638H:  CALL  L1B7FH
	JMP   iret
L263EH:  CALL  L1C7EH
	JMP   iret
L2644H:  CMP   AH,13H
	JL    L264BH
	JZ    L266BH
L264BH:  CALL  L18DCH
	MOV   BL,AL
	MOV   AX,CX
	CALL  L191AH
	MOV   BP,WORD PTR [L044AH]
	PUSH  DX
	MUL   BYTE PTR [swid_qm]
	MUL   BP
	MOV   SI,DI
	ADD   SI,AX
	POP   DX
	CALL  L1938H
	JMP   iret
L266BH:  CALL  L18DCH
	MOV   BL,AL
	MOV   AX,CX
	CALL  L191AH
	SHL   DI,1
	SHL   DI,1
	SHL   DI,1
	PUSH  DX
	MOV   BP,WORD PTR [L044AH]
	SHL   BP,1
	SHL   BP,1
	SHL   BP,1
	MUL   WORD PTR [swid_qm]
	MUL   BP
	MOV   SI,DI
	ADD   SI,AX
	POP   DX
	CALL  L5F63H
	JMP   iret
mode7:   XOR   SI,SI
	MOV   DS,SI
	MOV   AH,BYTE PTR [L0449H]
	CMP   AH,7
	JZ    L26ABH
	JA    L26F5H
	CMP   AH,3
	JG    L26B1H
L26ABH:  CALL  L1BB0H
	JMP   iret
L26B1H:  CALL  L1C95H
	JMP   iret
L26B7H:  CALL  L18DCH
	MOV   BL,AL
	MOV   AL,CL
	MOV   AH,DH
	INC   AH
	CALL  L191AH
	SUB   DI,WORD PTR [L044AH]
	SHL   DI,1
	SHL   DI,1
	SHL   DI,1
	PUSH  DX
	MUL   WORD PTR [swid_qm]
	MUL   WORD PTR [L044AH]
	SHL   AX,1
	SHL   AX,1
	SHL   AX,1
	MOV   SI,DI
	SUB   SI,AX
	POP   DX
	MOV   BP,WORD PTR [L044AH]
	SHL   BP,1
	SHL   BP,1
	SHL   BP,1
	NEG   BP
	CALL  L5F63H
	JMP   iret
L26F5H:  CMP   AH,13H
	JL    L26FCH
	JZ    L26B7H
L26FCH:  CALL  L18DCH
	MOV   BL,AL
	MOV   AL,CL
	MOV   AH,DH
	INC   AH
	CALL  L191AH
	MOV   BP,WORD PTR [L044AH]
	PUSH  DX
	MUL   WORD PTR [swid_qm]
	MUL   BP
	SUB   DI,BP
	MOV   SI,DI
	SUB   SI,AX
	POP   DX
	NEG   BP
	CALL  L1938H
	JMP   iret
mode8:   XOR   SI,SI
	MOV   DS,SI
	MOV   SI,OFFSET LB800H
	CMP   BYTE PTR [L0449H],3
	JLE   L2741H
	CMP   BYTE PTR [L0449H],7
	JL    L2750H
	MOV   SI,OFFSET LB000H
	JZ    L2741H
	JMP   L27D8H
L2741H:  MOV   ES,SI
	CALL  L19E1H
	MOV   BX,AX
	POP   AX
	MOV   AX,WORD PTR ES:[BX]
	PUSH  AX
	JMP   iret
L2750H:  MOV   ES,SI
	MOV   AX,WORD PTR [L0450H]
	CALL  L1A66H
	MOV   SI,AX
	MOV   BX,OFFSET L0008H
	SUB   SP,BX
	MOV   BP,SP
	CMP   BYTE PTR [L0449H],6
	JNZ   L2789H
	MOV   CX,OFFSET L0004H
L276BH:  MOV   AL,BYTE PTR ES:[SI]
	MOV   BYTE PTR [BP]+0,AL
	INC   BP
	MOV   AL,BYTE PTR ES:[SI]+2000H
	MOV   BYTE PTR [BP]+0,AL
	INC   BP
	ADD   SI,50H
	LOOP  L276BH            ;Dec CX, loop if CX<>0.
L2780H:  MOV   AX,OFFSET L0200H
	MOV   DX,OFFSET start1
	JMP   SHORT L27A0H
	NOP
L2789H:  SHL   SI,1
	MOV   CX,OFFSET L0004H
L278EH:  CALL  L1A3BH
	ADD   SI,OFFSET aaa8
	CALL  L1A3BH
	SUB   SI,OFFSET 1FB0H
	LOOP  L278EH            ;Dec CX, loop if CX<>0.
	JMP   SHORT L2780H
L27A0H:  SUB   BP,BX
	LES   DI,DWORD PTR [plug4];Load ES:DI with 32b pointer.
L27A6H:  PUSH  SS
	POP   DS
	MOV   SI,BP
L27AAH:  MOV   CX,BX
	PUSH  SI
	PUSH  DI
	REPZ CMPSB              ;Compare strings.
	POP   DI
	POP   SI
	JZ    L27CFH
	INC   AL
	ADD   DI,BX
	DEC   DX
	JNZ   L27AAH
	DEC   AH
	JZ    L27CDH
	CALL  zeroDS
	LES   DI,DWORD PTR [plug2];Load ES:DI with 32b pointer.
	MOV   AL,OFFSET 80H
	MOV   DX,OFFSET start1
	JMP   SHORT L27A6H
L27CDH:  XOR   AL,AL
L27CFH:  MOV   SP,BP
	ADD   SP,BX
	POP   BX
	PUSH  AX
	JMP   iret
L27D8H:  CMP   BYTE PTR [L0449H],13H
	JL    L27E4H
	JNZ   L27E4H
	JMP   SHORT L283EH
	NOP
L27E4H:  MOV   AX,OFFSET LA000H
	MOV   ES,AX
	CALL  L1A79H
	MOV   SI,AX
	MOV   BX,WORD PTR [swid_qm]
	SUB   SP,BX
	MOV   BP,SP
	MOV   AX,OFFSET L0805H
	MOV   CX,OFFSET L0005H
	MOV   DX,OFFSET L03CEH
	CMP   BYTE PTR [L0449H],0FH
	JC    L2820H
	TEST  BYTE PTR [L0487H],60H
	JNZ   L2820H
	MOV   AH,OFFSET 0AH
	TEST  SI,L0001H
	JNZ   L2817H
	MOV   AH,OFFSET 5
L2817H:  MOV   AL,OFFSET 7
	OUT   AX,DX
	MOV   AX,OFFSET L1805H
	MOV   CX,OFFSET L0105H
L2820H:  OUT   AX,DX
	PUSH  CX
	MOV   CX,BX
L2824H:  MOV   AL,BYTE PTR ES:[SI]
	NOT   AL
	MOV   BYTE PTR [BP]+0,AL
	INC   BP
	ADD   SI,WORD PTR [L044AH]
	LOOP  L2824H            ;Dec CX, loop if CX<>0.
	POP   AX
	OUT   AX,DX
	MOV   AX,OFFSET L0100H
	MOV   DX,OFFSET L0100H
	JMP   L27A0H
L283EH:  MOV   AX,OFFSET LA000H
	MOV   ES,AX
	MOV   AX,WORD PTR [L0450H]
	MOV   DX,AX
	XOR   DH,DH
	PUSH  DX
	MOV   AL,AH
	XOR   AH,AH
	MUL   WORD PTR [L044AH]
	MUL   WORD PTR [swid_qm]
	POP   DX
	ADD   AX,DX
	MOV   SI,AX
	MOV   BX,WORD PTR [swid_qm]
	SUB   SP,BX
	MOV   BP,SP
	PUSH  BX
	MOV   DI,WORD PTR [L044AH]
	DEC   DI
	SHL   DI,1
	SHL   DI,1
	SHL   DI,1
	SHL   SI,1
	SHL   SI,1
	SHL   SI,1
L2876H:  MOV   CX,OFFSET L0008H
	XOR   AH,AH
L287BH:  MOV   AL,BYTE PTR ES:[SI]
	SHL   AH,1
	OR    AL,AL
	JZ    L2887H
	OR    AH,1
L2887H:  INC   SI
	LOOP  L287BH            ;Dec CX, loop if CX<>0.
	MOV   BYTE PTR [BP]+0,AH
	INC   BP
	ADD   SI,DI
	DEC   BX
	JNZ   L2876H
	POP   BX
	MOV   AX,OFFSET L0100H
	MOV   DX,OFFSET L0100H
	JMP   L27A0H
mode9:   XOR   BP,BP
	JMP   SHORT L28A4H
modea:   MOV   BP,OFFSET L0001H
L28A4H:  XOR   DI,DI
	MOV   DS,DI
	MOV   DI,OFFSET LB800H
	MOV   AH,BYTE PTR [L0449H]
	CMP   AH,3
	JLE   L28C1H
	MOV   DI,OFFSET LB000H
L28B7H:  CMP   AH,7
	JZ    L28C1H
	JL    L2901H
	JMP   L2A30H
L28C1H:  MOV   AH,BL
	MOV   SI,AX
	MOV   ES,DI
	MOV   BL,BH
	XOR   BH,BH
	SHL   BX,1
	MOV   AX,WORD PTR [BX]+L0450H
	MOV   DX,AX
	MOV   AL,BYTE PTR [L044AH]
	MUL   AH
	XOR   DH,DH
	ADD   AX,DX
	MOV   DI,AX
	SHL   DI,1
	OR    BL,BL
	JZ    L28EFH
	SHR   BL,1
	MOV   AX,WORD PTR [scrnszqm]
L28E9H:  ADD   DI,AX
	DEC   BL
	JNZ   L28E9H
L28EFH:  MOV   AX,SI
	OR    BP,BP
	JNZ   L28FAH
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	JMP   iret
L28FAH:  STOSB                   ;Store byt in AL in (DI)+-.
	INC   DI
	LOOP  L28FAH            ;Dec CX, loop if CX<>0.
	JMP   iret
L2901H:  PUSH  AX
	MOV   AX,OFFSET LB800H
	MOV   ES,AX
	MOV   AX,WORD PTR [L0450H]
	CALL  L1A66H
	MOV   DI,AX
	POP   AX
	TEST   AL,80H
	JZ    L291CH
	AND   AL,7FH
	LDS   SI,DWORD PTR [plug2];Load DS:SI with 32b pointer.
	JMP   SHORT L2921H
L291CH:  MOV   SI,OFFSET L37ECH
	PUSH  CS
	POP   DS
L2921H:  MOV   BH,AH
	XOR   AH,AH
	SHL   AX,1
	SHL   AX,1
	SHL   AX,1
	ADD   SI,AX
	CMP   BH,6
	JZ    L2994H
	SHL   DI,1
	MOV   DH,BL
	MOV   AL,OFFSET 55H
	AND   BL,3
	MUL   BL
	MOV   BL,AL
	MOV   BH,AL
L2941H:  MOV   DL,OFFSET 4
	TEST  DH,80H
	JNZ   L296DH
L2948H:  LODSB                   ;Load AL with byt at (SI)+-.
	CALL  and
	AND   AX,BX
	STOSW                   ;Store wrd in AX in (DI)+-.
	LODSB                   ;Load AL with byt at (SI)+-.
	CALL  and
	AND   AX,BX
	MOV   WORD PTR ES:[DI]+1FFEH,AX
	ADD   DI,4EH
	DEC   DL
	JNZ   L2948H
	SUB   SI,8
	SUB   DI,OFFSET 013EH
	LOOP  L2941H            ;Dec CX, loop if CX<>0.
	JMP   iret
L296DH:  LODSB                   ;Load AL with byt at (SI)+-.
	CALL  and
	AND   AX,BX
	XOR   WORD PTR ES:[DI],AX
	LODSB                   ;Load AL with byt at (SI)+-.
	CALL  and
	AND   AX,BX
	XOR   WORD PTR ES:[DI]+2000H,AX
	ADD   DI,50H
	DEC   DL
	JNZ   L296DH
	SUB   SI,8
	SUB   DI,OFFSET 013EH
	LOOP  L2941H            ;Dec CX, loop if CX<>0.
	JMP   iret
L2994H:  MOV   DL,OFFSET 4
	TEST  BL,80H
	JZ    L29B8H
L299BH:  LODSB                   ;Load AL with byt at (SI)+-.
	XOR   BYTE PTR ES:[DI],AL
	LODSB                   ;Load AL with byt at (SI)+-.
	XOR   BYTE PTR ES:[DI]+2000H,AL
	ADD   DI,50H
	DEC   DL
	JG    L299BH
	SUB   SI,8
	SUB   DI,OFFSET 013FH
	LOOP  L2994H            ;Dec CX, loop if CX<>0.
	JMP   iret
L29B8H:  LODSB                   ;Load AL with byt at (SI)+-.
	STOSB                   ;Store byt in AL in (DI)+-.
	LODSB                   ;Load AL with byt at (SI)+-.
	MOV   BYTE PTR ES:[DI]+1FFFH,AL
	ADD   DI,4FH
	DEC   DL
	JG    L29B8H
	SUB   SI,8
	SUB   DI,OFFSET 013FH
	LOOP  L2994H            ;Dec CX, loop if CX<>0.
	JMP   iret
L29D3H:  MOV   DL,BYTE PTR [swid_qm]
	MUL   DL
	MOV   SI,AX
	XOR   DH,DH
	MOV   BP,DX
	MOV   AX,WORD PTR [L0450H]
	XCHG  DL,AL
	MOV   DI,DX
	MUL   AH
	MUL   WORD PTR [L044AH]
	ADD   DI,AX
	SHL   DI,1
	SHL   DI,1
	SHL   DI,1
	MOV   DX,WORD PTR [L044AH]
	DEC   DX
	SHL   DX,1
	SHL   DX,1
	SHL   DX,1
	LDS   AX,DWORD PTR [plug4];Load DS:AX with 32b pointer.
	ADD   SI,AX
	MOV   AX,OFFSET LA000H
	MOV   ES,AX
L2A0AH:  PUSH  DI
	PUSH  CX
	MOV   CX,BP
L2A0EH:  MOV   CH,OFFSET 8
	LODSB                   ;Load AL with byt at (SI)+-.
	MOV   AH,AL
L2A13H:  MOV   AL,BH
	SHL   AH,1
	JNC   L2A1BH
	MOV   AL,BL
L2A1BH:  STOSB                   ;Store byt in AL in (DI)+-.
	DEC   CH
	JNZ   L2A13H
	ADD   DI,DX
	LOOP  L2A0EH            ;Dec CX, loop if CX<>0.
	POP   CX
	POP   DI
	ADD   DI,8
	SUB   SI,BP
	LOOP  L2A0AH            ;Dec CX, loop if CX<>0.
	JMP   iret
L2A30H:  CMP   AH,13H
	JL    L2A37H
	JZ    L29D3H
L2A37H:  CALL  L2A3DH
	JMP   iret
;
L2A3DH:  CMP   AH,11H
	JNZ   L2A48H
	AND   BL,80H
	OR    BL,0FH
L2A48H:  PUSH  AX
	MOV   AX,OFFSET LA000H
	MOV   ES,AX
	CALL  L1A79H
	MOV   DI,AX
	MOV   BP,WORD PTR [swid_qm]
	POP   AX
	MOV   SI,WORD PTR [L044AH]
	PUSH  SI
	MUL   BYTE PTR [swid_qm]
	LDS   SI,DWORD PTR [plug4];Load DS:SI with 32b pointer.
	ADD   SI,AX
	MOV   DH,OFFSET 3
	TEST  BL,80H
	JNZ   L2AB9H
	MOV   DL,OFFSET 0C4H
	MOV   AX,OFFSET L0F02H
	OUT   AX,DX
	POP   DX
	PUSH  DX
	PUSH  DI
	SUB   DX,CX
	MOV   AX,BP
	XCHG  AH,AL
	PUSH  BX
	MOV   BX,CX
L2A80H:  REPZ STOSB              ;Store byt in AL in (DI)+-.
	ADD   DI,DX
	MOV   CX,BX
	DEC   AH
	JNZ   L2A80H
	POP   BX
	POP   DI
L2A8CH:  MOV   DX,OFFSET seqport
	MOV   AL,OFFSET 2
	MOV   AH,BL
	OUT   AX,DX
	POP   BX
	DEC   BX
	MOV   DX,CX
L2A98H:  PUSH  DI
	MOV   CX,BP
L2A9BH:  LODSB                   ;Load AL with byt at (SI)+-.
	MOV   AH,BYTE PTR ES:[DI]
	STOSB                   ;Store byt in AL in (DI)+-.
	ADD   DI,BX
	LOOP  L2A9BH            ;Dec CX, loop if CX<>0.
	POP   DI
	INC   DI
	SUB   SI,BP
	DEC   DX
	JNZ   L2A98H
	MOV   DX,OFFSET L03CEH
	MOV   AX,OFFSET start
	OUT   AX,DX
	MOV   DL,OFFSET 0C4H
	MOV   AX,OFFSET L0F02H
	OUT   AX,DX
	RET
L2AB9H:  MOV   DL,OFFSET 0CEH
	MOV   AX,OFFSET setseq_3
	OUT   AX,DX
	JMP   SHORT L2A8CH
modec:   XOR   SI,SI
	MOV   DS,SI
	MOV   AH,BYTE PTR [L0449H]
	CMP   AH,7
	JA    L2ADBH
	JZ    L2AD8H
	CMP   AH,3
	JLE   L2AD8H
	CALL  L1C1CH
L2AD8H:  JMP   iret
L2ADBH:  CMP   AH,13H
	JL    L2AE2H
	JZ    L2B2FH
L2AE2H:  MOV   BL,AL
	CALL  L1AD2H
	MOV   DX,OFFSET L03CEH
	MOV   AL,OFFSET 8
	OUT   AX,DX
	MOV   AX,OFFSET LA000H
	MOV   DS,AX
	TEST  BL,80H
	JNZ   L2B15H
	MOV   DL,OFFSET 0C4H
	MOV   AX,OFFSET LFF02H
	OUT   AX,DX
	MOV   AH,BYTE PTR [DI]
	MOV   BYTE PTR [DI],OFFSET 0
	MOV   AH,BL
	OUT   AX,DX
	MOV   AH,BYTE PTR [DI]
	MOV   AH,OFFSET 0FFH
	MOV   BYTE PTR [DI],AH
	OUT   AX,DX
	MOV   DL,OFFSET 0CEH
L2B0EH:  MOV   AX,OFFSET LFF08H
	OUT   AX,DX
	JMP   iret
L2B15H:  MOV   AX,OFFSET setseq_3
	OUT   AX,DX
	MOV   DL,OFFSET 0C4H
	MOV   AL,OFFSET 2
	MOV   AH,BL
	OUT   AX,DX
	MOV   AH,BYTE PTR [DI]
	MOV   AH,OFFSET 0FFH
	MOV   BYTE PTR [DI],AH
	OUT   AX,DX
	MOV   DL,OFFSET 0CEH
	MOV   AX,OFFSET start
	OUT   AX,DX
	JMP   SHORT L2B0EH
L2B2FH:  PUSH  AX
	MOV   AX,OFFSET LA000H
	MOV   ES,AX
	MOV   AX,WORD PTR [L044AH]
	SHL   AX,1
	SHL   AX,1
	SHL   AX,1
	MUL   DX
	ADD   AX,CX
	MOV   DI,AX
	POP   AX
	MOV   BYTE PTR ES:[DI],AL
	JMP   iret
moded:   XOR   SI,SI
	MOV   DS,SI
	MOV   AH,BYTE PTR [L0449H]
	CMP   AH,7
	JA    L2B67H
	JZ    L2B64H
	CMP   AH,3
	JLE   L2B64H
	CALL  L1C3EH
	POP   BX
	PUSH  AX
L2B64H:  JMP   iret
L2B67H:  CMP   AH,13H
	JL    L2B6EH
	JZ    L2B97H
L2B6EH:  CALL  L1AD2H
	MOV   CL,AH
	MOV   AX,OFFSET LA000H
	MOV   DS,AX
	MOV   DX,OFFSET L03CEH
	XOR   BH,BH
	MOV   AX,OFFSET L0304H
L2B80H:  OUT   AX,DX
	SHL   BH,1
	MOV   BL,BYTE PTR [DI]
	AND   BL,CL
	JZ    L2B8CH
	OR    BH,1
L2B8CH:  DEC   AH
	JGE   L2B80H
	POP   AX
	MOV   AL,BH
	PUSH  AX
	JMP   iret
L2B97H:  MOV   AX,WORD PTR [L044AH]
	SHL   AX,1
	SHL   AX,1
	SHL   AX,1
	MUL   DX
	ADD   AX,CX
	MOV   DI,AX
	MOV   AX,OFFSET LA000H
	MOV   DS,AX
	POP   AX
	MOV   AL,BYTE PTR [DI]
	PUSH  AX
	JMP   iret
modee:   XOR   CX,CX
	MOV   DS,CX
	MOV   BH,BYTE PTR [L0462H]
	MOV   CL,BH
	SHL   CL,1
	MOV   SI,OFFSET L0450H
	ADD   SI,CX
	MOV   DX,WORD PTR [SI]
	MOV   CL,BYTE PTR [L0449H]
	CMP   AL,CR
	JA    L2C07H
	JNZ   L2BD3H
	XOR   DL,DL
	JMP   SHORT L2BE2H
L2BD3H:  CMP   AL,LF
	JNZ   L2BF1H
	CMP   DH,BYTE PTR [scrnlenq]
	JNZ   L2BE0H
	JMP   L2CD6H
L2BE0H:  INC   DH
L2BE2H:  MOV   WORD PTR [SI],DX
	CMP   CL,7
	JG    L2BEEH
	MOV   AX,DX
	CALL  L1AACH
L2BEEH:  JMP   iret
L2BF1H:  CMP   AL,7
	JNZ   L2BFBH
	CALL  setqm_2
	JMP   iret
L2BFBH:  CMP   AL,8
	JNZ   L2C07H
	OR    DL,DL
	JZ    L2BE2H
	DEC   DL
	JMP   SHORT L2BE2H
L2C07H:  MOV   DI,OFFSET LB800H
	CMP   CL,3
	JLE   L2C1AH
	MOV   DI,OFFSET LB000H
	CMP   CL,7
	JZ    L2C1AH
	JMP   L2C9BH
L2C1AH:  MOV   BL,BYTE PTR [L044AH]
	MOV   BH,AL
	MOV   AL,DH
	MUL   BL
	MOV   CL,DL
	ADD   CX,AX
	SHL   CX,1
	ADD   CX,WORD PTR [L044EH]
	MOV   ES,DI
	MOV   DI,CX
	MOV   AL,BH
	STOSB                   ;Store byt in AL in (DI)+-.
	SHR   CX,1
	INC   CX
	INC   DL
	CMP   DL,BL
	JZ    L2C51H
L2C3EH:  MOV   WORD PTR [SI],DX
	MOV   DX,WORD PTR [crtport]
	MOV   AL,OFFSET 0EH
	MOV   AH,CH
	OUT   AX,DX
	MOV   AH,CL
	INC   AL
	OUT   AX,DX
	JMP   iret
L2C51H:  XOR   BH,BH
	XOR   DL,DL
	SUB   CX,BX
	CMP   DH,BYTE PTR [scrnlenq]
	JZ    L2C63H
	INC   DH
	ADD   CX,BX
	JMP   SHORT L2C3EH
L2C63H:  MOV   WORD PTR [SI],DX
	MOV   DX,WORD PTR [crtport]
	MOV   AL,OFFSET 0EH
	MOV   AH,CH
	OUT   AX,DX
	MOV   AH,CL
	INC   AL
	OUT   AX,DX
	SUB   DI,BX
	SUB   DI,BX
L2C77H:  MOV   AH,BYTE PTR ES:[DI]+2
	PUSH  AX
	MOV   DI,WORD PTR [L044EH]
	MOV   SI,BX
	SHL   SI,1
	ADD   SI,DI
	MOV   AL,BYTE PTR [scrnlenq]
	MUL   BL
	MOV   CX,AX
	PUSH  ES
	POP   DS
	REPZ MOVSW              ;Move wrd, (SI)+- to (DI)+-.
	MOV   CX,BX
	POP   AX
	MOV   AL,OFFSET 20H
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	JMP   iret
L2C9BH:  PUSHF
	PUSH  CS
	PUSH  AX
	PUSH  DS
	PUSH  ES
	PUSH  DI
	PUSH  SI
	PUSH  BP
	PUSH  DX
	PUSH  CX
	PUSH  BX
	PUSH  AX
	MOV   BP,SP
	MOV   CX,OFFSET L2CB9H
	MOV   WORD PTR [BP]+18,CX
	MOV   CX,OFFSET L0001H
	MOV   AH,BYTE PTR [L0449H]
	JMP   L28B7H
L2CB9H:  INC   DL
	CMP   DL,BYTE PTR [L044AH]
	JZ    L2CC6H
L2CC1H:  MOV   WORD PTR [SI],DX
	JMP   iret
L2CC6H:  XOR   BH,BH
	XOR   DL,DL
	MOV   WORD PTR [SI],DX
	CMP   DH,BYTE PTR [scrnlenq]
	JZ    L2CFFH
	INC   DH
	JMP   SHORT L2CC1H
L2CD6H:  MOV   WORD PTR [SI],DX
	MOV   DI,OFFSET LB800H
	CMP   CL,3
	JLE   L2CECH
	MOV   DI,OFFSET LB000H
	CMP   CL,7
	JZ    L2CECH
	XOR   BH,BH
	JMP   SHORT L2CFFH
L2CECH:  MOV   AX,DX
	CALL  L1AACH
	MOV   ES,DI
	MOV   DI,CX
	SHL   DI,1
	DEC   DI
	MOV   BX,WORD PTR [L044AH]
	JMP   L2C77H
L2CFFH:  XOR   CX,CX
	MOV   DH,BYTE PTR [scrnlenq]
	MOV   DL,BYTE PTR [L044AH]
	DEC   DL
	MOV   AL,OFFSET 1
	JMP   L2628H
;
L2D10H:  XOR   CX,CX
	MOV   DH,BYTE PTR [scrnlenq]
	MOV   DL,BYTE PTR [L044AH]
	DEC   DL
	PUSHF
	PUSH  CS
	PUSH  AX
	PUSH  DS
	PUSH  ES
	PUSH  DI
	PUSH  SI
	PUSH  BP
	PUSH  DX
	PUSH  CX
	PUSH  BX
	PUSH  AX
	MOV   BP,SP
	MOV   AX,OFFSET L2D35H
	MOV   WORD PTR [BP]+18,AX
	MOV   AL,OFFSET 1
	JMP   L2628H
L2D35H:  RET
mode1:   CALL  zeroDS
	TEST  BYTE PTR [L0487H],8
	JNZ   L2D4AH
	POP   AX
	XOR   AH,AH
	PUSH  AX
	CALL  aaa
	JMP   iret
L2D4AH:  JMP   intrx
mode2:   CALL  zeroDS
	MOV   BL,BH
	XOR   BH,BH
	SHL   BX,1
	MOV   WORD PTR [BX]+L0450H,DX
	SHR   BL,1
	CMP   BYTE PTR [L0462H],BL
	JNZ   L2D67H
	MOV   AX,DX
	CALL  L1AACH
L2D67H:  JMP   iret
mode3:   CALL  zeroDS
	MOV   BL,BH
	XOR   BH,BH
	SHL   BX,1
	MOV   DX,WORD PTR [BX]+L0450H
	MOV   CX,WORD PTR [L0460H]
	POP   AX
	POP   BX
	ADD   SP,6
	POP   SI
	ADD   SP,4
	POP   DS
	IRET                    ;Return from interupt.
modef:   CALL  zeroDS
	MOV   AL,BYTE PTR [L0487H]
	AND   AL,80H
	OR    AL,BYTE PTR [L0449H]
	MOV   AH,BYTE PTR [L044AH]
	TEST  BYTE PTR [L0487H],8
	JNZ   L2DEDH
	CMP   BYTE PTR [L0449H],7
	JG    L2DEDH
	PUSH  CX
	MOV   CL,AH
	MOV   CH,BYTE PTR [scrnlenq]
	MOV   SI,OFFSET L2DFAH
L2DAEH:  CMP   SI,OFFSET mode11
	JZ    L2DECH
	CMP   CX,WORD PTR CS:[SI]
	JZ    L2DBEH
L2DB9H:  ADD   SI,4
	JMP   SHORT L2DAEH
L2DBEH:  MOV   BL,BYTE PTR CS:[SI]+3
	OR    BL,BL
	JZ    L2DE6H
	MOV   BH,BL
	AND   BL,0F0H
	JZ    L2DD6H
	OR    BL,4
	CMP   BL,BYTE PTR [crtport]
	JNZ   L2DB9H
L2DD6H:  AND   BH,0FH
	JZ    L2DE6H
	MOV   BL,BYTE PTR [swid_qm]
	AND   BL,0FH
	CMP   BL,BH
	JNZ   L2DB9H
L2DE6H:  AND   AL,80H
	OR    AL,BYTE PTR CS:[SI]+2
L2DECH:  POP   CX
L2DEDH:  MOV   BH,BYTE PTR [L0462H]
	ADD   SP,0AH
	POP   SI
	ADD   SP,4
	POP   DS
	IRET                    ;Return from interupt.
L2DFAH:  TEST  BYTE PTR [BX+SI],BL
	AND   DX,AX
	TEST  BYTE PTR [BP+DI],CH
	XOR   DX,AX
	TEST  BYTE PTR [BX+SI],BL
	DAA                     ;Decimal adjust for addition.
	MOV   AL,OFFSET 84H
	SUB   SI,WORD PTR [BX]
	MOV   AL,OFFSET 50H
	SBB   AX,OFFSET 5BH
mode11:  CALL  zeroDS
	MOV   DI,AX
	AND   AL,0FH
	AND   DI,OFFSET start3
	SHR   DI,1
	SHR   DI,1
	SHR   DI,1
	CMP   DI,6
	JG    L2E3CH
	JMP   WORD PTR CS:[DI]+2E29H
	XOR   WORD PTR [L2E4AH],BP
	MOV   DH,OFFSET 2EH
	SBB   BYTE PTR [BX],CH
	CMP   AL,3
	JZ    L2E3FH
	CMP   AL,4
	JG    L2E3CH
	CALL  sss
L2E3CH:  JMP   iret
L2E3FH:  MOV   DX,OFFSET seqport
	MOV   AL,OFFSET 3
	MOV   AH,BL
	OUT   AX,DX
	JMP   iret
L2E4AH:  CMP   AL,4
	JA    L2E3CH
	PUSH  AX
	PUSH  BX
	PUSH  AX
	PUSH  DX
	MOV   DX,WORD PTR [crtport]
	MOV   AL,OFFSET 7
	CALL  r_port
	MOV   AH,AL
	SHR   AH,1
	AND   AH,1
	TEST   AL,40H
	JZ    L2E69H
	OR    AH,2
L2E69H:  MOV   AL,OFFSET 12H
	CALL  r_port
	INC   AX
	MOV   WORD PTR [swid_qm],AX
	MOV   AL,OFFSET 9
	CALL  r_port
	TEST   AL,80H
	JZ    L2E7FH
	SHR   WORD PTR [swid_qm],1
L2E7FH:  POP   DX
	POP   AX
	MOV   BYTE PTR [scrnlenq],OFFSET 0FFH
	CALL  sss
	POP   BX
mmm:     POP   AX
	MOV   BL,BH
	XOR   BH,BH
	OR    AL,AL
	JZ    mmm1
	MOV   BL,OFFSET 0EH
	CMP   AL,1
	JZ    mmm1
	MOV   BL,OFFSET 8
	CMP   AL,2
	JZ    mmm1
	MOV   BL,OFFSET 10H
mmm1:    MOV   CL,BL
	MOV   CH,CL
	DEC   CH
	XCHG  BX,WORD PTR [swid_qm]
	PUSH  BX
	CALL  aaa
	POP   BX
	CALL  scrn
	JMP   iret
	OR    AL,AL
	JZ    mmm2
	DEC   AL
	JZ    mmm5
	DEC   AL
	JZ    mmm7
	DEC   AL
	JZ    mmm8
	DEC   AL
	JZ    mmm9
	JMP   iret
mmm2:    MOV   WORD PTR [plug2],BP
	MOV   WORD PTR [plug3],ES
mmm3:    JMP   iret
mmm4:    MOV   AX,CS
	MOV   ES,AX
mmm5:    DEC   DL
	OR    BL,BL
	JZ    mmm6
	XOR   BH,BH
	MOV   DL,BYTE PTR CS:[BX]+2EFCH
mmm6:    MOV   WORD PTR [plug4],BP
	MOV   WORD PTR [plug5],ES
	MOV   WORD PTR [swid_qm],CX
	MOV   BYTE PTR [scrnlenq],DL
	JMP   iret
	ADD   BYTE PTR [DI],CL
	SBB   BYTE PTR [BP+SI],CH
mmm7:    MOV   BP,OFFSET L3FECH
	MOV   CX,OFFSET L000EH
	JMP   SHORT mmm4
mmm8:    MOV   BP,OFFSET L37ECH
	MOV   CX,OFFSET L0008H
	JMP   SHORT mmm4
mmm9:    MOV   BP,OFFSET L4E84H
	MOV   CX,OFFSET extport
	JMP   SHORT mmm4
	OR    AL,AL
	JNZ   mmm3
	MOV   CX,WORD PTR [swid_qm]
	MOV   DL,BYTE PTR [scrnlenq]
	CMP   BH,7
	JA    mmm13
	CMP   BH,1
	JA    mmm11
	OR    BH,BH
	JNZ   mmm10
	LES   BP,DWORD PTR [plug2];Load ES:BP with 32b pointer.
mmm9_1:  JMP   SHORT mmm13
mmm10:   LES   BP,DWORD PTR [plug4];Load ES:BP with 32b pointer.
	JMP   SHORT mmm13
mmm_a:   DW    L3FECH,L37ECH,L3BECH
	DW    find_b,L4E84H,find_a
mmm11:   PUSH  CS
	POP   ES
	MOV   BL,BH
	XOR   BH,BH
	SUB   BL,2
	SHL   BX,1
	CMP   BX,LF
	JL    mmm12
	MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,2
	JNZ   mmm13
mmm12:   MOV   BP,WORD PTR CS:[BX]+mmm_a
mmm13:   POP   AX
	POP   BX
	ADD   SP,6
	POP   SI
	POP   DI
	POP   DS
	POP   DS
	IRET                    ;Return from interupt.
;
L2F72H:  PUSH  ES
	PUSH  BX
	MOV   AH,BYTE PTR [L0449H]
	CALL  L303EH
	POP   BX
	POP   ES
	RET
;
sss:     MOV   DI,AX
	MOV   SI,DX
	MOV   DX,OFFSET L03CEH
	MOV   AX,OFFSET L0005H  ;gr(5) = 0, gdc mode
	OUT   AX,DX
	MOV   AX,OFFSET L0406H  ;gr(6) = 4, miscellaneous
	OUT   AX,DX
	MOV   DL,OFFSET 0C4H
	MOV   AX,OFFSET L0402H  ;seq(2) = 4; write plan mask
	OUT   AX,DX
	MOV   AX,OFFSET L0704H  ;seg(4) = 7; memory mode
	OUT   AX,DX
	MOV   DX,SI
	MOV   AX,DI
	PUSH  AX
	AND   AL,7FH
	OR    AL,AL
	JZ    sss3
	PUSH  CS
	POP   ES
	XOR   DX,DX
	MOV   CX,OFFSET L0100H
	CMP   AL,4
	JNZ   sss1
	MOV   BH,OFFSET 10H
	MOV   BP,OFFSET L4E84H
	JMP   SHORT sss3
sss1:    DEC   AL
	JNZ   sss2
	MOV   BH,OFFSET 0EH
	MOV   BP,OFFSET L3FECH
	JMP   SHORT sss3
sss2:    MOV   BH,OFFSET 8
	MOV   BP,OFFSET L37ECH
sss3:    CALL  L2FF2H
	POP   AX
	TEST   AL,80H
	JZ    sss4
	CALL  findx
sss4:    MOV   DX,OFFSET seqport
	MOV   AX,OFFSET L0302H  ;seq(2) = 3; write plane mask
	OUT   AX,DX
	MOV   AX,OFFSET L0204H  ;seq(4) = 2; memory mode
	OUT   AX,DX
	MOV   DL,OFFSET 0CCH
	IN    AL,DX             ;input status 1
	TEST   AL,1
	MOV   AX,OFFSET L0E06H
	JNZ   sss5
	MOV   AH,OFFSET 0AH
sss5:    MOV   DL,OFFSET 0CEH
	OUT   AX,DX
	MOV   AX,OFFSET L0004H  ;gr(4) = 0;read plane select
	OUT   AX,DX
	MOV   AX,OFFSET L1005H  ;gr(5) = 10; gdc mode
	OUT   AX,DX
	RET
;
L2FF2H:  CLD                     ;Set forward direction flag.
	OR    CX,CX
	JNZ   L2FF8H
	RET
L2FF8H:  PUSH  DS
	PUSH  ES
	POP   DS
	MOV   AX,OFFSET LA000H
	MOV   ES,AX
	PUSH  CX
	MOV   CL,OFFSET 5
	MOV   DI,DX
	SHL   DI,CL
	POP   CX
	MOV   AL,OFFSET 40H
	PUSH  BX
	AND   BL,3
	MUL   BL
	POP   BX
L3011H:  TEST  BL,4
	JZ    L3018H
	ADD   AL,20H
L3018H:  XCHG  AH,AL
	MOV   DX,AX
	ADD   DI,DX
	MOV   SI,BP
	JCXZ  L303CH            ;Jump if CX=0.
	XOR   AL,AL
	XCHG  BH,BL
	XOR   BH,BH
L3028H:  PUSH  CX
	MOV   CX,BX
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	CMP   BX,' '
	JZ    L3039H
L3032H:  MOV   CX,OFFSET L0020H
	SUB   CX,BX
	REPZ STOSB              ;Store byt in AL in (DI)+-.
L3039H:  POP   CX
	LOOP  L3028H            ;Dec CX, loop if CX<>0.
L303CH:  POP   DS
	RET
;
L303EH:  CALL  gmodeinf
	MOV   AL,BYTE PTR ES:[BX]+2
	MOV   AH,BYTE PTR ES:[BX]+51
	TEST  AH,1
	JZ    L306BH
	MOV   BP,OFFSET L4E84H
	CMP   AL,10H
	JGE   L305FH
	MOV   BP,OFFSET L3FECH
	CMP   AL,0EH
	JGE   L305FH
	MOV   BP,OFFSET L37ECH
L305FH:  MOV   WORD PTR [plug4],BP
	MOV   WORD PTR [plug5],CS
	CALL  L3099H
	RET
L306BH:  MOV   AH,OFFSET 84H
	CMP   AL,10H
	JGE   L3084H
	MOV   AH,OFFSET 81H
	CMP   AL,0EH
	JZ    L3084H
	JG    L308EH
	MOV   AH,OFFSET 2
	CMP   AL,8
	JZ    L3084H
	OR    AH,80H
	JMP   SHORT L308EH
L3084H:  TEST  BYTE PTR ES:[BX]+5,1
	JZ    L308EH
	AND   AH,7FH
L308EH:  XCHG  AL,AH
	XOR   BL,BL
	CALL  sss
	CALL  bbb
	RET
;
L3099H:  MOV   AH,BYTE PTR [L0449H]
	PUSH  AX
	PUSH  ES
	PUSH  DI
	LES   DI,DWORD PTR [plug10];Load ES:DI with 32b pointer.
	LES   DI,DWORD PTR ES:[DI]+12;Load ES:DI with 32b pointer.
	MOV   BP,ES
	OR    BP,DI
	JZ    L30DEH
	MOV   BP,DI
L30B0H:  ADD   DI,7
L30B3H:  MOV   AL,BYTE PTR ES:[DI]
	CMP   AL,0FFH
	JZ    L30DEH
	CMP   AL,AH
	JZ    L30C1H
L30BEH:  INC   DI
	JMP   SHORT L30B3H
L30C1H:  MOV   DI,BP
	MOV   AL,BYTE PTR ES:[DI]
	DEC   AL
	MOV   BYTE PTR [scrnlenq],AL
	MOV   AX,WORD PTR ES:[DI]+1
	MOV   WORD PTR [swid_qm],AX
	LES   DI,DWORD PTR ES:[DI]+3;Load ES:DI with 32b pointer.
	MOV   WORD PTR [plug4],DI
	MOV   WORD PTR [plug5],ES
L30DEH:  POP   DI
	POP   ES
	POP   AX
	RET
;
L30E2H:  TEST  BYTE PTR ES:[BX]+51,1
	JZ    L30EAH
	RET
L30EAH:  LES   BX,DWORD PTR [plug10];Load ES:BX with 32b pointer.
	LES   BX,DWORD PTR ES:[BX]+8;Load ES:BX with 32b pointer.
	MOV   AX,ES
	OR    AX,BX
	JZ    L3117H
	MOV   DI,OFFSET L000BH
L30FBH:  MOV   AL,BYTE PTR ES:[BX+DI]
	CMP   AL,0FFH
	JZ    L3117H
	INC   DI
	CMP   BYTE PTR [L0449H],AL
	JNZ   L30FBH
	MOV   AL,BYTE PTR ES:[BX]
	XOR   AH,AH
	XCHG  AX,WORD PTR [swid_qm]
	MOV   BX,AX
	CALL  scrn
L3117H:  RET
;
scrn:    MOV   DX,WORD PTR [crtport]
	MOV   AH,BYTE PTR [swid_qm]
	DEC   AH
	AND   AH,1FH
	CLI                     ;Disable interupts.
	CMP   DL,0D4H
	JZ    scrn_1            ;if color
	MOV   AL,OFFSET 14H     ;crt index 0x14, underline row
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	AND   AL,0E0H
	OR    AL,AH
	OUT   AL,DX
	DEC   DX
scrn_1:  MOV   AL,OFFSET 9
	OUT   AL,DX             ;crt index 0x09, max row addr
	INC   DX
	IN    AL,DX
	AND   AL,0E0H
	OR    AL,AH
	OUT   AL,DX
	STI                     ;Enable interupts.
	MOV   CL,AL             ;compute screen size?
	MOV   AX,BX             ;.... or rows or something?
	MOV   DL,BYTE PTR [swid_qm]
	DIV   DL
	CMP   BYTE PTR [scrnlenq],0FFH
	JNZ   scrn_2
	MOV   BYTE PTR [scrnlenq],AL
	DEC   BYTE PTR [scrnlenq]
scrn_2:  MUL   DL
	TEST  CL,80H
	JZ    scrn_3
	SHL   AX,1
scrn_3:  DEC   AX
	MOV   AH,AL
	MOV   AL,OFFSET 12H
	MOV   DX,WORD PTR [crtport]
	OUT   AX,DX             ;crt? ind 12, vertical disp end
	MOV   AL,BYTE PTR [L044AH]
	MOV   AH,BYTE PTR [scrnlenq]
	INC   AH
	MUL   AH
	SHL   AX,1
	ADD   AX,OFFSET L0100H
	MOV   WORD PTR [scrnszqm],AX
scrn_4:  RET
;
findx:   PUSH  DS
	XOR   BH,BH
	MOV   BL,AH
	MOV   SI,OFFSET find_a
	CMP   BL,10H
	JZ    find1
	MOV   SI,OFFSET find_b
	CMP   BL,0EH
	JZ    find1
	POP   DS
	RET
find1:   PUSH  CS
	POP   DS
find2:   MOV   DI,WORD PTR [SI]
	OR    DI,DI
	JZ    find3
	AND   DI,OFFSET L00FFH
	INC   SI
	MOV   CL,OFFSET 5
	SHL   DI,CL
	ADD   DI,DX
	MOV   CX,BX
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	JMP   SHORT find2
find3:   POP   DS
	RET
;
bbb:     MOV   AH,BYTE PTR [L0449H]
	PUSH  AX
	PUSH  ES
	PUSH  DI
	LES   DI,DWORD PTR [plug10];Load ES:DI with 32b pointer.
	LES   DI,DWORD PTR ES:[DI]+8;Load ES:DI with 32b pointer.
	MOV   BP,ES
	OR    BP,DI
	JZ    bbb4
	MOV   BP,DI
	ADD   DI,0BH
bbb1:    MOV   AL,BYTE PTR ES:[DI]
	CMP   AL,0FFH
	JZ    bbb4
	CMP   AL,AH
	JZ    bbb2
	INC   DI
	JMP   SHORT bbb1
bbb2:    MOV   DI,BP
	MOV   BH,BYTE PTR ES:[DI]
	MOV   BL,BYTE PTR ES:[DI]+1
	MOV   CX,WORD PTR ES:[DI]+2
	MOV   DX,WORD PTR ES:[DI]+4
	MOV   AL,BYTE PTR ES:[DI]+10
	CMP   AL,0FFH
	JZ    bbb3
	DEC   AL
bbb3:    PUSH  AX
	MOV   AL,BYTE PTR [scrnlenq]
	INC   AL
	MUL   BYTE PTR [swid_qm]
	MOV   WORD PTR [swid_qm],AX
	POP   AX
	MOV   BYTE PTR [scrnlenq],AL
	LES   DI,DWORD PTR ES:[DI]+6;Load ES:DI with 32b pointer.
	MOV   BP,DI
	XOR   AL,AL
	CALL  sss
bbb4:    POP   DI
	POP   ES
	POP   AX
	RET
mode12:  CALL  zeroDS
	CMP   BX,OFFSET L5506H
	JNZ   L3236H
	MOV   AH,AL
	CALL  gmodeinf
	PUSH  BX
	POP   BP
	CMP   BP,DX
	JNZ   L322CH
	MOV   BP,OFFSET LFFFFH
L322CH:  POP   AX
	POP   BX
	POP   CX
	POP   DX
	POP   DI
	POP   DI
	POP   DI
	POP   DS
	POP   DS
	IRET                    ;Return from interupt.
L3236H:  CMP   BL,10H
	JNZ   L323EH
	JMP   L33A5H
L323EH:  CMP   BL,' '
	JNZ   L3246H
	JMP   L33CEH
L3246H:  CMP   BL,'2'
	JNZ   L3275H
	MOV   AH,AL
	MOV   DX,OFFSET svgaport
	MOV   AL,OFFSET 0EH
	OUT   AL,DX
	MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	MOV   BL,AL
	OR    AH,AH
	JZ    L326AH
	DEC   AH
	JNZ   L3272H
	TEST  BL,3
	JNZ   L3272H
	XOR   AL,AL
	OUT   AL,DX
L326AH:  TEST  BL,3
	JNZ   L3272H
	JMP   L3338H
L3272H:  JMP   iret
L3275H:  CMP   BL,'0'
	JZ    L3288H
	PUSH  AX
	MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,2
	POP   AX
	JNZ   L3272H
	JMP   L331FH
L3288H:  PUSH  AX
	CALL  check
	MOV   CH,BH
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	MOV   CL,AL
	POP   AX
	OR    AL,AL
	JNZ   L32C9H
	MOV   BH,OFFSET 8
	TEST  CL,1
	JNZ   L32B2H
	OR    CH,CH
	JNZ   L32AFH
	MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	CMP   AL,'0'
	JNZ   L32BDH
	MOV   BH,OFFSET 2
L32AFH:  JMP   L333CH
L32B2H:  MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	CMP   AL,'0'
	JNZ   L32BDH
	MOV   BH,OFFSET 2
L32BDH:  AND   BYTE PTR [flag489],6FH
	OR    BYTE PTR [flag489],80H
	JMP   SHORT L32FFH
L32C9H:  CMP   AL,1
	JNZ   L330FH
	AND   BYTE PTR [flag489],6FH
L32D2H:  MOV   BH,OFFSET 9
	TEST  CL,1
	JNZ   L32EEH
	MOV   BH,OFFSET 0BH
	MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	CMP   AL,'0'
	JZ    L32FFH
	MOV   BH,OFFSET 9
	OR    CH,CH
	JZ    L32FFH
	MOV   BH,OFFSET 5
	JMP   SHORT L32FFH
L32EEH:  MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	CMP   AL,'0'
	JNZ   L32FFH
	MOV   BH,OFFSET 0BH
	OR    CH,CH
	JZ    L32FFH
	MOV   BH,OFFSET 3
L32FFH:  MOV   BL,BYTE PTR [L0488H]
	AND   BL,0F0H
	OR    BL,BH
	MOV   BYTE PTR [L0488H],BL
	JMP   SHORT L3338H
	NOP
L330FH:  CMP   AL,2
	JNZ   L333CH
	AND   BYTE PTR [flag489],6FH
	OR    BYTE PTR [flag489],10H
	JMP   SHORT L32D2H
L331FH:  CMP   BL,'1'
	JNZ   L333FH
	OR    AL,AL
	JZ    L3333H
	CMP   AL,1
	JNZ   L3338H
	OR    BYTE PTR [flag489],8
	JMP   SHORT L3338H
L3333H:  AND   BYTE PTR [flag489],0F7H
L3338H:  POP   AX
	MOV   AL,OFFSET 12H
	PUSH  AX
L333CH:  JMP   iret
L333FH:  CMP   BL,'3'
	JNZ   L335AH
	CMP   AL,0
	JZ    L3353H
	CMP   AL,1
	JNZ   L3338H
	AND   BYTE PTR [flag489],0FDH
	JMP   SHORT L3338H
L3353H:  OR    BYTE PTR [flag489],2
	JMP   SHORT L3338H
L335AH:  CMP   BL,'4'
	JNZ   L3378H
	CMP   AL,0
	JNZ   L336AH
	AND   BYTE PTR [L0487H],0FEH
	JMP   SHORT L3338H
L336AH:  CMP   AL,1
	JNZ   L3375H
	OR    BYTE PTR [L0487H],1
	JMP   SHORT L3338H
L3375H:  JMP   iret
L3378H:  CMP   BL,'6'
	JNZ   L33A2H
	MOV   BX,OFFSET LFF20H
	CMP   AL,1
	JZ    L338DH
	MOV   BX,OFFSET LDF00H
	CMP   AL,0
	JZ    L338DH
	JMP   SHORT L3338H
L338DH:  CALL  L3392H
	JMP   SHORT L3338H
;
L3392H:  CLI                     ;Disable interupts.
	MOV   DX,OFFSET seqport
	MOV   AL,OFFSET 1
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	AND   AL,BH
	OR    AL,BL
	OUT   AL,DX
	STI                     ;Enable interupts.
	RET
L33A2H:  JMP   iret
L33A5H:  MOV   BL,OFFSET 3
	MOV   BH,OFFSET 0
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	TEST   AL,1
	JNZ   L33B3H
	MOV   BH,OFFSET 1
L33B3H:  MOV   AL,BYTE PTR [L0488H]
	MOV   AH,AL
	MOV   CL,OFFSET 4
	SHR   AH,CL
	AND   AX,OFFSET 0F0FH
	MOV   CX,AX
	POP   AX
	MOV   AL,OFFSET 12H
	ADD   SP,4
	POP   DX
	POP   BP
	POP   SI
	POP   DI
	POP   ES
	POP   DS
	IRET                    ;Return from interupt.
L33CEH:  CLI                     ;Disable interupts.
	MOV   WORD PTR [L0014H],OFFSET L33F5H
	MOV   WORD PTR [L0016H],CS
	STI                     ;Enable interupts.
	JMP   iret
;
L33DDH:  PUSH  DX
	XOR   AH,AH
	XOR   DX,DX
	MOV   AL,OFFSET 0DH
	INT   17H
	TEST  AH,29H
	JNZ   L33F3H
	XOR   AH,AH
	XOR   DX,DX
	MOV   AL,OFFSET 0AH
	INT   17H
L33F3H:  POP   DX
	RET
L33F5H:  PUSH  DS
	PUSH  ES
	PUSH  DI
	PUSH  SI
	PUSH  BP
	PUSH  DX
	PUSH  CX
	PUSH  BX
	PUSH  AX
	CALL  zeroDS
	CMP   BYTE PTR [L0500H],1
	JZ    intx
	MOV   BYTE PTR [L0500H],OFFSET 1
	MOV   BL,BYTE PTR [L0462H]
	XOR   BH,BH
	SHL   BX,1
	MOV   DI,BX
	MOV   AX,WORD PTR [DI]+L0450H
	MOV   BH,BYTE PTR [L0462H]
	PUSH  AX
	XOR   DH,DH
	MOV   CL,BYTE PTR [scrnlenq]
	XOR   CH,CH
	INC   CX
L3429H:  PUSH  CX
	MOV   CX,WORD PTR [L044AH]
	XOR   DL,DL
	CALL  L33DDH
	TEST  AH,29H
	JNZ   L347AH
L3438H:  PUSH  CX
	PUSH  DX
	MOV   WORD PTR [DI]+L0450H,DX
	MOV   AH,OFFSET 8
	INT   10H               ;Display control interupt.
	OR    AL,AL
	JNZ   L3448H
	MOV   AL,OFFSET 20H
L3448H:  XOR   DX,DX
	XOR   AH,AH
	INT   17H
	TEST  AH,29H
	JNZ   L3478H
	POP   DX
	INC   DL
	POP   CX
	LOOP  L3438H            ;Dec CX, loop if CX<>0.
	INC   DH
	POP   CX
	LOOP  L3429H            ;Dec CX, loop if CX<>0.
	CALL  L33DDH
	XOR   AL,AL
L3463H:  MOV   BYTE PTR [L0500H],AL
	POP   AX
	MOV   WORD PTR [DI]+L0450H,AX
	CALL  L1AACH
intx:    POP   AX
	POP   BX
	POP   CX
	POP   DX
	POP   BP
	POP   SI
	POP   DI
	POP   ES
	POP   DS
	IRET                    ;Return from interupt.
L3478H:  POP   DX
	POP   CX
L347AH:  POP   CX
	MOV   AL,OFFSET 0FFH
	JMP   SHORT L3463H
mode13:  CMP   AL,4
	JL    L3486H
L3483H:  JMP   iret
L3486H:  JCXZ  L3483H            ;Jump if CX=0.
	PUSH  BX
	CALL  zeroDS
	XCHG  BH,BL
	XOR   BH,BH
	SHL   BX,1
	MOV   DI,BX
	ADD   DI,OFFSET L0450H
	MOV   SI,WORD PTR [DI]
	POP   BX
	MOV   WORD PTR [DI],DX
	PUSH  SI
	MOV   SI,AX
L34A0H:  PUSH  CX
	PUSH  BX
	MOV   AL,BYTE PTR ES:[BP]+0
	INC   BP
	CMP   AL,CR
	JG    L34CAH
	JNZ   L34B1H
	XOR   DL,DL
	JMP   SHORT L34F1H
L34B1H:  CMP   AL,LF
	JZ    L34E7H
	CMP   AL,7
	JNZ   L34BEH
	CALL  setqm_2
	JMP   SHORT L3522H
L34BEH:  CMP   AL,8
	JNZ   L34CAH
	OR    DL,DL
	JZ    L3522H
	DEC   DL
	JMP   SHORT L34F1H
L34CAH:  TEST  SI,L0002H
	JZ    L34D5H
	MOV   BL,BYTE PTR ES:[BP]+0
	INC   BP
L34D5H:  MOV   CX,OFFSET L0001H
	MOV   AH,OFFSET 9
	CALL  pushall
	INC   DL
	CMP   DL,BYTE PTR [L044AH]
	JC    L34F1H
	XOR   DL,DL
L34E7H:  MOV   WORD PTR [DI],DX
	CMP   DH,BYTE PTR [scrnlenq]
	JNC   L34F5H
	INC   DH
L34F1H:  MOV   WORD PTR [DI],DX
	JMP   SHORT L3522H
L34F5H:  PUSH  AX
	CMP   BYTE PTR [L0449H],3
	JG    L3505H
L34FDH:  MOV   AX,OFFSET L0800H
	CALL  pushall
	JMP   SHORT L350EH
L3505H:  CMP   BYTE PTR [L0449H],7
	JZ    L34FDH
	XOR   AH,AH
L350EH:  XCHG  BH,BYTE PTR [L0462H]
	PUSH  BX
	MOV   BH,AH
	PUSH  BP
	CALL  L2D10H
	POP   BP
	POP   BX
	XCHG  BH,BYTE PTR [L0462H]
	POP   AX
	MOV   DX,WORD PTR [DI]
L3522H:  POP   BX
	POP   CX
	LOOP  L353DH            ;Dec CX, loop if CX<>0.
	POP   DX
	TEST  SI,L0001H
	JNZ   L352FH
	MOV   WORD PTR [DI],DX
L352FH:  MOV   AX,WORD PTR [DI]
	CMP   BH,BYTE PTR [L0462H]
L3535H:  JNZ   L353AH
	CALL  L1AACH
L353AH:  JMP   iret
L353DH:  JMP   L34A0H
modeb:   CALL  zeroDS
	CMP   BYTE PTR [crtport],0B4H
	JZ    L3555H
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	TEST   AL,1
	JNZ   L3558H
	JMP   intrx
L3555H:  JMP   iret
L3558H:  MOV   AL,OFFSET 0B4H
	CALL  rd_1ce
	TEST   AL,1
	JZ    L3567H
	CALL  L3630H
	JMP   iret
L3567H:  CALL  fiddle
	OR    BH,BH
	JNZ   L358AH
	MOV   AH,BL
	AND   AH,1FH
	AND   BYTE PTR [L0466H],0E0H
	OR    BYTE PTR [L0466H],AH
	CALL  L35B2H
	MOV   BL,BYTE PTR [L0466H]
	AND   BL,20H
	MOV   CL,OFFSET 5
	SHR   BL,CL
L358AH:  CMP   BYTE PTR [L0449H],3
	JLE   L35ACH
	MOV   AL,BYTE PTR [L0466H]
	AND   AL,0DFH
	AND   BL,1
	JZ    L359DH
	OR    AL,20H
L359DH:  MOV   BYTE PTR [L0466H],AL
	AND   AL,10H
	OR    AL,2
	OR    BL,AL
	CALL  L3600H
	JMP   iret
L35ACH:  CALL  setar20
	JMP   iret
;
L35B2H:  PUSH  BX
	PUSH  AX
	AND   BL,0FH
	MOV   BH,BL
	SHL   BL,1
	AND   BX,OFFSET 0710H
	OR    BL,BH
	CMP   BYTE PTR [L0449H],4
	JL    L35D6H
	MOV   AH,OFFSET 0
	MOV   AL,BL
	CALL  L1897H
	OR    BP,BP
	JZ    L35D6H
	MOV   BYTE PTR ES:[DI],BL
L35D6H:  MOV   AL,BL
	CALL  L35E6H
	OR    BP,BP
	JZ    L35E3H
	MOV   BYTE PTR ES:[DI]+16,BL
L35E3H:  POP   AX
	POP   BX
	RET
;
L35E6H:  MOV   AH,AL
	PUSH  DS
	CALL  zeroDS
	CMP   BYTE PTR [L0449H],13H
	POP   DS
	JG    L35FCH
	MOV   AL,AH
	MOV   AH,OFFSET 11H
	CALL  L1897H
	RET
L35FCH:  CALL  setar20
	RET
;
L3600H:  CALL  getisa
	PUSHF
	CLI                     ;Disable interupts.
L3605H:  IN    AL,DX
	TEST   AL,8
	JNZ   L3605H
L360AH:  IN    AL,DX
	TEST   AL,8
	JZ    L360AH
	MOV   DL,OFFSET 0C0H
	MOV   CX,OFFSET start
	MOV   AH,OFFSET 1
L3616H:  MOV   AL,AH
	OUT   AL,DX
	MOV   AL,BL
	OUT   AL,DX
	OR    BP,BP
	JZ    L3624H
	INC   DI
	MOV   BYTE PTR ES:[DI],BL
L3624H:  INC   AH
	ADD   BL,2
	LOOP  L3616H            ;Dec CX, loop if CX<>0.
	MOV   AL,OFFSET 20H
	OUT   AL,DX
	POPF
	RET
;
L3630H:  MOV   AL,BYTE PTR [L0466H]
	OR    BH,BH
	JZ    L3648H
	AND   AL,0DFH
	TEST  BL,1
	JZ    L3640H
	OR    AL,20H
L3640H:  MOV   BYTE PTR [L0466H],AL
	MOV   DX,OFFSET L03D9H
	OUT   AL,DX
	RET
L3648H:  AND   AL,0E0H
	AND   BL,1FH
	OR    AL,BL
	JMP   SHORT L3640H
;
zzz:     PUSH  BX
	PUSH  CX
	MOV   CX,OFFSET L000DH
	CMP   BYTE PTR [L0449H],13H
	JA    zzz2              ;always?  mode 13?
	CMP   BYTE PTR [L0449H],12H
	JNZ   zzz3              ;if not mode 12?
	MOV   AL,OFFSET 0BAH
	CALL  rd_1ce            ;ext(ba)
	TEST   AL,1
	JZ    zzz3
	JMP   SHORT zzz2
zzz1:    ADD   CL,0BH
	CMP   CL,'9'
	JGE   zzz3
zzz2:    MOV   BL,OFFSET 1
	ADD   BL,CL
	CALL  strobes
	CMP   BYTE PTR [L0449H],BH
	JZ    zzz4
	CMP   BYTE PTR [L0449H],BL
	JZ    zzz4
	MOV   BL,OFFSET 2
	ADD   BL,CL
	CALL  strobes
	CMP   BYTE PTR [L0449H],BH
	JZ    zzz4
	CMP   BYTE PTR [L0449H],BL
	JZ    zzz4
	JMP   SHORT zzz1
zzz3:    POP   CX
	POP   BX
	RET
zzz4:    MOV   BL,OFFSET 0
	ADD   BL,CL
	CALL  strobes
	TEST  BH,1
	JNZ   zzz1
	TEST  BL,40H
	JZ    zzz7
	MOV   AL,OFFSET 11H
	MOV   DX,WORD PTR [crtport]
	CALL  r_port
	AND   AL,7FH
	MOV   AH,OFFSET 11H
	XCHG  AH,AL
	OUT   AX,DX
	MOV   BL,OFFSET 3
	ADD   BL,CL
	CALL  strobes
	MOV   DX,WORD PTR [crtport]
	MOV   AL,OFFSET 0
	OUT   AX,DX
	MOV   AL,OFFSET 6
	MOV   AH,BL
	OUT   AX,DX
	MOV   BL,OFFSET 4
	ADD   BL,CL
	CALL  strobes
	MOV   DX,WORD PTR [crtport]
	MOV   AL,OFFSET 4
	OUT   AX,DX
	INC   AL
	MOV   AH,BL
	OUT   AX,DX
	MOV   BL,OFFSET 8
	ADD   BL,CL
	CALL  strobes
	MOV   DX,WORD PTR [crtport]
	MOV   AL,OFFSET 7
zzz5:    OUT   AX,DX
	MOV   BL,OFFSET 5
zzz6:    ADD   BL,CL
	CALL  strobes
	MOV   DX,WORD PTR [crtport]
	MOV   AL,OFFSET 10H
	OUT   AX,DX
	INC   AL
	MOV   AH,BL
	OUT   AX,DX
	MOV   BL,OFFSET 0
	ADD   BL,CL
	CALL  strobes
zzz7:    MOV   DX,OFFSET miscoutr
	IN    AL,DX
	AND   AL,3FH
	AND   BH,0C0H
	OR    AL,BH
	MOV   DL,OFFSET 0C2H
	OUT   AL,DX
	JMP   zzz3
;
strobe2: OR    AH,2
	OUT   AX,DX
	CALL  sleep
	AND   AH,0FDH
	OUT   AX,DX
	STI                     ;Enable interupts.
;
sleep:   PUSH  CX
	MOV   CX,OFFSET extport
sleep1:  LOOP  sleep1            ;Dec CX, loop if CX<>0.
	POP   CX
	RET
;
strobes: PUSH  DX
	MOV   DX,OFFSET esrport
	MOV   AL,OFFSET 0A6H
	CALL  r_port            ;ext(a6)
	PUSH  AX
	MOV   AH,AL
	AND   AH,0FBH
	MOV   AL,OFFSET 0A6H    ;ext(a6) &= 1111 1011
	OUT   AX,DX
	CLI                     ;Disable interupts.
	MOV   AL,OFFSET 0B3H
	OUT   AL,DX             ;ext(b3)
	INC   DX
	IN    AL,DX
	MOV   AH,AL
	DEC   DX
	MOV   AL,OFFSET 0B3H
	STI                     ;Enable interupts.
	CALL  strobe2
	AND   AH,0FEH
	OUT   AX,DX
	OR    AH,4
	OUT   AX,DX
	OR    AH,8
	OUT   AX,DX
	CALL  strobe2
	OR    AH,1
	OUT   AX,DX
	CALL  strobe2
	OR    AH,1
	OUT   AX,DX
	CALL  strobe2
	AND   AH,0FEH
strobes1:OUT   AX,DX
	CALL  strobe2
	MOV   BH,OFFSET 20H
strobes2:TEST  BH,BL
	JZ    strobes3
	OR    AH,1
	OUT   AX,DX
	JMP   SHORT strobes4
strobes3:AND   AH,0FEH
	OUT   AX,DX
strobes4:CALL  strobe2
	SHR   BH,1
	JNZ   strobes2
	AND   AH,0FEH
	OUT   AX,DX
	CALL  strobe2
	PUSH  CX
	XOR   BX,BX
	MOV   CX,OFFSET extport
strobes5:PUSH  AX
	SHL   BX,1
	MOV   AL,OFFSET 0B7H
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	DEC   DX
	TEST   AL,8
	JZ    strobes6
	OR    BX,1
strobes6:POP   AX
	CALL  strobe2
	LOOP  strobes5          ;Dec CX, loop if CX<>0.
	POP   CX
	AND   AH,0F7H
	OUT   AX,DX
	CALL  strobe2
	AND   AH,0FBH
	OUT   AX,DX
	POP   AX
	MOV   AH,AL
	MOV   AL,OFFSET 0A6H
	OUT   AX,DX
	CALL  sleep
	POP   DX
	MOV   AX,BX
	RET
;
pushall: PUSHF
	PUSH  CS
	PUSH  AX
	PUSH  DS
	PUSH  ES
	PUSH  DI
	PUSH  SI
	PUSH  BP
	PUSH  DX
	PUSH  CX
	PUSH  BX
	PUSH  AX
	PUSH  AX
	PUSH  BP
	MOV   BP,SP
	MOV   AX,OFFSET L37EAH
	MOV   WORD PTR [BP]+22,AX
	POP   BP
	POP   AX
	CLD                     ;Set forward direction flag.
	JMP   intr1
L37EAH:  DB    0C3H,90H
L37ECH:  DB    0,0,0,0,0,0
	DB    0,0,7EH,81H,0A5H,81H
	DB    0BDH,99H,81H,7EH,7CH,0FEH
	DB    0D6H
L37FFH:  DB    0BAH,0C6H,0FEH,7CH,0
L3804H:  DB    0C6H,0EEH,0FEH,0FEH,7CH,38H
	DB    10H,0,10H,38H
L380EH:  DB    7CH,0FEH,7CH,38H,10H,0
	DB    10H
L3815H:  DB    38H,10H,0EEH,0EEH,10H,38H
	DB    0,38H
L381DH:  DB    7CH,0FEH,0FEH,6CH,10H,38H
	DB    0,0,18H,3CH,7EH,3CH
	DB    18H,0,0,0FFH,0E7H,0C3H
	DB    81H,0C3H,0E7H,0FFH,0FFH,0
	DB    18H,3CH,66H,66H,3CH,18H
	DB    0,0FFH,0E7H,0C3H,99H,99H
	DB    0C3H
L3842H:  DB    0E7H,0FFH,1EH,0EH,1EH,36H
	DB    78H,0CCH
L384AH:  DB    0CCH
L384BH:  DB    78H,7EH,0C3H,0C3H,7EH,18H
	DB    7EH,18H,18H,1EH,1AH,1EH
	DB    18H,18H,70H,0F0H,60H,3EH
	DB    3EH,36H,36H
L3860H:  DB    0F6H,66H,1EH,0CH,0DBH
L3865H:  DB    3CH,66H,0E7H,66H
L3869H:  DB    3CH,0DBH
L386BH:  DB    0,80H,0C0H,0F0H,0F8H,0F0H
	DB    0C0H,80H,0,2,6,1EH
	DB    3EH,1EH,6,2,0,18H
	DB    3CH,7EH,18H,7EH,3CH,18H
	DB    0,66H,66H,66H,66H,66H
	DB    0,66H,0,7FH,0DBH,7BH
	DB    3BH,1BH,1BH,1BH,0,3CH
	DB    66H,38H,6CH
L3898H:  DB    6CH,38H,0CCH,78H,0
L389DH:  DB    0,0,0,0FEH,0FEH,0FEH
	DB    0,18H,3CH,7EH,18H,7EH
	DB    3CH,18H,7EH,18H,3CH,7EH
	DB    18H,18H,18H,18H,0,18H
	DB    18H,18H,18H,7EH,3CH,18H
	DB    0,0,18H
L38BEH:  DB    1CH,0FEH
L38C0H:  DB    1CH,18H,0,0,0,30H
L38C6H:  DB    70H,0FEH,70H,30H,0
L38CBH:  DB    0,0,0,0C0H
L38CFH:  DB    0C0H,0C0H,0FEH,0,0,0
	DB    24H,66H,0FFH,66H,24H,0
	DB    0,0,10H,38H,7CH,7CH
	DB    0FEH,0,0,0,0FEH
L38E6H:  DB    7CH,7CH,38H,10H,0,0
	DB    0,0,0,0,0,0
	DB    0,0,18H,3CH,3CH,18H
	DB    18H,0
L38FAH:  DB    18H,0,6CH,6CH,6CH,0
	DB    0,0,0,0,6CH,6CH
	DB    0FEH,6CH,0FEH,6CH,6CH,0
	DB    18H,7EH,0C0H,7CH,6,0FCH
	DB    18H,0,0,0C6H,0CH
L3917H:  DB    18H,30H,60H,0C6H,0,38H
	DB    6CH,38H,76H,0CCH,0CCH,76H
	DB    0
L3924H:  DB    18H,18H,30H,0,0,0
	DB    0,0,18H,30H,60H,60H
L3930H:  DB    60H,30H
L3932H:  DB    18H,0,60H,30H,18H,18H
	DB    18H,30H,60H,0,0,0EEH
L393EH:  DB    7CH,0FEH,7CH,0EEH,0,0
L3944H:  DB    0,18H,18H,7EH,18H,18H
	DB    0,0,0,0,0,0
	DB    18H,18H,30H,0,0,0
	DB    0,0FEH,0,0,0,0
	DB    0,0,0,0,0,38H
	DB    38H,0
L3964H:  DB    6,0CH,18H,30H,60H,0C0H
	DB    80H,0,7CH,0C6H,0CEH,0DEH
	DB    0F6H,0E6H,7CH,0
L3974H:  DB    18H,78H,18H,18H,18H,18H
	DB    7EH,0
L397CH:  DB    7CH,0C6H,0CH,18H,30H,66H
	DB    0FEH,0,7CH,0C6H,6,3CH
	DB    6,0C6H,7CH,0,0CH,1CH
	DB    3CH,6CH,0FEH,0CH,0CH,0
	DB    0FEH,0C0H,0FCH,6,6,0C6H
	DB    7CH,0,7CH,0C6H,0C0H,0FCH
	DB    0C6H,0C6H,7CH,0,0FEH,0C6H
	DB    6,0CH,18H,18H,18H,0
	DB    7CH,0C6H,0C6H,7CH,0C6H,0C6H
	DB    7CH,0
L39B4H:  DB    7CH,0C6H,0C6H,7EH,6,0C6H
	DB    7CH,0
L39BCH:  DB    0,1CH,1CH,0,0,1CH
	DB    1CH,0,0,18H,18H,0
	DB    0,18H,18H,30H,0CH,18H
	DB    30H,60H,30H,18H,0CH,0
	DB    0,0,0FEH,0,0,0FEH
	DB    0,0,60H,30H,18H,0CH
	DB    18H,30H,60H,0,7CH,0C6H
	DB    6,0CH,18H,0,18H,0
	DB    7CH,0C6H,0C6H,0DEH,0DCH,0C0H
	DB    7EH,0
L39F4H:  DB    38H,6CH,0C6H,0C6H,0FEH,0C6H
	DB    0C6H,0,0FCH,66H,66H,7CH
	DB    66H,66H,0FCH,0,3CH,66H
	DB    0C0H,0C0H,0C0H,66H,3CH,0
	DB    0F8H,6CH,66H,66H,66H,6CH
	DB    0F8H,0,0FEH,0C2H,0C0H,0F8H
	DB    0C0H,0C2H,0FEH,0,0FEH,62H
	DB    60H,7CH,60H,60H,0F0H,0
	DB    7CH,0C6H,0C0H,0C0H,0DEH,0C6H
	DB    7CH,0
L3A2CH:  DB    0C6H,0C6H,0C6H,0FEH,0C6H,0C6H
	DB    0C6H,0,3CH,18H,18H,18H
	DB    18H,18H,3CH,0,3CH,18H
	DB    18H,18H,0D8H,0D8H,70H,0
L3A44H:  DB    0C6H,0CCH,0D8H,0F0H,0D8H,0CCH
	DB    0C6H,0,0F0H,60H,60H,60H
	DB    60H,62H,0FEH,0,0C6H,0EEH
	DB    0FEH,0D6H,0D6H,0C6H,0C6H,0
	DB    0C6H,0E6H,0E6H,0F6H,0DEH,0CEH
	DB    0C6H,0,7CH,0C6H,0C6H
L3A67H:  DB    0C6H,0C6H,0C6H,7CH,0,0FCH
	DB    66H,66H,7CH,60H,60H,0F0H
	DB    0,7CH,0C6H,0C6H,0C6H,0C6H
	DB    0D6H,7CH,6,0FCH,0C6H,0C6H
	DB    0FCH,0D8H
L3A81H:  DB    0CCH
L3A82H:  DB    0C6H,0,7CH,0C6H,0C0H,7CH
	DB    6,0C6H,7CH,0,7EH,5AH
	DB    18H,18H,18H,18H,3CH,0
	DB    0C6H,0C6H,0C6H,0C6H,0C6H,0C6H
	DB    7CH,0
L3A9CH:  DB    0C6H,0C6H,0C6H,0C6H,6CH,38H
	DB    10H,0,0C6H,0C6H,0D6H,0D6H
	DB    0FEH,0EEH,0C6H,0,0C6H,6CH
	DB    38H,38H,38H,6CH,0C6H,0
	DB    66H,66H,66H,3CH,18H,18H
	DB    3CH,0,0FEH,86H,0CH,18H
	DB    30H,62H,0FEH,0,7CH,60H
L3AC6H:  DB    60H,60H,60H,60H,7CH,0
L3ACCH:  DB    0C0H,60H,30H,18H,0CH
L3AD1H:  DB    6,2,0,7CH,0CH,0CH
	DB    0CH,0CH,0CH,7CH,0
L3ADCH:  DB    10H,38H
L3ADEH:  DB    6CH,0C6H,0,0
L3AE2H:  DB    0,0,0,0,0,0
	DB    0,0,0,0FFH,30H,30H
L3AEEH:  DB    18H,0,0,0,0,0
	DB    0,0
L3AF6H:  DB    78H,0CH,7CH,0CCH,7EH,0
L3AFCH:  DB    0E0H,60H,7CH,66H,66H,66H
	DB    0FCH,0
L3B04H:  DB    0,0,7CH,0C6H,0C0H,0C6H
	DB    7CH,0,1CH,0CH,7CH,0CCH
	DB    0CCH,0CCH,7EH,0
L3B14H:  DB    0,0,7CH,0C6H,0FEH,0C0H
	DB    7CH,0
L3B1CH:  DB    1CH,36H,30H,0FCH,30H,30H
	DB    78H,0
L3B24H:  DB    0
L3B25H:  DB    0
L3B26H:  DB    76H,0CEH,0C6H,7EH,6,7CH
	DB    0E0H,60H,7CH,66H,66H,66H
	DB    0E6H,0,18H,0,38H,18H
	DB    18H,18H,3CH,0,0CH,0
	DB    1CH,0CH,0CH,0CH,0CCH,78H
L3B44H:  DB    0E0H,60H,66H,6CH,78H,6CH
	DB    0E6H,0,18H,18H,18H,18H
	DB    18H,18H,1CH,0,0,0
	DB    6CH,0FEH,0D6H,0D6H,0C6H,0
	DB    0,0
L3B5EH:  DB    0DCH,66H,66H,66H,66H,0
	DB    0,0
L3B66H:  DB    7CH,0C6H,0C6H,0C6H,7CH,0
	DB    0,0,0DCH,66H,66H,7CH
	DB    60H,0F0H,0,0,76H,0CCH
	DB    0CCH,7CH,0CH,1EH,0,0
	DB    0DCH,66H,60H,60H,0F0H,0
	DB    0,0,7CH
L3B87H:  DB    0C0H,7CH,6,7CH,0
L3B8CH:  DB    30H,30H
L3B8EH:  DB    0FCH,30H
L3B90H:  DB    30H,36H,1CH,0,0,0
L3B96H:  DB    0CCH,0CCH,0CCH,0CCH,76H,0
L3B9CH:  DB    0,0,0C6H,0C6H,6CH,38H
	DB    10H,0,0,0,0C6H,0C6H
	DB    0D6H,0FEH,6CH,0,0,0
	DB    0C6H,6CH,38H,6CH,0C6H,0
	DB    0,0
L3BB6H:  DB    0C6H,0C6H,0CEH,76H
L3BBAH:  DB    6,7CH,0
L3BBDH:  DB    0,0FCH,98H,30H,64H,0FCH
	DB    0,0EH,18H,18H,70H,18H
	DB    18H,0EH,0
L3BCCH:  DB    18H,18H,18H,0,18H,18H
	DB    18H
L3BD3H:  DB    0,70H,18H
L3BD6H:  DB    18H,0EH,18H,18H,70H,0
L3BDCH:  DB    76H,0DCH,0,0,0
L3BE1H:  DB    0,0,0,0,10H
L3BE6H:  DB    38H,38H
L3BE8H:  DB    6CH,6CH,0FEH,0
L3BECH:  DB    3CH,66H
L3BEEH:  DB    0C0H,66H,3CH,18H,0CCH,78H
	DB    0
L3BF5H:  DB    0C6H
L3BF6H:  DB    0,0C6H,0C6H,0CEH,76H,0
	DB    0EH,0,7CH,0C6H,0FEH,0C0H
	DB    7CH,0
L3C04H:  DB    7CH,0C6H
L3C06H:  DB    78H,0CH,7CH,0CCH,7EH,0
L3C0CH:  DB    0C6H,0,78H,0CH,7CH,0CCH
	DB    7EH,0
L3C14H:  DB    0E0H,0
L3C16H:  DB    78H,0CH
L3C18H:  DB    7CH,0CCH,7EH,0
L3C1CH:  DB    38H,38H,78H,0CH,7CH,0CCH
	DB    7EH,0
L3C24H:  DB    0,0,7CH,0C0H,7CH,18H
	DB    6CH,38H
L3C2CH:  DB    7CH,0C6H,7CH
L3C2FH:  DB    0C6H,0FEH,0C0H,7CH,0
L3C34H:  DB    0C6H,0,7CH,0C6H,0FEH,0C0H
	DB    7CH,0
L3C3CH:  DB    0E0H,0
L3C3EH:  DB    7CH,0C6H,0FEH,0C0H
L3C42H:  DB    7CH,0
L3C44H:  DB    66H,0,38H,18H,18H,18H
	DB    3CH,0
L3C4CH:  DB    7CH,0C6H,38H,18H,18H,18H
	DB    3CH,0,0E0H,0
L3C56H:  DB    38H,18H,18H,18H,3CH,0
	DB    0C6H,38H,6CH
L3C5FH:  DB    0C6H,0FEH,0C6H,0C6H,0,38H
	DB    38H,0,7CH,0C6H,0FEH,0C6H
	DB    0,0EH,0,0FEH,0C0H,0F8H
	DB    0C0H,0FEH,0,0,0,6CH
	DB    9AH,7EH,0D8H,6EH
L3C7BH:  DB    0,7EH,0D8H,0D8H,0FEH,0D8H
	DB    0D8H,0DEH,0,7CH,0C6H,0
	DB    7CH,0C6H,0C6H,7CH,0,0
	DB    0C6H,0,7CH,0C6H,0C6H,7CH
	DB    0,0,0E0H,0
L3C97H:  DB    7CH,0C6H,0C6H,7CH,0,7CH
	DB    0C6H,0,0C6H
L3CA0H:  DB    0C6H,0CEH,76H,0,0,0E0H
	DB    0
L3CA7H:  DB    0C6H,0C6H,0CEH,76H,0
L3CACH:  DB    0,0C6H,0,0C6H,0CEH,76H
	DB    6,7CH,0C6H,38H,6CH,0C6H
	DB    0C6H
L3CB9H:  DB    6CH,38H,0,0C6H,0
L3CBEH:  DB    0C6H,0C6H,0C6H,0C6H,7CH,0
L3CC4H:  DB    0,18H,7EH,0D8H,0D8H,7EH
	DB    18H,0,38H,6CH,60H,0F0H
	DB    66H,0F6H,6CH,0,0C3H,66H
	DB    3CH,7EH,18H,3CH,18H,0
	DB    0FCH,0C6H,0FCH,0CCH,0DEH,0CCH
	DB    0CEH,0,0CH,1EH,18H,7EH
	DB    18H,18H,0D8H,70H
L3CECH:  DB    0EH,0,78H,0CH,7CH,0CCH
	DB    7EH,0
L3CF4H:  DB    1CH,0,38H,18H,18H,18H
	DB    3CH
L3CFBH:  DB    0,0,0EH,0,7CH,0C6H
	DB    0C6H,7CH,0,0,0EH,0
	DB    0CCH,0CCH,0DCH,76H,0,0
	DB    0FCH,0,0BCH,66H,66H,0E6H
	DB    0,0FEH,0,0C6H,0E6H,0F6H
	DB    0CEH,0C6H,0,38H,6CH,3EH
	DB    0,7EH,0,0,0,7CH
	DB    0C6H,7CH,0
L3D28H:  DB    7CH,0
L3D2AH:  DB    0,0,18H,0,18H,30H
	DB    60H,66H,3CH,0,0,0
	DB    0,7CH,60H,60H,0,0
	DB    0,0,0,7CH,0CH,0CH
	DB    0,0,0C0H,0CCH,0D8H,30H
	DB    7CH,36H,0CH,3EH,0C0H,0CCH
	DB    0D8H,30H,6CH,3CH,7EH,0CH
	DB    18H,0,18H,18H,3CH,3CH
	DB    18H,0,0,36H
L3D5EH:  DB    6CH,0D8H
L3D60H:  DB    6CH,36H,0,0,0,0D8H
	DB    6CH,36H,6CH,0D8H,0,0
	DB    22H,88H,22H,88H,22H,88H
	DB    22H,88H,55H,0AAH,55H,0AAH
	DB    55H,0AAH,55H,0AAH,0DDH,77H
	DB    0DDH,77H
L3D80H:  DB    0DDH,77H,0DDH,77H,18H,18H
	DB    18H,18H,18H,18H,18H,18H
	DB    18H,18H,18H,18H,0F8H,18H
	DB    18H,18H,18H,18H,0F8H,18H
	DB    0F8H,18H,18H,18H,36H
L3D9DH:  DB    36H,36H,36H,0F6H,36H,36H
	DB    36H,0,0,0,0,0FEH
	DB    36H,36H,36H,0,0,0F8H
	DB    18H,0F8H,18H,18H,18H,36H
	DB    36H,0F6H,6,0F6H,36H,36H
	DB    36H,36H,36H,36H,36H,36H
	DB    36H,36H,36H,0,0,0FEH
	DB    6,0F6H,36H,36H,36H,36H
	DB    36H,0F6H,6,0FEH,0,0
	DB    0,36H,36H,36H,36H,0FEH
	DB    0,0,0,18H,18H,0F8H
	DB    18H,0F8H,0,0,0,0
	DB    0,0,0,0F8H,18H,18H
	DB    18H,18H,18H,18H,18H,1FH
	DB    0,0,0,18H,18H,18H
	DB    18H,0FFH,0,0,0,0
	DB    0,0,0,0FFH,18H,18H
	DB    18H,18H,18H,18H,18H,1FH
	DB    18H,18H,18H,0,0,0
	DB    0,0FFH,0,0,0,18H
	DB    18H,18H,18H,0FFH,18H,18H
	DB    18H,18H,18H,1FH,18H,1FH
	DB    18H,18H,18H,36H,36H,36H
	DB    36H,37H,36H,36H,36H,36H
	DB    36H,37H,30H,3FH,0,0
	DB    0,0,0
L3E36H:  DB    3FH,30H,37H,36H,36H,36H
	DB    36H,36H,0F7H,0,0FFH,0
	DB    0,0,0,0,0FFH,0
	DB    0F7H,36H,36H,36H,36H,36H
	DB    37H,30H,37H,36H,36H,36H
	DB    0,0,0FFH,0,0FFH,0
	DB    0,0,36H,36H,0F7H,0
	DB    0F7H,36H,36H,36H,18H,18H
	DB    0FFH,0,0FFH,0,0,0
	DB    36H,36H,36H,36H,0FFH,0
	DB    0,0,0,0,0FFH,0
	DB    0FFH,18H,18H,18H,0,0
	DB    0,0,0FFH
L3E81H:  DB    36H,36H,36H,36H,36H,36H
	DB    36H,3FH,0,0,0,18H
	DB    18H,1FH,18H,1FH,0,0
	DB    0,0,0,1FH,18H,1FH
	DB    18H,18H,18H,0,0,0
	DB    0,3FH,36H,36H,36H,36H
	DB    36H,36H,36H,0FFH,36H,36H
	DB    36H,18H,18H,0FFH
L3EAFH:  DB    18H,0FFH,18H,18H,18H,18H
	DB    18H,18H,18H,0F8H,0,0
	DB    0,0,0,0,0,1FH
	DB    18H,18H,18H,0FFH,0FFH,0FFH
	DB    0FFH,0FFH,0FFH,0FFH,0FFH,0
	DB    0,0,0,0FFH,0FFH,0FFH
	DB    0FFH,0F0H,0F0H,0F0H,0F0H,0F0H
	DB    0F0H,0F0H,0F0H,0FH,0FH,0FH
	DB    0FH,0FH,0FH,0FH
L3EE3H:  DB    0FH,0FFH,0FFH,0FFH,0FFH,0
	DB    0,0,0,0,0,66H
	DB    0DCH,0D8H,0DCH,66H,0,78H
	DB    0CCH,0F8H,0CCH,0E6H,0DCH,0C0H
	DB    0,0,0FEH,62H,60H,60H
	DB    60H,0E0H
L3F03H:  DB    0,0,0FEH,6CH,6CH,6CH
	DB    6CH,6CH,0,0FEH,0C6H,60H
	DB    30H,60H,0C6H,0FEH,0,0
	DB    7EH,0D8H,0CCH,0CCH,0D8H,70H
L3F1BH:  DB    0,0,66H,66H,66H,66H
	DB    7CH,0C0H,0,0,76H,0DCH
	DB    18H,18H,18H,38H,0
L3F2CH:  DB    0FEH,38H,6CH,0C6H,6CH,38H
	DB    0FEH,0,38H,6CH,0C6H,0FEH
	DB    0C6H,6CH,38H,0,38H,6CH
	DB    0C6H,0C6H,6CH,6CH,0EEH,0
	DB    3EH,60H,38H,66H,0C6H,0CCH
	DB    78H,0,0,0,7EH,0DBH
	DB    0DBH,7EH,0,0,6,7CH
	DB    0DEH,0F6H,0E6H,7CH,0C0H,0
	DB    38H,60H,0C0H,0F8H,0C0H,60H
	DB    38H,0,7CH,0C6H,0C6H,0C6H
	DB    0C6H,0C6H,0C6H,0,0,0FEH
	DB    0,0FEH,0,0FEH,0,0
L3F74H:  DB    18H,18H,7EH,18H,18H,0
	DB    7EH,0
L3F7CH:  DB    30H,18H,0CH
L3F7FH:  DB    18H,30H,0,7EH,0
L3F84H:  DB    0CH,18H,30H,18H,0CH,0
	DB    7EH,0
L3F8CH:  DB    0CH,1EH,18H,18H
L3F90H:  DB    18H,18H,18H,18H,18H,18H
	DB    18H,18H,18H,78H,30H,0
	DB    0,0,18H,0,7EH,0
	DB    18H,0,0,76H,0DCH,0
	DB    76H,0DCH,0,0,7CH,0C6H
L3FAEH:  DB    0C6H,7CH,0,0,0
L3FB3H:  DB    0,0,0,0,18H,18H
	DB    0,0,0,0,0,0
	DB    0,18H,0,0,0,1FH
	DB    18H,18H,18H,0F8H,38H,18H
	DB    0,0D8H,6CH,6CH,6CH,0
	DB    0,0,0,70H,0D8H,30H
	DB    0F8H,0,0,0,0,0
	DB    0,7CH,7CH,7CH,7CH,0
	DB    0,0,0,0,0,0
	DB    0,0,0
L3FECH:  DB    0,0,0,0,0,0
	DB    0,0,0,0,0,0
	DB    0,0,0,0,7EH,81H
	DB    0A5H,81H
L4000H:  CMP   WORD PTR [DI]+8199H,OFFSET plug3
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JLE   L400BH
	ESC   DI                ;Allow co-processor operation.
	INC   BX
	OUT  AX,0FFH
	JLE   L4014H
L4014H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-18,CH
	DB    0FEH
	DB    0FEH
	DB    0FEH
	JL    L4058H
	ADC   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DL
	CMP   BYTE PTR [SI]-2,BH
	JL    L4065H
	ADC   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADC   BYTE PTR [BX+SI],BH
	ADC   BYTE PTR [SI]-18,CH
	DB    06CH
	ADC   BYTE PTR [BX+SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DL
	CMP   BYTE PTR [SI]+124,BH
	DB    0FEH
	DB    0FEH
	DB    06CH
	ADC   BYTE PTR [BX+SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [SI],BH
	CMP   AL,18H
L4057H:  ADD   BYTE PTR [BX+SI],AL
L4059H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	DB    0FFH
L405EH:  DB    0FFH
	DB    0FFH
	JMP   DI
	RET
	RET
	OUT  AX,0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	CMP   AL,'f'
	DB    066H
	CMP   AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0FFH
	DB    0FFH
	DB    0FFH
	JMP   DI
	RET
	CWD                     ;Cvrt (AX) to dbl word (DX,AX).
	CWD                     ;Cvrt (AX) to dbl word (DX,AX).
	RET
	OUT  AX,0FFH
	DB    0FFH
	DB    0FFH
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [L1E0EH],BL
	JS    L4059H
	INT   3
	INT   3
	JS    L4092H
L4092H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   AL,'f'
	DB    066H
	DB    066H
	CMP   AL,18H
	JLE   L40B6H
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	PUSH  DS
	SBB   BL,BYTE PTR [L1818H]
	SBB   BYTE PTR [BX+SI]-8,BH
	JO    L40AEH
L40AEH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [L3E36H],BH
	DB    036H
	JBE   L40ADH
L40B8H:  DB    066H
L40B9H:  PUSH  CS
	PUSH  DS
	OR    AL,0
	ADD   BYTE PTR [BX+SI],AL
	SBB   BL,BL
	JLE   L40FFH
	DB    066H
	DB    066H
	CMP   AL,'~'
	ESC   WORD PTR [BX+SI]  ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+0F0E0H,AL
	CLD                     ;Set forward direction flag.
	DB    0FEH
	CLD                     ;Set forward direction flag.
	LOCK                    ;Lock the buss for next instrn.
	LOOPNZ L4057H           ;Dec CX, loop if NZ and CX<>0.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP+SI],AL
	PUSH  CS
L40DEH:  JLE   L40DEH
	JLE   L4121H
	PUSH  CS
	ADD   AL,BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [SI],BH
	JLE   L4106H
	SBB   BYTE PTR [BX+SI],BL
	JLE   L412EH
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	ADD   BYTE PTR [BP]+102,AH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX]-37,BH
	ESC   BX                ;Allow co-processor operation.
	JPO   L4127H
	SBB   BX,WORD PTR [BP+DI]
	SBB   AX,WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   BYTE PTR [BX+SI]+124,OFFSET 0F6H
	ESC   BYTE PTR [SI]+12  ;Allow co-processor operation.
	MOV   DH,OFFSET 7CH
	ADD   BYTE PTR [BX+SI],AL
L4121H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L4127H:  ADD   DH,BH
	DB    0FEH
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
L412EH:  ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [SI],BH
	JLE   L414CH
	SBB   BYTE PTR [BP]+60,BH
	SBB   BYTE PTR [BP]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [SI],BH
	JLE   L415AH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L414CH:  SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	JLE   L4190H
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L415AH:  ADD   BYTE PTR [BX+SI],AL
	OR    AL,0EH
	DEC   WORD PTR [L000CH]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI]-2,DH
	JO    L419FH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0C0H
	DB    0C0H
	DB    0C0H
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	AND   AL,66H
	JMP   WORD PTR [BP]+36
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DL
	CMP   BYTE PTR [BX+SI],BH
	CMP   BYTE PTR [SI]+124,BH
	DB    0FEH
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L419FH:  ADD   DH,BH
	DB    0FEH
	JL    L4220H
	JL    L41DEH
	CMP   BYTE PTR [BX+SI],DL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [SI],BH
	CMP   AL,'<'
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [L3636H],DH
	ADC   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    06CH
	DB    06CH
	DB    06CH
	DB    0FEH
	DB    06CH
	DB    06CH
L41DEH:  DB    0FEH
	DB    06CH
	DB    06CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	JL    L41AFH
	DB    0C0H
	JS    L4228H
	PUSH  ES
	MOV   BYTE PTR [SI]+24,OFFSET 18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP+SI]+102,AH
	OR    AL,18H
	XOR   BYTE PTR [BP]-58,AH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
	CMP   BYTE PTR [BX+SI],BH
	JBE   L41FEH
	INTO                    ;Interupt if overflow flag set.
	INT   3
	JBE   L420CH
L420CH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	OR    AL,0CH
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,18H
L4220H:  XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,0
L4228H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,0CH
	OR    AL,0CH
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    06CH
	CMP   DH,BH
	CMP   BYTE PTR [SI]+0,CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	JLE   L4266H
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,0CH
	OR    AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L4266H:  ADD   BYTE PTR [BX+SI],AL
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L4272H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L4280H:  ADD   BYTE PTR [BP+SI],AL
	PUSH  ES
	OR    AL,18H
	XOR   BYTE PTR [BX+SI]-64,AH
	ADD   BYTE PTR [BX+SI],0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	INTO                    ;Interupt if overflow flag set.
	ESC   DH                ;Allow co-processor operation.
	OUT  AL,0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	JS    L42B7H
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BP]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L4272H
	MOV   BYTE PTR [SI],OFFSET 18H
	XOR   BYTE PTR [BX+SI]-58,AH
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L4280H
	PUSH  ES
	PUSH  ES
	CMP   AL,6
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	SBB   AL,3CH
	DB    06CH
	INT   3
	DEC   BYTE PTR [SI]
	OR    AL,0CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	DB    0C0H
	DB    0C0H
	DB    0C0H
	CLD                     ;Set forward direction flag.
	PUSH  ES
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	DB    0C0H
	DB    0C0H
	CLD                     ;Set forward direction flag.
	MOV   DH,OFFSET 0C6H
	JL    L42ECH
L42ECH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   DH
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L42C6H
	MOV   DH,OFFSET 7CH
	MOV   DH,OFFSET 0C6H
	JL    L4308H
L4308H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L42D4H
	MOV   DH,OFFSET 7EH
	PUSH  ES
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	OR    AL,0
	ADD   BYTE PTR [SI],CL
	OR    AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	OR    AL,0
	ADD   BYTE PTR [SI],CL
	OR    AL,0CH
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	SBB   BYTE PTR [BX+SI],DH
	DB    060H
	DB    0C0H
	DB    060H
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	ADD   DH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    060H
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,6
	OR    AL,18H
	XOR   BYTE PTR [BX+SI]+0,AH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L4328H
	MOV   BYTE PTR [SI],OFFSET 18H
	SBB   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0DEH
	ESC   AH                ;Allow co-processor operation.
	DB    0C0H
	JLE   L4378H
L4378H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [SI]-58,CH
	MOV   DH,OFFSET 0FEH
	MOV   DH,OFFSET 0C6H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,BH
	DB    066H
	DB    066H
	DB    066H
	JL    L43F6H
	DB    066H
	DB    066H
	CLD                     ;Set forward direction flag.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],BH
	DB    066H
	DB    0C0H
	DB    0C0H
	DB    0C0H
	DB    0C0H
	DB    0C0H
	DB    066H
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CLC                     ;Clear the carry flag.
	DB    06CH
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    06CH
	CLC                     ;Clear the carry flag.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	DB    066H
	DB    060H
	DB    060H
	JL    L441AH
	DB    060H
	DB    066H
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0FEH
	DB    066H
	DB    060H
	DB    060H
	JL    L4428H
	DB    060H
	DB    060H
	LOCK                    ;Lock the buss for next instrn.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   AL,OFFSET 0C0H
	INTO                    ;Interupt if overflow flag set.
	MOV   DH,OFFSET 7CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   DH,OFFSET 0C6H
	INC   DH
	MOV   DH,OFFSET 0C6H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,BL
	ESC   BYTE PTR [BX+SI]+0;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   AH,OFFSET 0D8H
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	ESC   AH                ;Allow co-processor operation.
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	LOCK                    ;Lock the buss for next instrn.
	DB    060H
	DB    060H
	DB    060H
L441AH:  DB    060H
	DB    060H
	DB    062H
	DB    066H
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0EEH
	DB    0FEH
L4428H:  DB    0D6H
	DB    0D6H
	DB    0D6H
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0E6H
	OUT  AL,0F6H
	ESC   DH                ;Allow co-processor operation.
	INTO                    ;Interupt if overflow flag set.
	MOV   BYTE PTR [BX+SI],OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	JL    L444AH
L444AH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CLD                     ;Set forward direction flag.
	DB    066H
	DB    066H
	DB    066H
	JL    L44B4H
	DB    060H
	DB    060H
	LOCK                    ;Lock the buss for next instrn.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0D6H
	JL    L446CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CLD                     ;Set forward direction flag.
	DB    066H
L446CH:  DB    066H
	DB    066H
	JL    L44E8H
	DB    06CH
	DB    066H
	OUT  AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L4440H
	DB    0C0H
	DB    060H
	CMP   BYTE PTR [SI],CL
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+90,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 7CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 6CH
	CMP   BYTE PTR [BX+SI],DL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   DH,OFFSET 0D6H
L44B4H:  DB    0D6H
	DB    0FEH
	OUT   AL,DX
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 6CH
	CMP   BYTE PTR [BX+SI],BH
	CMP   BYTE PTR [SI]-58,CH
	MOV   BYTE PTR [BX+SI],OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+102,AH
	DB    066H
	DB    066H
	CMP   AL,18H
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   DH
	MOV   WORD PTR [BX+SI],DS
	XOR   BYTE PTR [BX+SI]-62,AH
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L44E8H:  JL    L454AH
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	JL    L44F2H
L44F2H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+L60C0H,AL
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,6
	ADD   AL,BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L4512H
	OR    AL,0CH
	OR    AL,0CH
	OR    AL,0CH
	JL    L450EH
L450EH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DL
L4512H:  CMP   BYTE PTR [SI]-58,CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L4523H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],CL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L4537H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JS    L454DH
	JL    L450FH
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L454AH:  LOOPNZ L45ACH           ;Dec CX, loop if NZ and CX<>0.
	DB    060H
L454DH:  JL    L45B5H
	DB    066H
	DB    066H
	DB    066H
	CLD                     ;Set forward direction flag.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L4523H
	DB    0C0H
	DB    0C0H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],BL
	OR    AL,0CH
	JL    L4537H
	INT   3
	INT   3
	INT   3
	JLE   L4570H
L4570H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	INC   AL
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],BL
	XOR   BYTE PTR SS:[BX+SI],DH
	CLD                     ;Set forward direction flag.
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-50,DH
	MOV   DH,OFFSET 7EH
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   AL,AH
	DB    060H
	DB    060H
	DB    06CH
	JBE   L460AH
	DB    066H
	DB    066H
	OUT  AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L45ACH:  SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,0CH
	ADD   BYTE PTR [SI],BL
	OR    AL,0CH
	OR    AL,0CH
	INT   3
	INT   3
	JS    L45C6H
L45C6H:  ADD   BYTE PTR [BX+SI],AL
	LOOPNZ L462AH           ;Dec CX, loop if NZ and CX<>0.
	DB    060H
L45CBH:  DB    066H
	DB    06CH
	JS    L463BH
	DB    066H
	OUT  AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-2,CH
	DB    0D6H
	DB    0D6H
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,BL
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L4603H:  JL    L45CBH
	MOV   DH,OFFSET 0C6H
	JL    L460AH
L460AH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,BL
	DB    066H
	DB    066H
	DB    066H
	JL    L4677H
	DB    060H
	LOCK                    ;Lock the buss for next instrn.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JBE   L45EDH
	INT   3
	INT   3
	JL    L4631H
	OR    AL,1EH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ESC   BYTE PTR [BP]+96  ;Allow co-processor operation.
	DB    060H
L4631H:  DB    060H
	LOCK                    ;Lock the buss for next instrn.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L463BH:  JL    L4603H
	JO    L465BH
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],DH
	CLD                     ;Set forward direction flag.
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [L001CH],DH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,CL
	INT   3
	INT   3
	INT   3
L465BH:  INT   3
	JBE   L465EH
L465EH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   DH,OFFSET 6CH
	CMP   BYTE PTR [BX+SI],DL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0D6H
	DB    0D6H
L4677H:  DB    0FEH
	DB    06CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   BYTE PTR [SI]+56,OFFSET 38H
	DB    06CH
	MOV   BYTE PTR [BX+SI],OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	INTO                    ;Interupt if overflow flag set.
	JBE   L469BH
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
L469BH:  ADD   BYTE PTR [BX+SI],AL
	DEC   BYTE PTR [SI]+L3018H
	DB    062H
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	PUSH  CS
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI]+24,DH
	SBB   BYTE PTR [BX+SI],BL
L46B0H:  PUSH  CS
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+24,DH
	SBB   BYTE PTR [BX+SI],BL
	PUSH  CS
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI]+0,DH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JBE   L46B0H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADC   BYTE PTR [BX+SI],BH
	CMP   BYTE PTR [SI]+108,CH
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
L46EBH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],BH
	DB    066H
	DB    0C0H
	DB    0C0H
	DB    0C0H
	MOV   BYTE PTR [BP]+60,OFFSET 18H
	INT   3
	CMP   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   BYTE PTR [BX+SI],OFFSET 0
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 76H
	ADD   BYTE PTR [BX+SI],AL
L4707H:  ADD   BYTE PTR [BX+SI],AL
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],AL
	JL    L46D5H
	INC   AL
	MOV   BYTE PTR [SI]+0,OFFSET 0
L4715H:  ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI]-52,BH
L471AH:  ADD   BYTE PTR [BX+SI]+12,BH
	JL    L46EBH
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INT   3
	ADD   BYTE PTR [BX+SI],AL
	JS    L4737H
	JL    L46F9H
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+48,AH
	SBB   BYTE PTR [BX+SI],AL
L4737H:  JS    L4745H
	JL    L4707H
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
	CMP   BYTE PTR [BX+SI],AL
L4745H:  JS    L4753H
	JL    L4715H
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L471AH
	DB    0C0H
	DB    0C0H
	MOV   BYTE PTR [SI]+24,OFFSET 6CH
	CMP   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	JS    L472CH
	ADD   BYTE PTR [SI]-58,BH
	INC   AL
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,CL
	ADD   BYTE PTR [BX+SI],AL
	JL    L4737H
	INC   AL
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,0
	JL    L4745H
	INC   AL
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+0,AH
	ADD   BYTE PTR [BX+SI],BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	CMP   AL,'f'
	ADD   BYTE PTR [BX+SI],BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+48,AH
	SBB   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   BYTE PTR [BX+SI],OFFSET 38H
	DB    06CH
	MOV   DH,OFFSET 0FEH
	MOV   DH,OFFSET 0C6H
L47BBH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
	CMP   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [SI]-58,CH
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [BX+SI],OFFSET 0
	ADD   BYTE PTR [SI],CL
	SBB   BYTE PTR [BX+SI],DH
	ADD   DH,BH
L47D1H:  DB    060H
	DB    060H
	JL    L4835H
	DB    060H
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    066H
	ESC   WORD PTR [BP+DI]  ;Allow co-processor operation.
	JG    L47BBH
	ESC   WORD PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-40,BH
	ESC   AL                ;Allow co-processor operation.
	ESC   DH                ;Allow co-processor operation.
	ESC   AL                ;Allow co-processor operation.
	ESC   DH                ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI]-52,BH
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	JL    L4802H
L4802H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   BYTE PTR [BX+SI],OFFSET 0
	JL    L47D1H
	MOV   DH,OFFSET 0C6H
	JL    L4810H
L4810H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	SBB   BYTE PTR [SI],CL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	JL    L481EH
L481EH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	JS    L47F0H
	ADD   DH,AL
	MOV   DH,OFFSET 0C6H
	INTO                    ;Interupt if overflow flag set.
	JBE   L482CH
L482CH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+48,AH
	SBB   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 76H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	INTO                    ;Interupt if overflow flag set.
	JBE   L484DH
	MOV   BYTE PTR [SI]+0,OFFSET 0
	MOV   BYTE PTR [BX+SI],OFFSET 7CH
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	JL    L4856H
L4856H:  ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	ADD   DH,AL
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	JL    L4864H
L4864H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],BH
	DB    066H
	DB    060H
	DB    060H
	DB    066H
	CMP   AL,18H
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [SI]+96,CH
	DB    060H
	LOCK                    ;Lock the buss for next instrn.
	DB    060H
	DB    066H
	IMUL  BYTE PTR [SI]+0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    066H
	DB    066H
	CMP   AL,18H
	JLE   L48A2H
	CMP   AL,18H
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,BH
	MOV   AH,OFFSET 0C0H
	INT   3
	ESC   AH                ;Allow co-processor operation.
	INT   3
	INT   3
	MOV   BYTE PTR [BX+SI],OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	PUSH  CS
	SBB   BX,WORD PTR [BX+SI]
L48A2H:  SBB   BYTE PTR [BX+SI],BL
	JLE   L48BEH
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,BL
	JO    L48ACH
L48ACH:  ADD   BYTE PTR [SI],CL
	SBB   BYTE PTR [BX+SI],DH
	ADD   BYTE PTR [BX+SI]+12,BH
	JL    L4881H
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	SBB   BYTE PTR [BX+SI],DH
L48BEH:  ADD   BYTE PTR [BX+SI],BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
L48C4H:  CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	SBB   BYTE PTR [BX+SI],DH
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	JL    L48D4H
L48D4H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	XOR   BYTE PTR [BX+SI]+0,AH
	INT   3
	INT   3
	INT   3
	INT   3
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JBE   L48C4H
	ADD   BYTE PTR [SI]+6666H,BH
	DB    066H
	DB    066H
	OUT  AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-36,DH
	ADD   DH,AL
	MOV   DH,OFFSET 0F6H
	ESC   DH                ;Allow co-processor operation.
	MOV   BYTE PTR [BX+SI],OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	CMP   AL,'l'
	DB    06CH
	ADD   BYTE PTR DS:[BP]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
	DB    06CH
	CMP   BYTE PTR [BX+SI],AL
	JL    L4916H
L4916H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI],DH
	ADD   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI]-58,AH
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+96,BH
	DB    060H
	DB    060H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JLE   L4946H
	PUSH  ES
	PUSH  ES
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L4946H:  ADD   BYTE PTR [BX+SI]+98,AH
	DB    066H
	DB    06CH
	SBB   BYTE PTR [BX+SI],DH
	DB    060H
	ESC   BYTE PTR [L180CH] ;Allow co-processor operation.
	ADD   BYTE PTR DS:[BX+SI],AL
	DB    060H
	DB    062H
	DB    066H
	DB    06CH
	SBB   BYTE PTR [LDE6EH],DH
	JLE   L4965H
	PUSH  ES
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
L4965H:  SBB   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,'<'
	CMP   AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [LD86CH],DH
	DB    06CH
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,BL
	DB    06CH
	DB    036H
	DB    06CH
	ESC   BYTE PTR [BX+SI]  ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
L498AH:  ADD   BYTE PTR [BX+SI],AL
L498CH:  ADC   WORD PTR [SI]+17,AX
	INC   SP
L4990H:  ADC   WORD PTR [SI]+17,AX
	INC   SP
	ADC   WORD PTR [SI]+17,AX
	INC   SP
	ADC   WORD PTR [SI]+85,AX
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	ESC   WORD PTR [BX]-35  ;Allow co-processor operation.
	JA    L498AH
	JA    L498CH
	JA    L498EH
	JA    L4990H
	JA    L4992H
	JA    L49CFH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CLC                     ;Clear the carry flag.
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,BH
	SBB   AL,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DIV   BYTE PTR SS:[L3636H]
	DB    036H
	DB    036H
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,BH
	SBB   AL,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	TEST  BYTE PTR SS:[L36F6H],36H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	PUSH  ES
	DIV   BYTE PTR [L3636H]
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	TEST  BYTE PTR SS:[L00FEH],0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	INC   BYTE PTR SS:[BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CLC                     ;Clear the carry flag.
	SBB   AL,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BH,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	AAA                     ;Ascii adjust for addition.
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	AAA                     ;Ascii adjust for addition.
	XOR   BYTE PTR [BX],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX],BH
	XOR   BYTE PTR [BX],DH
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	TEST  WORD PTR SS:[BX+SI],L00FFH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   WORD PTR [BX+SI]
	DIV   WORD PTR [L3636H]
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	AAA                     ;Ascii adjust for addition.
	XOR   BYTE PTR [BX],DH
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	ADD   BH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	TEST  WORD PTR SS:[BX+SI],L36F7H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	SBB   BYTE PTR SS:[BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BH,BH
	ADD   BH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	INC   WORD PTR SS:[BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   WORD PTR [BX+SI]
	CALL  DWORD PTR [BX+SI]
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	PUSH  WORD PTR [L3636H]
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	AAS                     ;Ascii adjust for subtraction.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX],BH
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	PUSH  WORD PTR SS:[L3636H]
	DB    036H
	DB    036H
	SBB   BYTE PTR SS:[BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BH,BH
	SBB   BH,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	PUSH  AX
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JBE   L4C0EH
	ESC   AL                ;Allow co-processor operation.
	ESC   AH                ;Allow co-processor operation.
	JBE   L4C38H
L4C38H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JS    L4C0CH
	ESC   AH                ;Allow co-processor operation.
	MOV   DH,OFFSET 0DCH
	DB    0C0H
	DB    0C0H
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	DB    066H
	DB    062H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0FEH
	DB    06CH
	DB    06CH
	DB    06CH
	DB    06CH
	DB    06CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	MOV   BYTE PTR [BP+SI]+48,OFFSET 18H
	XOR   BYTE PTR [BP+SI]-58,AH
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-40,BH
	INT   3
	INT   3
	INT   3
	JS    L4C7EH
L4C7EH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	JL    L4CEAH
	DB    0C0H
	ADD   BYTE PTR [BX+SI],0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-36,DH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	CMP   BYTE PTR [SI]-58,CH
	MOV   DH,OFFSET 6CH
	CMP   DH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
	MOV   DH,OFFSET 0FEH
	MOV   DH,OFFSET 6CH
	CMP   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [SI]-58,CH
	MOV   DH,OFFSET 6CH
	DB    06CH
	DB    06CH
	OUT   AL,DX
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [L3060H],BH
	CMP   AL,'f'
	MOV   DH,OFFSET 0CCH
	JS    L4CD2H
L4CD2H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-37,BH
	ESC   WORD PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	PUSH  ES
	OR    AL,7CH
	ESC   DH                ;Allow co-processor operation.
	OUT  AL,7CH
	DB    060H
	DB    0C0H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],BL
	XOR   BYTE PTR [BX+SI]+96,AH
	JL    L4D58H
	DB    060H
	XOR   BYTE PTR [SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [BX+SI],OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   BYTE PTR [BX+SI]
	INC   BYTE PTR [BX+SI]
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BP]+24,BH
	SBB   BYTE PTR [BX+SI],AL
	JLE   L4D26H
L4D26H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,6
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],AL
	JLE   L4D34H
L4D34H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,18H
	XOR   BYTE PTR [BX+SI]+48,AH
	SBB   BYTE PTR [SI],CL
	ADD   BYTE PTR [BP]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	PUSH  DS
	SBB   BL,BYTE PTR [BX+SI]
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	POP   AX
	JS    L4D8EH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	JLE   L4D68H
L4D68H:  SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-36,DH
	ADD   BYTE PTR [BP]-36,DH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JS    L4D4CH
	INT   3
	JS    L4D83H
L4D83H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	POP   DS
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ESC   BYTE PTR [BX+SI]+56;Allow co-processor operation.
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ESC   BYTE PTR [SI]+108 ;Allow co-processor operation.
	DB    06CH
	DB    06CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]-40,DH
	XOR   BYTE PTR [BX+SI]-8,AH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JLE   L4E54H
	JLE   L4E56H
	JLE   L4E58H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
find_b:  DW    L001DH,chksum
	ADD   BYTE PTR [SI],AH
	DB    066H
	JMP   WORD PTR [BP]+36
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [DI]+0,CL
	ADD   BL,AL
	OUT  AX,0E7H
	CALL  DBX
	ESC   BX                ;Allow co-processor operation.
	RET
	RET
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]+0,DL
	ADD   BH,BH
	CWD                     ;Cvrt (AX) to dbl word (DX,AX).
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
L4E19H:  PUSH  SI
	ADD   BYTE PTR [BX+SI],AL
	RET
	RET
	RET
	RET
	RET
	RET
	DB    066H
	CMP   AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX]+0,DL
	ADD   BL,AL
	RET
	RET
	RET
	ESC   BX                ;Allow co-processor operation.
	ESC   DI                ;Allow co-processor operation.
	DB    066H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+0,BL
	ADD   BL,AL
	RET
	RET
	DB    066H
	CMP   AL,'f'
	RET
	RET
	RET
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+DI]+0,BL
	ADD   BL,AL
	RET
	RET
	DB    066H
	CMP   AL,18H
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	DB    06DH
	ADD   BYTE PTR [BX+SI],AL
L4E58H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-1,AH
	ESC   BX                ;Allow co-processor operation.
	ESC   BX                ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+0,DH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	RET
	RET
	RET
	DB    066H
	CMP   AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX]+0,DH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ESC   BX                ;Allow co-processor operation.
	ESC   BX                ;Allow co-processor operation.
	JMP   WORD PTR [BP]+0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JLE   L4E19H
	MOVSW                   ;Move wrd, (SI)+- to (DI)+-.
	ADD   WORD PTR [BX+DI]+99BDH,OFFSET 8181H
	JLE   L4EA1H
L4EA1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-2,BH
	DB    0FEH
	DB    0D6H
	DB    0FEH
	DB    0FEH
	MOV   DX,OFFSET LFEC6H
	JL    L4EB1H
L4EB1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    06CH
	OUT   AL,DX
	DB    0FEH
	DB    0FEH
	DB    0FEH
	DB    0FEH
	JL    L4EF7H
	ADC   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADC   BYTE PTR [BX+SI],BH
L4EC9H:  JL    L4EC9H
	JL    L4F05H
	ADC   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADC   BYTE PTR [BX+SI],BH
	CMP   BYTE PTR [BX+SI],DL
	DB    06CH
	OUT   AL,DX
	DB    06CH
	ADC   BYTE PTR [BX+SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADC   BYTE PTR [BX+SI],BH
	JL    L4F66H
	DB    0FEH
	DB    0FEH
	DB    0FEH
	DB    06CH
	ADC   BYTE PTR [BX+SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	CMP   AL,'<'
	CMP   AL,18H
	ADD   BYTE PTR [BX+SI],AL
L4F00H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0FFH
L4F05H:  DB    0FFH
	DB    0FFH
L4F07H:  DB    0FFH
	JMP   DI
	RET
	RET
	RET
	OUT  AX,0FFH
	DB    0FFH
L4F10H:  DB    0FFH
	DB    0FFH
	DB    0FFH
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	CMP   AL,'f'
	DB    066H
	DB    066H
	CMP   AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	DB    0FFH
	DB    0FFH
	JMP   DI
	RET
	CWD                     ;Cvrt (AX) to dbl word (DX,AX).
	CWD                     ;Cvrt (AX) to dbl word (DX,AX).
	CWD                     ;Cvrt (AX) to dbl word (DX,AX).
	RET
	OUT  AX,0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [L1E0EH],BL
	JS    L4F07H
	INT   3
	INT   3
	INT   3
	JS    L4F41H
L4F41H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],BH
	DB    066H
	DB    066H
	DB    066H
	CMP   AL,18H
	JLE   L4F66H
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	PUSH  DS
L4F57H:  SBB   BL,BYTE PTR [L1818H]
	SBB   BYTE PTR [BX+SI],BL
	JS    L4F57H
L4F5FH:  JO    L4F61H
L4F61H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [L3E36H],BH
	DB    036H
	JBE   L4F62H
	DB    066H
	PUSH  CS
	PUSH  DS
	OR    AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BL,BL
	JLE   L4FB6H
	DB    066H
	DB    066H
	CMP   AL,'~'
	ESC   WORD PTR [BX+SI]  ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+0F0E0H,AL
	CLD                     ;Set forward direction flag.
	DB    0FEH
	CLD                     ;Set forward direction flag.
	LOCK                    ;Lock the buss for next instrn.
	LOOPNZ L4F10H           ;Dec CX, loop if NZ and CX<>0.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP+SI],AL
	PUSH  CS
L4F99H:  JLE   L4F99H
	JLE   L4FDCH
	PUSH  CS
	ADD   AL,BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
L4FA3H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	CMP   AL,'~'
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	JLE   L4FEBH
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+102,AH
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	ADD   BYTE PTR [BP]+102,AH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JG    L4FA3H
	ESC   BX                ;Allow co-processor operation.
	ESC   WORD PTR [BP+DI]+27;Allow co-processor operation.
	SBB   BX,WORD PTR [BP+DI]
	SBB   AX,WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   BYTE PTR [BX+SI]+124,OFFSET 0F6H
L4FDCH:  ESC   BYTE PTR [SI]+12  ;Allow co-processor operation.
	MOV   DH,OFFSET 7CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0FEH
	DB    0FEH
	DB    0FEH
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	CMP   AL,'~'
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BP]+60,BH
	SBB   BYTE PTR [BP]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	CMP   AL,'~'
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	JLE   L505BH
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,0EH
	DEC   WORD PTR [L000CH]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI]-2,DH
	JO    L506EH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0C0H
	DB    0C0H
	DB    0C0H
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	AND   AL,66H
L505BH:  JMP   WORD PTR [BP]+36
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DL
	CMP   BYTE PTR [BX+SI],BH
	CMP   BYTE PTR [SI]+124,BH
	DB    0FEH
L506EH:  INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	DB    0FEH
	JL    L50F7H
	JL    L50B5H
	CMP   BYTE PTR [BX+SI],DL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	CMP   AL,'<'
	CMP   AL,'<'
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    036H
	DB    036H
	DB    036H
	ADC   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L50B5H:  ADD   BYTE PTR [SI]+108,CH
	DB    06CH
	DB    0FEH
	DB    06CH
	DB    06CH
	DB    0FEH
	DB    06CH
	DB    06CH
	DB    06CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	JL    L5090H
	DB    0C0H
	JS    L5109H
	PUSH  ES
	MOV   BYTE PTR [SI]+24,OFFSET 18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP+SI]+102,AH
	OR    AL,18H
	XOR   BYTE PTR [BP]-58,AH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [SI]+56,CH
	XOR   BYTE PTR [BP]+126,DH
	INT   3
	INT   3
	INT   3
	JBE   L50F1H
L50F1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,0CH
L50F7H:  OR    AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	SBB   BYTE PTR [BX+SI],DH
L5109H:  XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	SBB   BYTE PTR [SI],CL
	OR    AL,0CH
	OR    AL,0CH
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    06CH
	CMP   DH,BH
	CMP   BYTE PTR [SI]+0,CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	JLE   L5155H
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,0CH
	OR    AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L5155H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP+SI],AL
	PUSH  ES
	OR    AL,18H
	XOR   BYTE PTR [BX+SI]-64,AH
	ADD   BYTE PTR [BX+SI],0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L514EH
	MOV   DH,OFFSET 0DEH
	MUL   DH
	MOV   DH,OFFSET 7CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI]+24,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	JLE   L51A1H
L51A1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   BYTE PTR [L180CH],OFFSET 30H
	DB    060H
L51AEH:  MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	PUSH  ES
	PUSH  ES
	CMP   AL,6
	PUSH  ES
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,1CH
	CMP   AL,'l'
	INT   3
	INT   3
	DEC   BYTE PTR [SI]
	OR    AL,1EH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   AL
	DB    0C0H
	DB    0C0H
	CLD                     ;Set forward direction flag.
	PUSH  ES
	PUSH  ES
	PUSH  ES
L51DEH:  MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L51AEH
	DB    0C0H
	DB    0C0H
	CLD                     ;Set forward direction flag.
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   DH
	PUSH  ES
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 7CH
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L51DEH
	MOV   DH,OFFSET 0C6H
	JLE   L5223H
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	OR    AL,0
	ADD   BYTE PTR [SI],CL
	OR    AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	OR    AL,0
	ADD   BYTE PTR [SI],CL
	OR    AL,0CH
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	SBB   BYTE PTR [BX+SI],DH
	DB    060H
	DB    0C0H
	DB    060H
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,0
	ADD   BYTE PTR [BX+SI],AL
L5253H:  ADD   BYTE PTR [BX+SI],AL
L5255H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	ADD   DH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    060H
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,6
	OR    AL,18H
	XOR   BYTE PTR [BX+SI]+0,AH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   BYTE PTR [SI],OFFSET 18H
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0DEH
	ESC   DH                ;Allow co-processor operation.
	ESC   AL                ;Allow co-processor operation.
	JLE   L5291H
L5291H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
	MOV   DH,OFFSET 0C6H
	INC   DH
	MOV   DH,OFFSET 0C6H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CLD                     ;Set forward direction flag.
	DB    066H
	DB    066H
	DB    066H
	JL    L5312H
	DB    066H
	DB    066H
	DB    066H
	CLD                     ;Set forward direction flag.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   AL,'f'
	RET    0C0C0H
	DB    0C0H
	DB    0C0H
	RET    3C66H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CLC                     ;Clear the carry flag.
	DB    06CH
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    06CH
	CLC                     ;Clear the carry flag.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0FEH
	DB    066H
	DB    060H
	DB    064H
	JL    L5340H
	DB    060H
	DB    060H
	DB    066H
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	DB    066H
	DB    060H
	DB    064H
	JL    L5350H
	DB    060H
	DB    060H
L52EEH:  DB    060H
	LOCK                    ;Lock the buss for next instrn.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L52BEH
	MOV   AL,OFFSET 0C0H
	DB    0C0H
	INTO                    ;Interupt if overflow flag set.
	MOV   DH,OFFSET 7CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [BX+SI],OFFSET 0
L5312H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   AL,18H
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   AL,18H
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,BL
	ESC   BYTE PTR [BX+SI]+0;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   AH,OFFSET 0D8H
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	ESC   AH                ;Allow co-processor operation.
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,DH
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    062H
	DB    066H
	INC   BYTE PTR [BX+SI]
L5351H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   DH,OFFSET 0EEH
	DB    0FEH
	DB    0D6H
	DB    0D6H
	DB    0D6H
L535EH:  MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   DH,OFFSET 0E6H
	NEG   DH
	INTO                    ;Interupt if overflow flag set.
	INTO                    ;Interupt if overflow flag set.
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CLD                     ;Set forward direction flag.
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	JL    L53EDH
	DB    060H
	DB    060H
	LOCK                    ;Lock the buss for next instrn.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L535EH
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0D6H
	DB    0D6H
	JL    L53A7H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,BH
L53A7H:  DB    066H
	DB    066H
	DB    066H
	JL    L5424H
	DB    06CH
	DB    066H
	DB    066H
	OUT  AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	DB    0C0H
	DB    0C0H
	JO    L53D8H
	PUSH  ES
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JLE   L5422H
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	JL    L53E1H
L53E1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
L53EDH:  DB    06CH
	CMP   BYTE PTR [BX+SI],DL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	DB    0D6H
	DB    0D6H
	DB    0D6H
	DB    0FEH
	OUT   AL,DX
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   DH,OFFSET 6CH
	CMP   BYTE PTR [BX+SI],BH
	DB    06CH
	MOV   DH,OFFSET 0C6H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	CMP   AL,18H
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	MOV   BYTE PTR [BP]+L180CH,OFFSET 30H
	DB    060H
	RET    LFEC6H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L5498H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	JL    L5441H
L5441H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+L60C0H,AL
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,6
	ADD   AL,BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]+12,BH
	OR    AL,0CH
	OR    AL,0CH
	OR    AL,0CH
	OR    AL,7CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DL
	CMP   BYTE PTR [SI]-58,CH
L5469H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],CL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JS    L54A7H
	JL    L5469H
	INT   3
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
L54A1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,AH
L54A7H:  DB    060H
	DB    060H
	JL    L5511H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	CLD                     ;Set forward direction flag.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	DB    0C0H
	DB    0C0H
	DB    0C0H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   AL,0CH
	OR    AL,7CH
	INT   3
	INT   3
	INT   3
	INT   3
	INT   3
	JLE   L54D1H
L54D1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L54A1H
	MOV   DH,OFFSET 0C0H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   AL,36H
	XOR   BYTE PTR [BX+SI],DH
	CLD                     ;Set forward direction flag.
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],DH
	JS    L54F1H
L54F1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JBE   L54C9H
	MOV   DH,OFFSET 0CEH
	JBE   L5506H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
L5506H:  LOOPNZ L5568H           ;Dec CX, loop if NZ and CX<>0.
	DB    060H
	JL    L5571H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
L550FH:  OUT  AL,0
L5511H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	OR    AL,0
	SBB   AL,0CH
	OR    AL,0CH
	OR    AL,0CH
	INT   3
	INT   3
	JS    L5533H
L5533H:  ADD   BYTE PTR [BX+SI],AL
	ADD   AL,AH
	DB    060H
	DB    060H
	DB    066H
	DB    066H
	DB    06CH
	JS    L55AAH
	DB    066H
	OUT  AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L5555H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    06CH
	DB    0FEH
	DB    0D6H
	DB    0D6H
	MOV   DH,OFFSET 0C6H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L5568H:  ADD   AH,BL
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,BL
	DB    066H
	DB    066H
	DB    066H
	DB    066H
	JL    L55F0H
	DB    060H
	LOCK                    ;Lock the buss for next instrn.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-52,DH
	INT   3
	INT   3
	INT   3
	JL    L55ACH
	OR    AL,1EH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,BL
L55AAH:  DB    066H
	DB    060H
L55ACH:  DB    060H
	DB    060H
	DB    060H
	LOCK                    ;Lock the buss for next instrn.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	DB    0C0H
	JL    L55C4H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
L55C4H:  ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI],DH
	XOR   AH,BH
	XOR   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],DH
	SBB   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INT   3
	INT   3
	INT   3
	INT   3
	INT   3
	INT   3
	JBE   L55E1H
L55E1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+56,OFFSET 10H
L55F0H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   DH,OFFSET 0D6H
	DB    0D6H
	DB    0FEH
	DB    06CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	MOV   BYTE PTR [SI]+56,OFFSET 6CH
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 76H
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	XCHG  CL,BYTE PTR [SI]
	SBB   BYTE PTR [BX+SI],DH
	DB    062H
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [L1818H],CL
	SBB   BYTE PTR [BX+SI]+24,DH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [chksum],CL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JO    L5670H
	SBB   BYTE PTR [BX+SI],BL
	PUSH  CS
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	JO    L5661H
L5661H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-36,DH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L5670H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DL
	CMP   BYTE PTR [BX+SI],BH
	DB    06CH
	DB    06CH
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L5684H:  ADD   BYTE PTR [BX+SI],AL
	CMP   AL,'f'
	DB    0C0H
L5689H:  DB    0C0H
	DB    0C0H
	MOV   BYTE PTR [BP]+60,OFFSET 18H
	OR    AL,0CCH
	CMP   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,AL
	ADD   BYTE PTR [BX+SI],AL
L5699H:  MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0CEH
	JBE   L56A1H
L56A1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],AL
L56A9H:  JL    L5671H
	MOV   DH,OFFSET 0C0H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	JS    L5684H
	ADD   BYTE PTR [BX+SI]+12,BH
	JL    L5689H
	INT   3
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,CL
	ADD   BYTE PTR [BX+SI],AL
	JS    L56D7H
	JL    L5699H
	INT   3
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    060H
	XOR   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI]+12,BH
	JL    L56A9H
	INT   3
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
L56E1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [SI]+56,CH
	ADD   BYTE PTR [BX+SI]+12,BH
	JL    L56B9H
	INT   3
L56EEH:  ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]-58,BH
	DB    0C0H
	DB    0C0H
	MOV   BYTE PTR [SI]+24,OFFSET 0CH
	DB    06CH
	CMP   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI]-52,BH
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C0H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INT   3
	ADD   BYTE PTR [BX+SI],AL
	JL    L56E1H
	MOV   DH,OFFSET 0C0H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	SBB   BYTE PTR [SI],CL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C0H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    066H
	ADD   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [SI],BH
	DB    066H
	ADD   BYTE PTR [BX+SI],BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+48,AH
	SBB   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   BYTE PTR [BX+SI],OFFSET 38H
	DB    06CH
	MOV   DH,OFFSET 0C6H
	INC   DH
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
	CMP   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [SI]-58,CH
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	SBB   BYTE PTR [BX+SI],DH
	ADD   DH,BH
	DB    060H
	DB    060H
	JL    L57EDH
	DB    060H
	DB    060H
	INC   BYTE PTR [BX+SI]
L5791H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-37,AH
	SBB   DI,WORD PTR [BX]-40
	ESC   BH                ;Allow co-processor operation.
	JBE   L57A1H
L57A1H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-40,BH
	ESC   AL                ;Allow co-processor operation.
	ESC   DH                ;Allow co-processor operation.
	ESC   AL                ;Allow co-processor operation.
	ESC   DH                ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L57B4H:  ADD   BYTE PTR [BX+SI],DH
	JS    L5784H
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   BYTE PTR [BX+SI],OFFSET 0
	JL    L5791H
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	SBB   BYTE PTR [SI],CL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	JS    L57B4H
	ADD   DH,AL
	MOV   DH,OFFSET 0C6H
L57EDH:  MOV   DH,OFFSET 76H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+48,AH
	SBB   BYTE PTR [BX+SI],AL
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0CEH
	JBE   L5801H
L5801H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   BYTE PTR [BX+SI],OFFSET 0
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 76H
	PUSH  ES
	PUSH  ES
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   DH,AL
	ADD   BYTE PTR [SI]-58,BH
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	JL    L5821H
L5821H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   BYTE PTR [BX+SI],OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	JL    L5800H
	DB    0C0H
	DB    0C0H
	MOV   BYTE PTR [SI]+24,OFFSET 18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
	DB    060H
	DB    060H
	LOCK                    ;Lock the buss for next instrn.
	DB    060H
	DB    060H
	DB    060H
	DB    066H
	IMUL  BYTE PTR [SI]+0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    066H
	DB    066H
	DB    066H
	DB    066H
L5859H:  CMP   AL,18H
	JLE   L5875H
	CMP   AL,18H
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CLD                     ;Set forward direction flag.
	MOV   DH,OFFSET 0FCH
	DB    0C0H
	INT   3
	ESC   AH                ;Allow co-processor operation.
	INT   3
	INT   3
	MOV   BYTE PTR [BX+SI],OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [L181BH],CL
	SBB   BYTE PTR [BX+SI],BL
	JLE   L5894H
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ESC   BYTE PTR [BX+SI]+0;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],AL
	JS    L5897H
	JL    L5859H
	INT   3
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,18H
L5897H:  XOR   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],AL
	JL    L5871H
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+0,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	XOR   BYTE PTR [BX+SI]+0,AH
	INT   3
	INT   3
	INT   3
	INT   3
	INT   3
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-36,DH
	ADD   BYTE PTR [SI]+6666H,BH
	DB    066H
	DB    066H
	DB    066H
	OUT  AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JBE   L58B3H
	ADD   DH,AL
	MOV   DH,OFFSET 0F6H
	ESC   DH                ;Allow co-processor operation.
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   AL,'l'
	DB    06CH
	ADD   BYTE PTR DS:[BP]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
	DB    06CH
	CMP   BYTE PTR [BX+SI],AL
	JL    L58FCH
L58FCH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI],DH
	ADD   BYTE PTR [BX+SI],DH
	XOR   BYTE PTR [BX+SI],DH
	DB    060H
	MOV   DH,OFFSET 7CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+96,BH
	DB    060H
	DB    060H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JLE   L5933H
	PUSH  ES
	PUSH  ES
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L5933H:  ADD   BYTE PTR [BX+SI],AL
	DB    060H
	DB    060H
	DB    062H
	DB    066H
	DB    06CH
	SBB   BYTE PTR [BX+SI],DH
	DB    060H
	ESC   BYTE PTR [L180CH] ;Allow co-processor operation.
	ADD   BYTE PTR DS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI]+96,AH
	DB    062H
	DB    066H
	DB    06CH
	SBB   BYTE PTR [LDE6EH],DH
	JLE   L5956H
	PUSH  ES
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L5956H:  SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],BH
	CMP   AL,'<'
	CMP   AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [LD86CH],DH
	DB    06CH
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,BL
	DB    06CH
	DB    036H
	DB    06CH
	ESC   BYTE PTR [BX+SI]  ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+DI],DL
	INC   SP
L5986H:  ADC   WORD PTR [SI]+17,AX
	INC   SP
L598AH:  ADC   WORD PTR [SI]+17,AX
	INC   SP
L598EH:  ADC   WORD PTR [SI]+17,AX
	INC   SP
	ADC   WORD PTR [SI]-86,AX
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	STOSB                   ;Store byt in AL in (DI)+-.
	PUSH  BP
	ESC   WORD PTR [BX]-35  ;Allow co-processor operation.
	JA    L5986H
	JA    L5988H
	JA    L598AH
	JA    L598CH
	JA    L598EH
	JA    L5990H
	JA    L59CDH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CLC                     ;Clear the carry flag.
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,BH
	SBB   AL,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DIV   BYTE PTR SS:[L3636H]
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,BH
	SBB   AL,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	TEST  BYTE PTR SS:[L36F6H],36H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	PUSH  ES
	DIV   BYTE PTR [L3636H]
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	TEST  BYTE PTR SS:[L00FEH],0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	INC   BYTE PTR SS:[BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	CLC                     ;Clear the carry flag.
	SBB   AL,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BH,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	AAA                     ;Ascii adjust for addition.
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	AAA                     ;Ascii adjust for addition.
	XOR   BYTE PTR [BX],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX],BH
	XOR   BYTE PTR [BX],DH
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	TEST  WORD PTR SS:[BX+SI],L00FFH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   WORD PTR [BX+SI]
	DIV   WORD PTR [L3636H]
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	AAA                     ;Ascii adjust for addition.
	XOR   BYTE PTR [BX],DH
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	ADD   BYTE PTR SS:[BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	ADD   BH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	TEST  WORD PTR SS:[BX+SI],L36F7H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	SBB   BYTE PTR SS:[BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BH,BH
	ADD   BH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	INC   WORD PTR SS:[BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   WORD PTR [BX+SI]
	CALL  DWORD PTR [BX+SI]
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	PUSH  WORD PTR [L3636H]
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	AAS                     ;Ascii adjust for subtraction.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX],BH
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	PUSH  WORD PTR SS:[L3636H]
	DB    036H
	DB    036H
	DB    036H
	DB    036H
	SBB   BYTE PTR SS:[BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BH,BH
	SBB   BH,BH
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BH,BH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	PUSH  AX
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	LOCK                    ;Lock the buss for next instrn.
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    00FH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	DB    0FFH
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-36,DH
	ESC   AL                ;Allow co-processor operation.
	ESC   AL                ;Allow co-processor operation.
	ESC   BYTE PTR [BP]+0   ;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]-52,BH
	ESC   AH                ;Allow co-processor operation.
	MOV   DH,OFFSET 0E6H
	ESC   AL                ;Allow co-processor operation.
	DB    0C0H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    0FEH
	DB    066H
	DB    062H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	DB    060H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	DB    06CH
	DB    06CH
	DB    06CH
	DB    06CH
	DB    06CH
	DB    06CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	INC   DH
	DB    062H
	XOR   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],DH
	DB    062H
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JLE   L5CB3H
	INT   3
	INT   3
	INT   3
	ESC   BYTE PTR [BX+SI]+0;Allow co-processor operation.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+102,AH
	DB    066H
	DB    066H
	DB    066H
	JL    L5D4FH
	DB    0C0H
	ADD   BYTE PTR [BX+SI],0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JBE   L5CD7H
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	CMP   BYTE PTR [BX+SI],BH
	DB    06CH
	MOV   DH,OFFSET 6CH
	CMP   BYTE PTR [BX+SI],BH
	INC   BYTE PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	CMP   BYTE PTR [SI]-58,CH
	MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+56,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BH
	DB    06CH
L5D28H:  MOV   DH,OFFSET 0C6H
	MOV   BYTE PTR [SI]+108,OFFSET 6CH
	OUT   AL,DX
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    03EH
	DB    060H
	DB    060H
	CMP   AL,'f'
	MOV   DH,OFFSET 0C6H
L5D3EH:  INT   3
	JS    L5D41H
L5D41H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JLE   L5D26H
	ESC   BX                ;Allow co-processor operation.
	JLE   L5D4FH
L5D4FH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP+SI],AL
	PUSH  ES
	JL    L5D28H
	ESC   DH                ;Allow co-processor operation.
	IDIV  BYTE PTR [SI]+96
	DB    0C0H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],BL
	XOR   BYTE PTR [BX+SI]+96,AH
	JL    L5DCDH
	DB    060H
	XOR   BYTE PTR [SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JL    L5D3EH
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0C6H
	MOV   DH,OFFSET 0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   DH,BH
	ADD   BYTE PTR [BX+SI],AL
	INC   BYTE PTR [BX+SI]
	ADD   DH,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BP]+24,BH
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],DH
	SBB   BYTE PTR [SI],CL
	PUSH  ES
	OR    AL,18H
	XOR   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	SBB   BYTE PTR [BX+SI],DH
	DB    060H
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,0
	ADD   BYTE PTR [BP]+0,BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI],CL
	PUSH  DS
	SBB   BL,BYTE PTR [BX+SI]
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	POP   AX
	JS    L5E11H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],AL
	JLE   L5DEDH
L5DEDH:  SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-36,DH
	ADD   BYTE PTR [BP]-36,DH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]-52,BH
	INT   3
	JS    L5E0BH
L5E0BH:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
L5E11H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	SBB   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   AL,BL
	ESC   BYTE PTR [BX+SI]+56;Allow co-processor operation.
	SBB   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ESC   BYTE PTR [SI]+108 ;Allow co-processor operation.
	DB    06CH
	DB    06CH
	DB    06CH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JO    L5E30H
	SBB   BYTE PTR [BX+SI],DH
	DB    060H
	CLC                     ;Clear the carry flag.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]+126,BH
	JLE   L5EEBH
	JLE   L5EEDH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [DI],BL
	DW    chksum
	DB    0
	ADD   BYTE PTR [BX+SI],AL
	AND   AL,66H
	JMP   WORD PTR [BP]+36
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DAS                     ;Decimal adjust for subtraction.
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+DI],AL
	ADD   AX,WORD PTR [L180CH]
	XOR   BYTE PTR [BX+SI]-64,AH
	ADD   BYTE PTR [BX+SI],0
	ADD   BYTE PTR [BX+SI],AL
	XOR   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-61,BH
	RET
	RET
	ESC   BX                ;Allow co-processor operation.
	RET
	RET
	RET
	JLE   L5EB4H
L5EB4H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [DI]+0,CL
	ADD   BL,AL
	RET
	OUT  AX,0FFH
	CALL  DBX
	ESC   BX                ;Allow co-processor operation.
	RET
	RET
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	PUSH  SP
	ADD   BYTE PTR [BX+SI],AL
	CALL  DWORD PTR [BX+DI]+L1818H
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [BX+SI],BL
	SBB   BYTE PTR [SI],BH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	PUSH  SI
	ADD   BYTE PTR [BX+SI],AL
	RET
	RET
	RET
	RET
	RET
	RET
	RET
	DB    066H
	CMP   AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	PUSH  DI
	ADD   BYTE PTR [BX+SI],AL
L5EEDH:  RET
	RET
	RET
	RET
	ESC   BX                ;Allow co-processor operation.
	ESC   BX                ;Allow co-processor operation.
	JMP   WORD PTR [BP]+0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI]+0,BL
	ADD   BL,AL
	RET
	RET
	DB    066H
	CMP   AL,'<'
	DB    066H
	RET
	RET
	RET
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	POP   CX
	ADD   BYTE PTR [BX+SI],AL
	RET
	RET
	RET
	RET
	DB    066H
	CMP   AL,18H
	SBB   BYTE PTR [BX+SI],BL
	CMP   AL,0
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [SI]+0,BL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,60H
	XOR   BYTE PTR [BX+SI],BL
	OR    AL,6
	ADD   AX,WORD PTR [BX+DI]
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	DB    06DH
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BP]-1,AH
	ESC   BX                ;Allow co-processor operation.
	ESC   BX                ;Allow co-processor operation.
	RET
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JBE   L5F41H
L5F41H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	RET
	RET
	RET
	RET
	DB    066H
	CMP   AL,18H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	JA    L5F52H
L5F52H:  ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	RET
	RET
	ESC   BX                ;Allow co-processor operation.
	ESC   DI                ;Allow co-processor operation.
	DB    066H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	MOV   CH,DH
	MOV   DH,BYTE PTR [swid_qm]
	PUSH  ES
	POP   DS
	OR    BL,BL
	JZ    L5F95H
	MOV   AL,CH
	SUB   AL,BL
	MUL   DH
	MOV   CX,AX
	PUSH  DX
	XOR   DH,DH
	SHL   DX,1
	SHL   DX,1
	MOV   AX,DX
	SHL   DX,1
	SUB   DX,BP
L5F84H:  PUSH  CX
	MOV   CX,AX
	REPZ MOVSW              ;Move wrd, (SI)+- to (DI)+-.
	SUB   DI,DX
	SUB   SI,DX
	POP   CX
	LOOP  L5F84H            ;Dec CX, loop if CX<>0.
	POP   DX
L5F91H:  CALL  L5F99H
	RET
	MOV   BL,CH
	JMP   SHORT L5F91H
;
L5F99H:  MOV   AL,DH
	MUL   BL
	MOV   CX,AX
	MOV   AL,BH
	MOV   AH,AL
	XOR   DH,DH
	SHL   DX,1
	SHL   DX,1
	MOV   BX,DX
	SHL   DX,1
	MOV   SI,CX
	SUB   DX,BP
	MOV   CX,BX
	REPZ STOSW              ;Store wrd in AX in (DI)+-.
	SUB   DI,DX
	DEC   SI
	JNZ   L5FB1H
	RET
	PUSH  AX
	AND   CX,OFFSET 3F3FH
	AND   DH,3FH
	MOV   AL,OFFSET 1EH
	MUL   DH
	PUSH  AX
	MOV   AL,OFFSET 3BH
	MUL   CH
	PUSH  AX
	MOV   AL,OFFSET 0BH
	MUL   CL
	POP   CX
	ADD   AX,CX
	POP   CX
	ADD   AX,CX
	MOV   CL,OFFSET 64H
	DIV   CL
	CMP   AH,'2'
	JL    L5FE2H
	INC   AL
L5FE2H:  MOV   DH,AL
	MOV   CH,AL
	MOV   CL,AL
	POP   AX
	RET
	PUSH  DX
	CALL  L6031H
	POP   DX
;
L5FEFH:  PUSH  BX
	MOV   BX,DX
	MOV   DX,OFFSET L03C8H
	CLI                     ;Disable interupts.
	CALL  L600CH
	INC   DX
	MOV   AL,BH
	CALL  L600CH
	MOV   AL,CH
	CALL  L600CH
	MOV   AL,CL
	CALL  L600CH
	STI                     ;Enable interupts.
	POP   BX
	RET
;
L600CH:  OUT   AL,DX
	RET
;
L600EH:  CALL  L6031H
;
L6011H:  PUSH  BX
	CLI                     ;Disable interupts.
	MOV   DX,OFFSET L03C7H
	CALL  L600CH
	INC   DX
	INC   DX
	IN    AL,DX
	MOV   BH,AL
	JMP   SHORT L6020H
L6020H:  JMP   SHORT L6022H
L6022H:  IN    AL,DX
	MOV   CH,AL
	JMP   SHORT L6027H
L6027H:  JMP   SHORT L6029H
L6029H:  IN    AL,DX
	MOV   CL,AL
	MOV   DH,BH
	STI                     ;Enable interupts.
	POP   BX
L6030H:  RET
;
L6031H:  PUSH  AX
	PUSH  CX
	CALL  get_is1
	MOV   CX,OFFSET L7FFFH
L6039H:  IN    AL,DX
	TEST   AL,8
	LOOPZ L6039H            ;Dec CX, loop if Z and CX<>0.
	POP   CX
	POP   AX
	RET
;
setpal:  TEST  BYTE PTR [flag489],8
	JZ    setpal1
setpalx: RET
setpal1: MOV   AL,OFFSET 0BBH
	CALL  rd_1ce            ;ext(bb)
	MOV   AH,AL
	TEST  AH,19H
	JZ    setpalx
	MOV   DX,OFFSET seqport
	MOV   AL,OFFSET 0FFH
	MOV   DL,OFFSET 0C6H
	OUT   AL,DX             ;set pel mask
	MOV   DL,OFFSET 0C8H
	MOV   AL,OFFSET 0BBH
	CALL  rd_1ce            ;ext(bb)
	CMP   BYTE PTR [crtport],0B4H
	JNZ   L60D0H            ;if color
	MOV   SI,OFFSET pel_a
	TEST  BYTE PTR [flag489],2
	JNZ   setpal2
	AND   AL,0C0H
	JZ    setpal2
	CMP   AL,0C0H
	JZ    setpal2
	MOV   SI,OFFSET pel_b
	CMP   AL,80H
	JZ    setpal2
	MOV   SI,OFFSET pel_c
setpal2: MOV   CX,OFFSET plug8   ;set 64 settings, or 32?
	XOR   BX,BX
setpal3: MOV   AL,BL
	CLI                     ;Disable interupts.
	OUT   AL,DX             ;3c8 = pel write address
	MOV   DI,BX
	SHR   DI,1
	SHR   DI,1
	SHR   DI,1
	AND   DI,3
	ADD   DI,SI
	MOV   AL,BYTE PTR CS:[DI]
	INC   DX
	OUT   AL,DX             ;3c9 = pel data
	MOV   AL,BYTE PTR CS:[DI]+4
	OUT   AL,DX
	MOV   AL,BYTE PTR CS:[DI]+8
	OUT   AL,DX
	STI                     ;Enable interupts.
	INC   BL
	DEC   DX
	LOOP  setpal3           ;Dec CX, loop if CX<>0.
setpal4: RET
L60B3H:  MOV   DI,OFFSET L6D44H
	MOV   CX,OFFSET extport
	XOR   BX,BX
	MOV   BP,CX
	CALL  L6263H
L60C0H:  MOV   DI,OFFSET L6D44H
	MOV   CX,OFFSET extport
	XOR   BX,BX
	MOV   BP,OFFSET L0001H
	CALL  L6263H
	JMP   SHORT setpal4
L60D0H:  CMP   BYTE PTR [L0449H],'e'
	JZ    L60B3H
	CMP   BYTE PTR [L0449H],'g'
	JZ    L6156H
	TEST  BYTE PTR ES:[BX]+57,20H
	JNZ   L60C0H
	MOV   AL,BYTE PTR ES:[BX]+43
	TEST  BYTE PTR [flag489],2
	JNZ   L60F2H
	JMP   SHORT L6122H
L60F2H:  MOV   CX,OFFSET L00F8H
	MOV   DI,OFFSET L6C44H
	CMP   AL,8
	JZ    L6109H
	MOV   CX,OFFSET plug8
	MOV   DI,OFFSET L61B5H
	CMP   AL,'8'
	JZ    L6109H
	MOV   DI,OFFSET L61F5H
L6109H:  XOR   BX,BX
L610BH:  MOV   AL,BL
	CLI                     ;Disable interupts.
	OUT   AL,DX
	MOV   AL,BYTE PTR CS:[BX+DI]
	INC   DX
	OUT   AL,DX
	NOP
	NOP
	OUT   AL,DX
	NOP
	NOP
	OUT   AL,DX
	STI                     ;Enable interupts.
	INC   BL
	DEC   DX
	LOOP  L610BH            ;Dec CX, loop if CX<>0.
	JMP   SHORT setpal4
L6122H:  CMP   AL,8
	JZ    L6148H
	CMP   AL,'8'
	JZ    L6156H
	MOV   CX,OFFSET L0008H
	XOR   BX,BX
L612FH:  PUSH  CX
	MOV   CX,OFFSET L0008H
	MOV   DI,OFFSET L6D44H
	TEST  BX,extport
	JZ    L613FH
	MOV   DI,OFFSET L6D5CH
L613FH:  CALL  L6245H
	POP   CX
	LOOP  L612FH            ;Dec CX, loop if CX<>0.
	JMP   setpal4
L6148H:  MOV   DI,OFFSET L6D44H
	MOV   CX,OFFSET L0100H
	XOR   BX,BX
	CALL  L6245H
	JMP   setpal4
L6156H:  MOV   CX,OFFSET plug8
	XOR   BX,BX
L615BH:  PUSH  CX
	CALL  L616CH
	MOV   AL,BL
	CALL  L64A6H
	INC   BL
	POP   CX
	LOOP  L615BH            ;Dec CX, loop if CX<>0.
	JMP   setpal4
;
L616CH:  MOV   DI,BX
	SHR   DI,1
	SHR   DI,1
	AND   DI,0FH
	MOV   DH,BYTE PTR CS:[DI]+6235H
	MOV   DI,BX
	SHR   DI,1
	AND   DI,0FH
	MOV   CH,BYTE PTR CS:[DI]+6235H
	MOV   DI,BX
	AND   DI,0FH
	MOV   CL,BYTE PTR CS:[DI]+6235H
	RET
pel_a:   DB    0,2AH,0,3FH,0,2AH
	DB    0,3FH,0,2AH,0,3FH
pel_c:   DB    0,0,0,1FH,0,2AH
	DB    0,3FH,0,0,0,15H
pel_b:   DB    0,30H,0,3FH,0,15H
	DB    0,15H,0,0,0,0
L61B5H:  ADD   BYTE PTR [DI],AL
	ADC   WORD PTR [SI],BX
	OR    BYTE PTR [BP+DI],CL
	AND   AX,OFFSET 0228H
	POP   ES
	SBB   SP,WORD PTR [BX+SI]
	DB    00FH
	ADC   AL,28H
	SUB   AL,0CH
	ADC   WORD PTR [DI],SP
	SUB   DL,BYTE PTR [SI]
	PUSH  DS
	XOR   DH,BYTE PTR [L130FH]
	DAA                     ;Decimal adjust for addition.
	SUB   AL,1BH
	AND   BYTE PTR [SI],DH
	CMP   WORD PTR [L1F0BH],AX
	AND   AL,13H
	SBB   BYTE PTR [SI],CH
	XOR   BYTE PTR [BX+DI],CL
	OR    AX,OFFSET 2621H
	ADC   AX,OFFSET 2E1AH
	XOR   DX,WORD PTR [BP+DI]
	POP   SS
	SUB   SI,WORD PTR [BX+SI]
	POP   DS
	AND   AL,38H
	CMP   AX,OFFSET 180EH
	SUB   AX,OFFSET 2032H
	AND   AL,38H
	AAS                     ;Ascii adjust for subtraction.
L61F5H:  ADD   BYTE PTR [DI],AL
	ADC   WORD PTR [SI],BX
	OR    BYTE PTR [BP+DI],CL
	ADC   AL,18H
	ADD   BYTE PTR [DI],AL
	ADC   WORD PTR [SI],BX
	OR    BYTE PTR [BP+DI],CL
	ADC   AL,18H
	PUSH  CS
	SBB   BYTE PTR [DI],CH
	XOR   AH,BYTE PTR [BX+SI]
L620AH:  AND   AL,38H
	AAS                     ;Ascii adjust for subtraction.
	PUSH  CS
	SBB   BYTE PTR [DI],CH
	XOR   AH,BYTE PTR [BX+SI]
	AND   AL,38H
	AAS                     ;Ascii adjust for subtraction.
	ADD   BYTE PTR [DI],AL
	ADC   WORD PTR [SI],BX
	OR    BYTE PTR [BP+DI],CL
	ADC   AL,18H
	ADD   BYTE PTR [DI],AL
	ADC   WORD PTR [SI],BX
	OR    BYTE PTR [BP+DI],CL
	ADC   AL,18H
	PUSH  CS
	SBB   BYTE PTR [DI],CH
	XOR   AH,BYTE PTR [BX+SI]
	AND   AL,38H
	AAS                     ;Ascii adjust for subtraction.
	PUSH  CS
	SBB   BYTE PTR [DI],CH
	XOR   AH,BYTE PTR [BX+SI]
	AND   AL,38H
	AAS                     ;Ascii adjust for subtraction.
	ADD   BYTE PTR [BP+SI],CH
	ADD   BYTE PTR [BP+SI],CH
	ADD   BYTE PTR [BP+SI],CH
	ADD   BYTE PTR [BP+SI],CH
	ADC   AX,OFFSET 153FH
	AAS                     ;Ascii adjust for subtraction.
	ADC   AX,OFFSET 153FH
	AAS                     ;Ascii adjust for subtraction.
;
L6245H:  MOV   AL,BL
	CLI                     ;Disable interupts.
	OUT   AL,DX
	MOV   AL,BYTE PTR CS:[DI]
	INC   DX
	NOP
	OUT   AL,DX
	INC   DI
	MOV   AL,BYTE PTR CS:[DI]
	NOP
	OUT   AL,DX
	INC   DI
	MOV   AL,BYTE PTR CS:[DI]
	NOP
	OUT   AL,DX
	STI                     ;Enable interupts.
	INC   DI
	INC   BL
	DEC   DX
	LOOP  L6245H            ;Dec CX, loop if CX<>0.
	RET
;
L6263H:  PUSH  CX
	MOV   DH,BYTE PTR CS:[DI]
	INC   DI
	MOV   CH,BYTE PTR CS:[DI]
	INC   DI
	MOV   CL,BYTE PTR CS:[DI]
	INC   DI
	CALL  L64A6H
	ADD   BX,BP
	POP   CX
	LOOP  L6263H            ;Dec CX, loop if CX<>0.
	RET
mode10:  CALL  zeroDS
	CMP   AL,4
	JG    L629DH
	PUSH  AX
	PUSH  DX
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	TEST   AL,1
	POP   DX
	POP   AX
	JZ    L6296H
	CMP   BYTE PTR [crtport],0D4H
	JZ    L629DH
L6293H:  JMP   iret
L6296H:  CMP   BYTE PTR [crtport],0B4H
	JNZ   L6293H
L629DH:  CMP   AL,1CH
	NOP
	NOP
	JG    L6293H
	XOR   AH,AH
	MOV   BP,AX
	SHL   BP,1
	JMP   WORD PTR CS:[BP]+62AEH
	OUT  AL,62H
	OR    BYTE PTR [BP+DI]+26,AH
	DB    063H
	DEC   SI
	DB    063H
	XCHG  AX,BX
	DB    062H
	XCHG  AX,BX
	DB    062H
	XCHG  AX,BX
	DB    062H
	DB    06EH
	DB    063H
	TEST  WORD PTR [BP+DI]-119,SP
	DB    063H
	XCHG  AX,BX
	DB    062H
	XCHG  AX,BX
	DB    062H
	XCHG  AX,BX
	DB    062H
	XCHG  AX,BX
	DB    062H
	XCHG  AX,BX
	DB    062H
	XCHG  AX,BX
	DB    062H
	MOV   CH,OFFSET 63H
	XCHG  AX,BX
	DB    062H
	MOV   BX,OFFSET LD863H
	DB    063H
	XCHG  AX,BX
	DB    062H
	SBB   AH,BYTE PTR [SI]-109
	DB    062H
	SUB   AH,BYTE PTR [SI]+71
	DB    064H
	PUSH  AX
	DB    064H
	POP   BP
	DB    064H
	AND   WORD PTR [SI]-128,OFFSET 493EH
	ADD   AL,13H
	JZ    L6302H
	CALL  fiddle
	MOV   AX,BX
	XCHG  AH,AL
	CALL  L1897H
	OR    BP,BP
	JZ    L6302H
	MOV   AL,BH
	XOR   BH,BH
	MOV   BYTE PTR ES:[BX+DI],AL
L6302H:  CALL  get_is1
	JMP   iret
	CALL  fiddle
	MOV   AL,BH
	CALL  L35E6H
	OR    BP,BP
	JZ    L6302H
	MOV   BYTE PTR ES:[DI]+17,BH
	JMP   SHORT L6302H
	CMP   BYTE PTR [L0449H],13H
	JZ    L6302H
	PUSH  ES
	CALL  fiddle
	POP   DS
	OR    BP,BP
	JZ    L6331H
	MOV   SI,DX
	MOV   CX,OFFSET L0011H
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
L6331H:  MOV   SI,DX
	CALL  L6031H
	XOR   AH,AH
	MOV   CX,OFFSET extport
	MOV   DL,OFFSET 0C0H
L633DH:  CLI                     ;Disable interupts.
	MOV   AL,AH
	OUT   AL,DX
	LODSB                   ;Load AL with byt at (SI)+-.
	OUT   AL,DX
	STI                     ;Enable interupts.
	INC   AH
	LOOP  L633DH            ;Dec CX, loop if CX<>0.
	LODSB                   ;Load AL with byt at (SI)+-.
	CALL  L35E6H
	JMP   SHORT L6302H
	CALL  get_is1
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 30H
	CALL  r_port
	AND   AL,0F7H
	AND   BYTE PTR [L0465H],0DFH
	CMP   BL,0
	JZ    L636BH
	OR    AL,8
	OR    BYTE PTR [L0465H],20H
L636BH:  OUT   AL,DX
	JMP   SHORT L6302H
L636EH:  CALL  get_is1
	MOV   AL,BL
	OR    AL,20H
	MOV   DL,OFFSET 0C0H
	CALL  r_port
	MOV   CX,AX
	POP   AX
	POP   BX
	MOV   BH,CL
	PUSH  BX
	PUSH  AX
	JMP   L6302H
	MOV   BL,OFFSET 11H
	JMP   SHORT L636EH
	MOV   DI,DX
	CALL  get_is1
	MOV   CX,OFFSET extport
	XOR   AH,AH
	MOV   DL,OFFSET 0C0H
L6395H:  MOV   AL,AH
	CLI                     ;Disable interupts.
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	MOV   BYTE PTR ES:[DI],AL
	INC   AH
	DEC   DX
	OUT   AL,DX
	STI                     ;Enable interupts.
	INC   DI
	LOOP  L6395H            ;Dec CX, loop if CX<>0.
	CLI                     ;Disable interupts.
	MOV   AL,OFFSET 11H
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	STI                     ;Enable interupts.
	MOV   BYTE PTR ES:[DI],AL
	CALL  setar20
	JMP   SHORT L6414H
	CALL  L6496H
	JMP   iret
	MOV   DI,DX
L63BDH:  PUSH  CX
	MOV   AX,BX
	MOV   DH,BYTE PTR ES:[DI]
	MOV   CH,BYTE PTR ES:[DI]+1
	MOV   CL,BYTE PTR ES:[DI]+2
	CALL  L64A6H
	ADD   DI,3
	INC   BX
	POP   CX
	LOOP  L63BDH            ;Dec CX, loop if CX<>0.
	JMP   iret
	OR    BL,BL
	JNZ   L63F6H
	CALL  get_is1
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 30H
	CALL  r_port
	AND   AL,7FH
	TEST  BH,1
	JZ    L63EFH
	OR    AL,80H
L63EFH:  MOV   AH,OFFSET 30H
	CALL  L1897H
	JMP   SHORT L6414H
L63F6H:  DEC   BL
	JNZ   L6417H
	CALL  get_is1
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 30H
	CALL  r_port
	OUT   AL,DX
	TEST   AL,80H
	JNZ   L640DH
	SHL   BH,1
	SHL   BH,1
L640DH:  MOV   AH,OFFSET 34H
	MOV   AL,BH
	CALL  L1897H
L6414H:  CALL  get_is1
L6417H:  JMP   iret
	MOV   AL,BL
	CALL  L600EH
	POP   AX
	POP   BX
	ADD   SP,4
	POP   BP
	POP   SI
	POP   DI
	POP   ES
	POP   DS
	IRET                    ;Return from interupt.
	MOV   DI,DX
L642CH:  PUSH  CX
	MOV   AX,BX
	CALL  L6011H
	MOV   BYTE PTR ES:[DI],DH
	MOV   BYTE PTR ES:[DI]+1,CH
	MOV   BYTE PTR ES:[DI]+2,CL
	ADD   DI,3
	INC   BX
	POP   CX
	LOOP  L642CH            ;Dec CX, loop if CX<>0.
	JMP   iret
	MOV   DX,OFFSET L03C6H
	MOV   AL,BL
	OUT   AL,DX
	JMP   iret
	MOV   DX,OFFSET L03C6H
	IN    AL,DX
	XOR   AH,AH
	POP   BX
	POP   DX
	PUSH  AX
	PUSH  BX
	JMP   iret
	CALL  get_is1
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 34H
	CALL  r_port
	MOV   BH,AL
	OUT   AL,DX
	MOV   AL,OFFSET 30H
	CALL  r_port
	MOV   BL,OFFSET 1
	TEST   AL,80H
	JNZ   L647BH
	MOV   BL,OFFSET 0
	SHR   BH,1
	SHR   BH,1
L647BH:  POP   AX
	POP   AX
	PUSH  BX
	PUSH  AX
	JMP   SHORT L6414H
L6481H:  PUSH  CX
	MOV   AX,BX
	CALL  L6011H
	CALL  L5FBBH
	MOV   AL,BL
	CALL  L5FEFH
	INC   BX
	POP   CX
	LOOP  L6481H            ;Dec CX, loop if CX<>0.
	JMP   iret
;
L6496H:  TEST  BYTE PTR [flag489],2
	JZ    L64A0H
	CALL  L5FBBH
L64A0H:  MOV   AL,BL
	CALL  L5FEAH
	RET
;
L64A6H:  TEST  BYTE PTR [flag489],2
	JZ    L64B0H
	CALL  L5FBBH
L64B0H:  MOV   AL,BL
	CALL  L5FEFH
	RET
;
gmodeinf:LES   BX,DWORD PTR [plug10];Load ES:BX with 32b pointer.
	LES   BX,DWORD PTR ES:[BX];Load ES:BX with 32b pointer.
	MOV   DX,BX
	OR    AH,AH
	JGE   L64C4H
	RET
L64C4H:  CMP   AH,'j'
	JZ    L64CEH
	CMP   AH,'S'
	JNZ   L64D0H
L64CEH:  MOV   AH,OFFSET 54H
;
L64D0H:  MOV   AL,OFFSET 0BBH
	CALL  rd_1ce
	AND   AL,1FH
	PUSH  AX
	CALL  L64E5H
	POP   AX
	CMP   BX,DX
	JNZ   L64E4H
	CALL  L65D3H
	RET
L64E4H:  RET
;
L64E5H:  XOR   SI,SI
	CMP   AH,3
	JG    L6558H
	DEC   DX
	MOV   AL,BYTE PTR [L0488H]
	AND   AL,0FH
	CMP   AL,2
	JLE   L652EH
	CMP   AL,8
	JZ    L652EH
	CMP   AL,6
	JZ    L652EH
	CMP   AL,7
	JZ    L652EH
	MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,4
	JNZ   L654BH
	TEST   AL,1
	JNZ   L6516H
	TEST  BYTE PTR [flag489],10H
	JNZ   L6521H
L6516H:  MOV   AL,OFFSET 40H
	MUL   AH
	ADD   BX,AX
	ADD   BX,OFFSET 04C0H
	RET
L6521H:  MOV   AL,OFFSET 40H
	SHR   AH,1
	MUL   AH
	ADD   BX,AX
	ADD   BX,OFFSET 05C0H
	RET
L652EH:  MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,1
	JZ    L6544H
	SHR   AH,1
	MOV   AL,OFFSET 40H
	MUL   AH
	ADD   BX,OFFSET 0880H
	ADD   BX,AX
	RET
L6544H:  MOV   AL,OFFSET 40H
	MUL   AH
	ADD   BX,AX
	RET
L654BH:  MOV   AL,OFFSET 40H
	SHR   AH,1
	MUL   AH
	ADD   BX,AX
	ADD   BX,OFFSET 0240H
	RET
L6558H:  CMP   AH,7
	JNZ   L6580H
	MOV   AL,OFFSET 0B1H
	CALL  rd_1ce
	TEST   AL,4
	JNZ   L657BH
	TEST   AL,1
	JNZ   L6571H
	TEST  BYTE PTR [flag489],10H
	JNZ   L6576H
L6571H:  ADD   BX,OFFSET L01C0H
	RET
L6576H:  ADD   BX,OFFSET 0640H
	RET
L657BH:  ADD   BX,OFFSET L0200H
	RET
L6580H:  CALL  L66AEH
	CMP   BX,DX
	JZ    L6588H
	RET
L6588H:  MOV   DI,OFFSET L65A0H
	MOV   SI,OFFSET L65D3H
	PUSH  AX
	MOV   AL,OFFSET 0B0H
	CALL  rd_1ce
	TEST   AL,18H
	POP   AX
	JNZ   L659CH
	MOV   SI,OFFSET L65C7H
L659CH:  CALL  L18C8H
	RET
L65A0H:  ADD   AL,0
	ADD   WORD PTR [DI],AX
	INC   AX
	ADD   WORD PTR [sub7],AX
	OR    AX,OFFSET 0340H
	PUSH  CS
	ADD   BYTE PTR [BP+DI],0FH
	INC   AX
	ADD   AL,10H
	ADD   BYTE PTR [SI],11H
	ADD   BYTE PTR [LC012H],6
	ADC   AX,WORD PTR [BX+SI]
	POP   ES
	POP   BX
	INC   AX
	POP   ES
	DB    062H
	INC   AX
	OR    WORD PTR [BX+DI]+0,SP
	OR    WORD PTR [BX],SP
	ADD   BYTE PTR [BX],23H
	DB    0C0H
	POP   ES
	AAA                     ;Ascii adjust for addition.
	ADD   BYTE PTR [BX+SI],CL
	XOR   AX,WORD PTR [BX+SI]+8
;
L65D3H:  XOR   CX,CX
	MOV   DI,OFFSET L6672H
	JMP   SHORT L65ECH
L65DAH:  CMP   BYTE PTR CS:[DI],AH
	JNZ   L65E9H
	MOV   AH,BYTE PTR CS:[DI]+1
	MOV   CL,BYTE PTR CS:[DI]+2
	JMP   SHORT L65F2H
L65E9H:  ADD   DI,3
L65ECH:  CMP   DI,OFFSET L6678H
	JNZ   L65DAH
L65F2H:  PUSH  BX
	PUSH  DX
	MOV   BX,AX
	MOV   DX,OFFSET L56EEH
	IN    AX,DX
	XCHG  AX,BX
	MOV   DI,OFFSET L6678H
	MOV   SI,OFFSET L6696H
	CMP   AH,'T'
	JZ    L6616H
	MOV   DI,OFFSET L6696H
	MOV   SI,OFFSET L66AEH
	MOV   BL,BH
	CMP   AH,'g'
	JZ    L6616H
	POP   DX
	POP   BX
	RET
L6616H:  POP   DX
	POP   DX
	MOV   AL,BL
	MOV   BX,DX
	OR    AL,AL
	JNZ   L6621H
	RET
L6621H:  PUSH  AX
	MOV   AH,BYTE PTR CS:[DI]
	AND   AL,AH
	CMP   AH,AL
	POP   AX
	JNZ   L666AH
	MOV   BX,WORD PTR CS:[DI]+2
	ADD   BX,CX
	ADD   BX,OFFSET 11A4H
	TEST  BYTE PTR ES:[BX]+6,60H
	JZ    L6665H
	PUSH  AX
	MOV   AL,OFFSET 0B0H
	CALL  rd_1ce
	TEST   AL,18H
	JZ    L665FH
	NOT   AL
	AND   AL,18H
	MOV   AH,BYTE PTR ES:[BX]+6
	AND   AH,60H
	CMP   AH,'`'
	JZ    L665FH
	SHR   AH,1
	SHR   AH,1
	CMP   AL,AH
	JGE   L6664H
L665FH:  MOV   BX,DX
	POP   AX
	JMP   SHORT L666AH
L6664H:  POP   AX
L6665H:  MOV   SI,WORD PTR CS:[DI]+4
	RET
L666AH:  ADD   DI,6
	CMP   DI,SI
	JNZ   L6621H
	RET
L6672H:  DB    063H
	PUSH  SP
	INC   AX
	PUSH  BP
	DB    067H
	INC   AX
L6678H:  AND   BYTE PTR [SI]-128,DL
	ADD   AX,WORD PTR [BX+SI]
	ADD   BYTE PTR [BX+SI],DL
	PUSH  SP
	ADD   BYTE PTR [BP+DI],AL
	ADD   BYTE PTR [BX+SI],AL
	OR    BYTE PTR [SI]+0,DL
	ADD   AL,0
	ADD   BYTE PTR [SI],AL
	PUSH  SP
	ADD   BYTE PTR [BP+SI],0
	ADD   BYTE PTR [BX+DI],AL
	PUSH  SP
	ADD   BYTE PTR [SI],0
	ADD   BYTE PTR [BX+SI],CL
	DB    067H
	ADD   BYTE PTR [BP+SI],AL
	MOVSB                   ;Move byt, (SI)+- to (DI)+-.
	PUSH  SS
	ADD   AL,67H
	ADD   BYTE PTR [BP+SI],AL
	ADD   BYTE PTR [BX+SI],AL
	ADD   AH,BYTE PTR [BX]-128
	ADD   WORD PTR [BX+SI],AX
	ADD   BYTE PTR [BX+DI],AL
	DB    067H
	ADD   BYTE PTR [BX+SI],AL
	ADD   BYTE PTR [BX+SI],AL
;
L66AEH:  CMP   AH,10H
	JLE   L66D2H
	PUSH  AX
	MOV   AL,OFFSET 0B0H
	CALL  rd_1ce
	TEST   AL,18H
	POP   AX
	JZ    L66D2H
	PUSH  AX
	MOV   AL,OFFSET 0BAH
	CALL  rd_1ce
	TEST   AL,1
	POP   AX
	JZ    L66D2H
	MOV   DI,OFFSET table
	MOV   SI,OFFSET set_qm
	CALL  L18C8H
L66D2H:  RET
table:   DW    L0011H,L120AH,L0A40H
	DW    L805BH,L620AH,L0AC0H
;
set_qm:  MOV   CL,OFFSET 80H
	MOV   CL,OFFSET 40H
	TEST  BYTE PTR ES:[BX]+8,80H
	JNZ   set_qm1
	MOV   AX,OFFSET L02B9H
	CALL  o_1ce
	JMP   SHORT set_qm2
set_qm1: MOV   AX,OFFSET LFDB9H
	CALL  a_1ce
	JMP   SHORT set_qm2
set_qm2: MOV   AH,BYTE PTR ES:[BX]+5
	AND   AH,0C0H
	OR    AH,AH
	JNZ   set_qm3
	MOV   AL,BYTE PTR ES:[BX]+9
	AND   AL,0CH
	CMP   AL,4
	JG    set_qm3
	TEST  BYTE PTR ES:[BX]+8,0E0H
	JNZ   set_qm3
	TEST  BYTE PTR ES:[BX]+55,30H
	JNZ   set_qm3
	MOV   AH,CL
set_qm3: MOV   AL,OFFSET 0B8H
	MOV   CH,OFFSET 3FH
	CALL  ao_1ce
	TEST  BYTE PTR ES:[BX]+8,40H
	JZ    L6731H
	CALL  efbe1ce
	RET
L6731H:  MOV   AX,OFFSET L10BEH
	CALL  o_1ce
	RET
mode1a:  CALL  zeroDS
	OR    AL,AL
	JNZ   L674BH
	POP   AX
	POP   BX
	CALL  check
	MOV   AL,OFFSET 1AH
	PUSH  BX
	PUSH  AX
	JMP   iret
L674BH:  CMP   AL,1
	JNZ   L6756H
	CALL  x
	POP   AX
	MOV   AL,OFFSET 1AH
	PUSH  AX
L6756H:  JMP   iret
;
check:   MOV   AL,BYTE PTR [L048AH]
	MOV   DI,OFFSET check_a
	CMP   AL,BYTE PTR CS:[DI]
	JC    check_1
	MOV   BX,OFFSET LFFFFH
	RET
check_1: XOR   AH,AH
	SHL   AX,1
	ADD   DI,AX
	MOV   BX,WORD PTR CS:[DI]+4
	OR    BL,BL
	JZ    check_2
	OR    BH,BH
	JNZ   check_3
	RET
check_2: XCHG  BH,BL
	RET
check_3: MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	CMP   AL,'0'
	JZ    check_4
	TEST  BL,1
	JNZ   check_2
	RET
check_4: TEST  BL,1
	JZ    check_2
	RET
;
x:       MOV   DI,OFFSET check_a
	MOV   CL,BYTE PTR CS:[DI]
	XOR   AL,AL
	ADD   DI,4
x1:      CMP   BX,WORD PTR CS:[DI]
	JZ    x3
	XCHG  BH,BL
	CMP   BX,WORD PTR CS:[DI]
	JZ    x3
	ADD   DI,2
	INC   AL
	CMP   AL,CL
x2:      JLE   x1
	MOV   AL,OFFSET 0FFH
x3:      MOV   BYTE PTR [L048AH],AL
	RET
mode1b:  OR    BX,BX
	JZ    x4
	JMP   x13
x4:      PUSH  DI
	XOR   AL,AL
	MOV   CX,OFFSET plug8
	REPZ STOSB              ;Store byt in AL in (DI)+-.
	POP   DI
	MOV   BX,OFFSET L6921H
	MOV   WORD PTR ES:[DI],BX
	MOV   WORD PTR ES:[DI]+2,CS
	CALL  zeroDS
	PUSH  DI
	MOV   SI,OFFSET L0449H
	MOV   CX,OFFSET L001EH
	ADD   DI,4
	CLD                     ;Set forward direction flag.
x5:      MOV   AL,BYTE PTR [SI]
	MOV   BYTE PTR ES:[DI],AL
	INC   SI
	INC   DI
	LOOP  x5                ;Dec CX, loop if CX<>0.
	POP   DI
	MOV   AL,BYTE PTR [scrnlenq]
	INC   AL
	MOV   BYTE PTR ES:[DI]+34,AL
	MOV   AX,WORD PTR [swid_qm]
	MOV   WORD PTR ES:[DI]+35,AX
	PUSH  DI
	CALL  check
	POP   DI
	MOV   BYTE PTR ES:[DI]+37,BL
	MOV   BYTE PTR ES:[DI]+38,BH
	MOV   BL,BYTE PTR [L0449H]
	CMP   BL,13H
	JG    x7
	XOR   BH,BH
	SHL   BX,1
	MOV   AL,BYTE PTR CS:[BX]+68F9H
	XOR   AH,AH
	OR    AL,AL
	JZ    x6
	INC   AX
x6:      MOV   WORD PTR ES:[DI]+39,AX
	MOV   AL,BYTE PTR CS:[BX]+68FAH
	MOV   BYTE PTR ES:[DI]+41,AL
x7:      MOV   AX,WORD PTR [swid_qm]
	MOV   DL,BYTE PTR [scrnlenq]
	INC   DL
	MUL   DL
	MOV   DL,OFFSET 0
	CMP   AX,OFFSET 0C8H
	JLE   x8
	MOV   DL,OFFSET 1
	CMP   AX,OFFSET 015EH
	JLE   x8
	MOV   DL,OFFSET 2
	CMP   AX,OFFSET L0190H
	JLE   x8
	MOV   DL,OFFSET 3
	CMP   AX,OFFSET 01E0H
	JLE   x8
x8:      MOV   BYTE PTR ES:[DI]+42,DL
	MOV   AH,BYTE PTR [L0487H]
	MOV   AL,AH
	AND   AL,1
	MOV   CL,OFFSET 4
	SHL   AL,CL
	AND   AH,2
	SHL   AH,1
	OR    AH,AL
	XOR   AH,10H
	MOV   AL,BYTE PTR [flag489]
	AND   AL,2
	OR    AH,AL
	MOV   DX,WORD PTR [crtport]
	ADD   DL,6
	IN    AL,DX
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 30H
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	DEC   DX
	OUT   AL,DX
	AND   AL,8
	SHL   AL,1
	SHL   AL,1
	OR    AL,AH
	OR    AL,1
	MOV   BYTE PTR ES:[DI]+45,AL
	MOV   AL,OFFSET 3
	MOV   BYTE PTR ES:[DI]+49,AL
	PUSH  DS
	PUSH  ES
	MOV   DL,OFFSET 0
	LES   BX,DWORD PTR [plug10];Load ES:BX with 32b pointer.
	MOV   CX,ES
	CMP   CX,OFFSET 0C000H
	JZ    x12               ;if running from ROM?
	LDS   SI,DWORD PTR ES:[BX]+4;Load DS:SI with 32b pointer.
	MOV   CX,DS
	OR    SI,CX
	JZ    x9
	OR    DL,10H
x9:      LDS   SI,DWORD PTR ES:[BX]+12;Load DS:SI with 32b pointer.
	MOV   CX,DS
	OR    SI,CX
	JZ    x10
	OR    DL,8
x10:     LDS   SI,DWORD PTR ES:[BX]+8;Load DS:SI with 32b pointer.
	MOV   CX,DS
	OR    SI,CX
	JZ    x11
	OR    DL,4
x11:     PUSH  DX
	MOV   AL,OFFSET 3
	MOV   DX,OFFSET seqport
	CALL  r_port
	POP   DX
	MOV   AH,AL
	SHR   AH,1
	SHR   AH,1
	AND   AX,OFFSET 0303H
	CMP   AH,AL
	JZ    x12
	OR    DL,1
x12:     POP   ES
	POP   DS
	MOV   BYTE PTR ES:[DI]+50,DL
x13:     POP   AX
	MOV   AL,OFFSET 1BH
	PUSH  AX
	JMP   iret
	DB    0FH,8,0FH,8,0FH,8
	DB    0FH,8,3,1,3,1
	DB    1,1,0,8,1,1
	DB    1,1,1,1,1,1
	DB    0FH,1,0FH,8,0FH,4
	DB    0,2,0FH,2,1,1
	DB    0FH,1,0FFH,1
L6921H:  DB    0FFH,0E0H,0FH,0,0,0
	DB    0,7,2,8,0FFH,0EH
	DB    0,0,3FH,0
check_a: DB    10H,1,8,0,0,0
	DB    0,1,0,2,2,1
	DB    0,4,4,1,0,5
	DB    2,5,0,6,1,6
	DB    5,6,0,8,1,8
	DB    0,7,2,7,7,6
;
tstmode: MOV   BX,OFFSET L0007H  ;test mode change
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	TEST   AL,1
	JZ    test1             ;if color emulation
	MOV   BX,OFFSET L0008H
	MOV   DX,OFFSET crt_mono
	CALL  cqm
	OR    AL,AL
	JZ    test2
	MOV   BH,OFFSET 1
	CALL  getcrta
	CMP   DL,0D4H
	JZ    test2             ; if color
	XCHG  BH,BL
	RET
test1:   MOV   DX,OFFSET L03D4H
	CALL  cqm
	OR    AL,AL
	JZ    test2
	MOV   BH,OFFSET 2
	CALL  getcrta
	CMP   DL,0B4H           ; if mono
	JZ    test2
	XCHG  BH,BL
test2:   RET
mode1c:  AND   CL,7
	JZ    L69A2H
	OR    AL,AL
	JZ    L69A9H
	DEC   AL
	JZ    L69DAH
	DEC   AL
	JZ    L6A00H
L69A2H:  POP   AX
	XOR   AL,AL
	PUSH  AX
	JMP   iret
L69A9H:  MOV   AX,OFFSET L0020H
	TEST  CL,1
	JZ    L69B4H
	ADD   AX,OFFSET 46H
L69B4H:  TEST  CL,2
	JZ    L69BCH
	ADD   AX,OFFSET L003AH
L69BCH:  TEST  CL,4
	JZ    L69C4H
	ADD   AX,OFFSET 0303H
L69C4H:  MOV   BX,OFFSET plug8
	XOR   DX,DX
	DIV   BX
	OR    DH,DL
	JZ    L69D0H
	INC   AX
L69D0H:  XCHG  AX,BX
	POP   AX
	POP   AX
	PUSH  BX
	MOV   AL,OFFSET 1CH
	PUSH  AX
	JMP   iret
L69DAH:  MOV   DI,BX
	ADD   DI,20H
	TEST  CL,1
	JZ    L69E7H
	CALL  L6A69H
L69E7H:  TEST  CL,2
	JZ    L69EFH
	CALL  L6ADAH
L69EFH:  TEST  CL,4
	JNZ   L69F6H
	JMP   SHORT L69A2H
L69F6H:  CALL  L6B23H
L69F9H:  POP   AX
	MOV   AL,OFFSET 1CH
	PUSH  AX
	JMP   iret
L6A00H:  TEST  CL,1
	JZ    L6A08H
	CALL  L6B5AH
L6A08H:  TEST  CL,2
	JZ    L6A10H
	CALL  L6BBDH
L6A10H:  TEST  CL,4
	JZ    L6A18H
	CALL  L6C0FH
L6A18H:  JMP   SHORT L69F9H
;
L6A1AH:  MOV   AL,AH
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	STOSB                   ;Store byt in AL in (DI)+-.
	INC   AH
	DEC   DX
	LOOP  L6A1AH            ;Dec CX, loop if CX<>0.
	RET
;
L6A26H:  CALL  getisa
	MOV   BP,OFFSET L03C0H
	MOV   CX,OFFSET L0014H
	XOR   AH,AH
L6A31H:  IN    AL,DX
	XCHG  BP,DX
	MOV   AL,AH
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	STOSB                   ;Store byt in AL in (DI)+-.
	INC   AH
	DEC   DX
	OUT   AL,DX
	MOV   AL,OFFSET 20H
	OUT   AL,DX
	XCHG  BP,DX
	LOOP  L6A31H            ;Dec CX, loop if CX<>0.
	RET
;
L6A46H:  MOV   AL,BYTE PTR ES:[DI]
	MOV   BYTE PTR [SI],AL
	INC   DI
	INC   SI
	LOOP  L6A46H            ;Dec CX, loop if CX<>0.
	RET
;
L6A50H:  MOV   AH,BYTE PTR ES:[DI]
	OUT   AX,DX
	INC   DI
	INC   AL
	LOOP  L6A50H            ;Dec CX, loop if CX<>0.
	RET
;
L6A5AH:  MOV   DL,OFFSET 0C0H
L6A5CH:  MOV   AL,AH
	OUT   AL,DX
	MOV   AL,BYTE PTR ES:[DI]
	INC   DI
	INC   AH
	OUT   AL,DX
	LOOP  L6A5CH            ;Dec CX, loop if CX<>0.
	RET
;
L6A69H:  PUSH  CX
	PUSH  DI
	MOV   WORD PTR ES:[BX],DI
	MOV   SI,DI
	CALL  getcrta
	IN    AL,DX
	MOV   BYTE PTR ES:[DI]+1,AL
	MOV   WORD PTR ES:[DI]+64,DX
	ADD   DL,6
	IN    AL,DX
	MOV   DL,OFFSET 0C0H
	IN    AL,DX
	MOV   BYTE PTR ES:[DI]+3,AL
	MOV   DL,OFFSET 0CEH
	IN    AL,DX
	MOV   BYTE PTR ES:[DI]+2,AL
	MOV   DL,OFFSET 0CCH
	IN    AL,DX
	MOV   BYTE PTR ES:[DI]+9,AL
	MOV   DL,OFFSET 0CAH
	IN    AL,DX
	MOV   BYTE PTR ES:[DI]+4,AL
	MOV   DL,OFFSET 0C4H
	IN    AL,DX
	MOV   BYTE PTR ES:[DI],AL
	ADD   DI,5
	MOV   CX,OFFSET L0004H
	MOV   AH,OFFSET 1
	CALL  L6A1AH
	MOV   AL,BYTE PTR ES:[SI]
	OUT   AL,DX
	INC   DI
	CALL  getcrta
	MOV   AH,OFFSET 0
	MOV   CX,OFFSET L0019H
	CALL  L6A1AH
	MOV   AL,BYTE PTR ES:[SI]+1
	OUT   AL,DX
	CALL  L6A26H
	MOV   DL,OFFSET 0CEH
	MOV   AH,OFFSET 0
	MOV   CX,OFFSET L0009H
	CALL  L6A1AH
	MOV   AL,BYTE PTR ES:[SI]+2
	OUT   AL,DX
	POP   DI
	POP   CX
	ADD   DI,46H
	RET
;
L6ADAH:  MOV   WORD PTR ES:[BX]+2,DI
	PUSH  CX
	PUSH  DI
	CALL  zeroDS
	MOV   AL,BYTE PTR [crtflag]
	AND   AL,30H
	STOSB                   ;Store byt in AL in (DI)+-.
	MOV   SI,OFFSET L0449H
	MOV   CX,OFFSET L001EH
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	MOV   SI,OFFSET scrnlenq
	MOV   CL,OFFSET 7
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	CLI                     ;Disable interupts.
	MOV   SI,OFFSET plug10
	MOV   CL,OFFSET 4
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	MOV   SI,OFFSET L0014H
	MOV   CL,OFFSET 4
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	MOV   SI,OFFSET L0074H
	MOV   CL,OFFSET 4
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	MOV   SI,OFFSET plug2
	MOV   CL,OFFSET 4
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	MOV   SI,OFFSET plug4
	MOV   CL,OFFSET 4
	REPZ MOVSB              ;Move byt, (SI)+- to (DI)+-.
	STI                     ;Enable interupts.
	POP   DI
	POP   CX
	ADD   DI,3AH
	RET
;
L6B23H:  MOV   WORD PTR ES:[BX]+4,DI
	CALL  get_is1
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 34H
	OUT   AL,DX
	INC   DX
	IN    AL,DX
	MOV   BYTE PTR ES:[DI],AL
	MOV   DX,OFFSET L03C8H
	IN    AL,DX
	MOV   BYTE PTR ES:[DI]+1,AL
	MOV   DL,OFFSET 0C6H
	IN    AL,DX
	MOV   BYTE PTR ES:[DI]+2,AL
	ADD   DI,3
	MOV   CX,OFFSET L0300H
	INC   DX
	XOR   AL,AL
	OUT   AL,DX
	INC   DX
	INC   DX
	CLI                     ;Disable interupts.
L6B50H:  IN    AL,DX
	AND   AL,3FH
	STOSB                   ;Store byt in AL in (DI)+-.
	NOP
	NOP
	LOOP  L6B50H            ;Dec CX, loop if CX<>0.
	STI                     ;Enable interupts.
	RET
;
L6B5AH:  MOV   DI,WORD PTR ES:[BX]
	MOV   SI,DI
	ADD   DI,5
	PUSH  CX
	MOV   DX,OFFSET seqport
	MOV   AX,OFFSET L0100H
	OUT   AX,DX
	MOV   AL,OFFSET 1
	MOV   CX,OFFSET L0004H
	CALL  L6A50H
	INC   DI
	MOV   DL,OFFSET 0C2H
	MOV   AL,BYTE PTR ES:[SI]+9
	OUT   AL,DX
	MOV   DL,OFFSET 0C4H
	MOV   AX,OFFSET L0300H
	OUT   AX,DX
	MOV   AL,BYTE PTR ES:[SI]
	OUT   AL,DX
	MOV   DX,WORD PTR ES:[SI]+64
	MOV   AX,OFFSET L0011H
	OUT   AX,DX
	MOV   CL,OFFSET 19H
	XOR   AL,AL
	CALL  L6A50H
	MOV   AL,BYTE PTR ES:[SI]+1
	OUT   AL,DX
	ADD   DL,6
	MOV   AL,BYTE PTR ES:[SI]+4
	OUT   AL,DX
	IN    AL,DX
	MOV   CL,OFFSET 14H
	XOR   AH,AH
	CALL  L6A5AH
	MOV   AL,BYTE PTR ES:[SI]+3
	OUT   AL,DX
	MOV   CL,OFFSET 9
	XOR   AL,AL
	MOV   DL,OFFSET 0CEH
	CALL  L6A50H
	MOV   AL,BYTE PTR ES:[SI]+2
	OUT   AL,DX
	POP   CX
	RET
;
L6BBDH:  MOV   DI,WORD PTR ES:[BX]+2
	PUSH  ES
	PUSH  CX
	CALL  zeroDS
	MOV   AL,BYTE PTR ES:[DI]
	AND   BYTE PTR [crtflag],0CFH
	OR    BYTE PTR [crtflag],AL
	INC   DI
	MOV   SI,OFFSET L0449H
	MOV   CX,OFFSET L001EH
	CALL  L6A46H
	MOV   SI,OFFSET scrnlenq
	MOV   CL,OFFSET 7
	CALL  L6A46H
	MOV   SI,OFFSET plug10
	MOV   CL,OFFSET 4
	CALL  L6A46H
	MOV   SI,OFFSET L0014H
	MOV   CL,OFFSET 4
	CALL  L6A46H
	MOV   SI,OFFSET L0074H
	MOV   CL,OFFSET 4
	CALL  L6A46H
	MOV   SI,OFFSET plug2
	MOV   CL,OFFSET 4
	CALL  L6A46H
	MOV   SI,OFFSET plug4
	MOV   CL,OFFSET 4
	CALL  L6A46H
	POP   CX
	POP   ES
	RET
;
L6C0FH:  MOV   SI,WORD PTR ES:[BX]+4
	MOV   AL,BYTE PTR ES:[SI]+2
	MOV   DX,OFFSET L03C6H
	OUT   AL,DX
	PUSH  SI
	MOV   CX,OFFSET L0300H
	MOV   DL,OFFSET 0C8H
	ADD   SI,3
	XOR   AL,AL
	CLI                     ;Disable interupts.
	OUT   AL,DX
	INC   DX
L6C29H:  MOV   AL,BYTE PTR ES:[SI]
	OUT   AL,DX
	INC   SI
	NOP
	LOOP  L6C29H            ;Dec CX, loop if CX<>0.
	POP   SI
	MOV   AL,BYTE PTR ES:[SI]+1
	OUT   AL,DX
	CALL  get_is1
	MOV   DL,OFFSET 0C0H
	MOV   AL,OFFSET 34H
	OUT   AL,DX
	MOV   AL,BYTE PTR ES:[SI]
	OUT   AL,DX
	RET
L6C44H:  DB    0,5,11H,1CH,8,0BH
	DB    14H,28H,0EH,18H,2DH,32H
	DB    20H,24H,38H,3FH,0,5
	DB    8,0BH,0EH,11H,14H,18H
	DB    1CH,20H,24H,28H,2DH,32H
	DB    38H,3FH,7,0CH,10H,15H
	DB    1AH,18H,16H,15H,13H,1CH
	DB    25H,2FH,38H,33H,2EH,2AH
	DB    25H,27H,29H,2AH,2CH,23H
	DB    19H,10H,23H,25H,27H,2AH
	DB    2CH,2BH,2AH,29H,29H,2DH
	DB    32H,37H,3BH,39H,37H,34H
	DB    32H,33H,34H,35H,35H,31H
	DB    2CH,27H,2FH,30H,32H,33H
	DB    34H,34H,33H,33H,32H,35H
	DB    38H,3AH,3DH,3CH,3AH,39H
	DB    38H,38H,39H,39H,3AH,37H
	DB    34H,31H,3,5,7,9
	DB    0BH,0BH,0AH,9,8,0DH
	DB    11H,15H,19H,17H,15H,13H
	DB    11H,11H,12H,13H,14H,0FH
	DB    0BH,7,10H,10H,12H,13H
	DB    14H,13H,13H,13H,12H,14H
	DB    16H,18H,1AH,19H,18H,17H
	DB    16H,17H,17H,17H,18H,15H
	DB    14H,11H,15H,15H,16H,17H
	DB    17H,17H,17H,17H,16H,18H
	DB    19H,1AH,1BH,1BH,1AH,19H
	DB    19H,19H,19H,19H,1AH,18H
	DB    17H,16H,2,3,4,5
	DB    7,6,6,5,5,7
	DB    0AH,0CH,0EH,0DH,0CH,0BH
	DB    9,0AH,0AH,0BH,0BH,9
	DB    6,4,9,9,0AH,0BH
	DB    0BH,0BH,0BH,0BH,0AH,0CH
	DB    0DH,0EH,0FH,0FH,0EH,0DH
	DB    0DH,0DH,0DH,0DH,0EH,0CH
	DB    0BH,0AH,0CH,0CH,0CH,0DH
	DB    0DH,0DH,0DH,0DH,0CH,0DH
	DB    0EH,0FH,0FH,0FH,0FH,0EH
	DB    0EH,0EH,0EH,0EH,0EH,0EH
	DB    0DH,0CH,0,0,0,0
	DB    0,0,0,0
L6D44H:  DB    0,0,0,0,0,2AH
	DB    0,2AH,0,0,2AH,2AH
	DB    2AH,0,0,2AH,0,2AH
	DB    2AH,15H,0,2AH,2AH,2AH
L6D5CH:  DB    15H,15H,15H,15H,15H,3FH
	DB    15H,3FH,15H,15H,3FH,3FH
	DB    3FH,15H,15H,3FH,15H,3FH
	DB    3FH,3FH,15H,3FH,3FH,3FH
	DB    0,0,0,5,5,5
	DB    8,8,8,0BH,0BH,0BH
	DB    0EH,0EH,0EH,11H,11H,11H
	DB    14H,14H,14H,18H,18H,18H
	DB    1CH,1CH,1CH,20H,20H,20H
	DB    24H,24H,24H,28H,28H,28H
	DB    2DH,2DH,2DH,32H,32H,32H
	DB    38H,38H,38H,3FH,3FH,3FH
	DB    0,0,3FH,10H,0,3FH
	DB    1FH,0,3FH,2FH,0,3FH
	DB    3FH,0,3FH,3FH,0,2FH
	DB    3FH,0,1FH,3FH,0,10H
	DB    3FH,0,0,3FH,10H,0
	DB    3FH,1FH,0,3FH,2FH,0
	DB    3FH,3FH,0,2FH,3FH,0
	DB    1FH,3FH,0,10H,3FH,0
	DB    0,3FH,0,0,3FH,10H
	DB    0,3FH,1FH,0,3FH,2FH
	DB    0,3FH,3FH,0,2FH,3FH
	DB    0,1FH,3FH,0,10H,3FH
	DB    1FH,1FH,3FH,27H,1FH,3FH
	DB    2FH,1FH,3FH,37H,1FH,3FH
	DB    3FH,1FH,3FH,3FH,1FH,37H
	DB    3FH,1FH,2FH,3FH,1FH,27H
	DB    3FH,1FH,1FH,3FH,27H,1FH
	DB    3FH,2FH,1FH,3FH,37H,1FH
	DB    3FH,3FH,1FH,37H,3FH,1FH
	DB    2FH,3FH,1FH,27H,3FH,1FH
	DB    1FH,3FH,1FH,1FH,3FH,27H
	DB    1FH,3FH,2FH,1FH,3FH,37H
	DB    1FH,3FH,3FH,1FH,37H,3FH
	DB    1FH,2FH,3FH,1FH,27H,3FH
	DB    2DH,2DH,3FH,31H,2DH,3FH
	DB    36H,2DH,3FH,3AH,2DH,3FH
	DB    3FH,2DH,3FH,3FH,2DH,3AH
	DB    3FH,2DH,36H,3FH,2DH,31H
	DB    3FH,2DH,2DH,3FH,31H,2DH
	DB    3FH,36H,2DH,3FH,3AH,2DH
	DB    3FH,3FH,2DH,3AH,3FH,2DH
	DB    36H,3FH,2DH,31H,3FH,2DH
	DB    2DH,3FH,2DH,2DH,3FH,31H
	DB    2DH,3FH,36H,2DH,3FH,3AH
	DB    2DH,3FH,3FH,2DH,3AH
;
L6E75H:  DB    3FH,2DH,36H,3FH,2DH,31H
	DB    3FH,0,0,1CH,7,0
	DB    1CH,0EH,0,1CH,15H,0
	DB    1CH,1CH,0,1CH,1CH,0
	DB    15H,1CH,0,0EH,1CH,0
	DB    7,1CH,0,0,1CH,7
	DB    0,1CH,0EH,0,1CH,15H
	DB    0,1CH,1CH,0,15H,1CH
	DB    0,0EH,1CH,0,7,1CH
	DB    0,0,1CH,0,0,1CH
	DB    7,0,1CH,0EH,0,1CH
	DB    15H,0,1CH
;
L6EBAH:  DB    1CH,0,15H,1CH,0,0EH
	DB    1CH,0,7,1CH,0EH,0EH
	DB    1CH,11H,0EH,1CH,15H,0EH
	DB    1CH,18H,0EH,1CH,1CH,0EH
	DB    1CH,1CH,0EH,18H,1CH,0EH
	DB    15H,1CH,0EH,11H,1CH,0EH
	DB    0EH,1CH,11H,0EH,1CH,15H
	DB    0EH,1CH,18H,0EH,1CH,1CH
	DB    0EH,18H,1CH,0EH,15H,1CH
	DB    0EH,11H,1CH,0EH,0EH,1CH
	DB    0EH,0EH,1CH,11H,0EH,1CH
	DB    15H,0EH,1CH,18H,0EH,1CH
	DB    1CH,0EH,18H,1CH,0EH
	DB    15H,1CH,0EH,11H,1CH,14H
	DB    14H,1CH,16H,14H,1CH,18H
	DB    14H,1CH,1AH,14H,1CH,1CH
	DB    14H,1CH,1CH,14H,1AH,1CH
	DB    14H,18H,1CH,14H,16H,1CH
	DB    14H,14H,1CH,16H,14H,1CH
	DB    18H,14H,1CH,1AH,14H,1CH
	DB    1CH,14H,1AH,1CH,14H,18H
	DB    1CH,14H,16H,1CH,14H,14H
	DB    1CH,14H,14H,1CH,16H,14H
	DB    1CH,18H,14H,1CH,1AH,14H
	DB    1CH,1CH,14H,1AH,1CH,14H
	DB    18H,1CH,14H,16H,1CH,0
	DB    0,10H,4,0,10H,8
	DB    0,10H,0CH,0,10H,10H
	DB    0,10H,10H,0,0CH,10H
	DB    0,8,10H,0,4,10H
	DB    0,0,10H,4,0,10H
	DB    8,0,10H,0CH,0,10H
	DB    10H,0,0CH,10H,0,8
	DB    10H,0,4,10H,0,0
	DB    10H,0,0,10H,4,0
	DB    10H,8,0,10H,0CH,0
	DB    10H,10H,0,0CH,10H,0
	DB    8,10H,0,4,10H,8
	DB    8,10H,0AH,8,10H,0CH
	DB    8,10H,0EH,8,10H,10H
	DB    8,10H,10H,8,0EH,10H
	DB    8,0CH,10H,8,0AH,10H
	DB    8,8,10H,0AH,8,10H
	DB    0CH,8,10H,0EH,8,10H
	DB    10H,8,0EH,10H,8,0CH
	DB    10H,8,0AH,10H,8,8
	DB    10H,8,8,10H,0AH,8
	DB    10H,0CH,8,10H,0EH,8
	DB    10H,10H,8,0EH,10H,8
	DB    0CH,10H,8,0AH,10H,0BH
	DB    0BH,10H,0CH,0BH,10H,0DH
	DB    0BH,10H,0FH,0BH,10H,10H
	DB    0BH,10H,10H,0BH,0FH,10H
	DB    0BH,0DH,10H,0BH,0CH,10H
	DB    0BH,0BH,10H,0CH,0BH,10H
	DB    0DH,0BH,10H,0FH,0BH,10H
	DB    10H,0BH,0FH,10H,0BH,0DH
	DB    10H,0BH,0CH,10H,0BH,0BH
	DB    10H,0BH,0BH,10H,0CH,0BH
	DB    10H,0DH,0BH,10H,0FH,0BH
	DB    10H,10H,0BH,0FH,10H,0BH
	DB    0DH,10H,0BH,0CH,10H,0
	DB    0,0,0,0,0,0
	DB    0,0,0,0,0,0
	DB    0,0,0,0,0,0
	DB    0,0,0,0,0
;
initdis: MOV   DX,OFFSET svgaport;initialize display adaptor
	MOV   AL,OFFSET 16H
	OUT   AL,DX             ;magic=16
	MOV   DX,OFFSET L0102H
	MOV   AL,OFFSET 1
	OUT   AL,DX             ;102=1 (!?)
	MOV   DX,OFFSET svgaport
	MOV   AL,OFFSET 0EH
	OUT   AL,DX             ;magic = 0e
	MOV   DX,OFFSET L4AE8H
	XOR   AX,AX
	OUT   AX,DX             ;magic = 0000
	MOV   DX,OFFSET L03CEH
	MOV   AX,OFFSET LCE50H  ;graphics 50 = ce
	OUT   AX,DX
	MOV   AX,OFFSET LB151H  ;graphics 51 = 15
	OUT   AX,DX
	MOV   AL,OFFSET 4
	MOV   DL,OFFSET 0C2H
	OUT   AL,DX             ;clock = reserved vga
	MOV   DL,OFFSET 0DAH
	IN    AL,DX             ;input status register
	MOV   DL,OFFSET 0BAH
	IN    AL,DX             ;input status reg (mono)
	MOV   DL,OFFSET 0C0H
	XOR   AL,AL
	OUT   AL,DX             ;attribute controller..reset?
	MOV   DL,OFFSET 0C4H    ;sequencer register
	MOV   AX,OFFSET seqdata ;= fc 02
	OUT   AX,DX
	CALL  zeroDS
	CLI                     ;Disable interupts.
	MOV   AX,OFFSET LF065H  ;f000:f065
	MOV   WORD PTR [strange1],AX;plug instructions?!
	MOV   AX,OFFSET LF000H
	MOV   WORD PTR [plug1],AX
	MOV   WORD PTR [plug2],OFFSET L3BECH
	MOV   WORD PTR [plug3],CS
	MOV   WORD PTR [plug4],OFFSET L3FECH
	MOV   WORD PTR [plug5],CS
	MOV   WORD PTR [plug6],OFFSET intr
	MOV   WORD PTR [plug7],CS
	MOV   WORD PTR [plug8],OFFSET intr
	MOV   WORD PTR [ati_card],CS
	MOV   WORD PTR [plug10],OFFSET data1
	MOV   WORD PTR [plug11],CS
	RET
;
setvmod: PUSH  AX                ;al=graph/text bit
	MOV   AH,AL
	MOV   DX,OFFSET miscoutr
	IN    AL,DX
	AND   AL,0FEH
	OR    AL,AH
	MOV   DL,OFFSET 0C2H
	OUT   AL,DX
	POP   AX
	RET
;
setgraf: MOV   AL,OFFSET 1       ;set graphics mode
	CALL  setvmod
	MOV   DL,OFFSET 0B4H
	CALL  cqm
	RET
;
settext: XOR   AL,AL
	CALL  setvmod
	MOV   DL,OFFSET 0D4H
	CALL  cqm
	RET
	PUSH  DX
	MOV   DX,WORD PTR [crtport]
	ADD   DX,6
	MOV   CX,OFFSET L7FFFH
L70F1H:  IN    AL,DX
	TEST   AL,1
	JNZ   L70F8H
	LOOP  L70F1H            ;Dec CX, loop if CX<>0.
L70F8H:  IN    AL,DX
	TEST   AL,1
	JZ    L70FFH
	LOOP  L70F8H            ;Dec CX, loop if CX<>0.
L70FFH:  POP   DX
	RET
	CALL  L710BH
	DB    0CBH              ;*** FAR RETURN ***
	CALL  L714CH
	DB    0CBH              ;*** FAR RETURN ***
	STC                     ;Set the carry flag.
	DB    0CBH              ;*** FAR RETURN ***
;
L710BH:  CLD                     ;Set forward direction flag.
	PUSH  DS
	PUSH  ES
	PUSH  DI
	PUSH  SI
	PUSH  BP
	PUSH  DX
	PUSH  CX
	PUSH  BX
	PUSH  AX
	OR    AL,AL
	JNZ   L7127H
	MOV   AX,OFFSET L1201H
	CALL  L73E0H
	MOV   AX,OFFSET L5502H
L7122H:  CALL  L73E0H
	JMP   SHORT L7142H
L7127H:  CMP   AL,2
	JA    L712FH
	MOV   AH,OFFSET 6AH
	JMP   SHORT L7122H
L712FH:  CMP   AL,11H
	JNZ   L7138H
	MOV   AX,OFFSET L6801H
	JMP   SHORT L7122H
L7138H:  CMP   AL,12H
	JNZ   L7141H
	MOV   AX,OFFSET L6802H
	JMP   SHORT L7122H
L7141H:  STC                     ;Set the carry flag.
L7142H:  POP   AX
	POP   BX
	POP   CX
	POP   DX
	POP   BP
	POP   SI
	POP   DI
	POP   ES
	POP   DS
	RET
;
L714CH:  PUSH  AX
	PUSH  DX
	PUSH  CX
	OR    AL,AL
	JNZ   L719FH
	MOV   CX,OFFSET L0002H
L7156H:  MOV   DX,OFFSET L22E8H
	MOV   AX,OFFSET L0060H
	OUT   AX,DX
	MOV   AX,CX
	MOV   DX,OFFSET L4AE8H
	OUT   AX,DX
	MOV   CH,CL
	MOV   DX,OFFSET L42E8H
	IN    AL,DX
	MOV   CL,OFFSET 4
	SHR   AL,CL
	AND   AL,7
	OR    AL,8
	MOV   CL,AL
	TEST  CH,1
	JZ    L718DH
	MOV   DX,OFFSET LB2EEH
	IN    AL,DX
	CMP   AL,9FH
	JNZ   L718DH
	OR    CL,10H
	MOV   DX,OFFSET L26EEH
	MOV   AL,OFFSET 0A0H
	OUT   AL,DX
	MOV   DX,OFFSET L76EEH
	OUT   AL,DX
L718DH:  MOV   DX,OFFSET L7AEEH
	MOV   AL,CL
	OUT   AL,DX
	MOV   DX,OFFSET L22E8H
	MOV   AX,OFFSET L0020H
	OUT   AX,DX
	CLC                     ;Clear the carry flag.
L719BH:  POP   CX
	POP   DX
	POP   AX
	RET
L719FH:  MOV   CX,OFFSET start
	DEC   AL
	JZ    L7156H
	MOV   CX,OFFSET L0007H
	DEC   AL
	JZ    L7156H
	STC                     ;Set the carry flag.
	JMP   SHORT L719BH
;
L71B0H:  PUSH  AX
	CALL  L754FH
	POP   CX
	OR    AL,AL
	JNZ   L71BFH
	CMP   BX,DX
	JNZ   L71C0H
	XOR   BP,BP
L71BFH:  RET
L71C0H:  MOV   DI,BX
	PUSH  ES
	POP   DS
	MOV   AL,BYTE PTR [DI]+9
	MOV   BYTE PTR [BP]+0,AL
	MOV   AL,BYTE PTR [DI]+10
	MOV   BYTE PTR [BP]+2,AL
	MOV   AL,BYTE PTR [DI]+14
	MOV   BYTE PTR [BP]+4,AL
	MOV   AL,BYTE PTR [DI]+15
	MOV   BYTE PTR [BP]+6,AL
	MOV   AL,BYTE PTR [DI]+16
	MOV   BYTE PTR [BP]+8,AL
	MOV   AL,BYTE PTR [DI]+17
	MOV   BYTE PTR [BP]+10,AL
	MOV   AL,BYTE PTR [DI]+26
	MOV   BYTE PTR [BP]+12,AL
	MOV   AL,BYTE PTR [DI]+27
	MOV   BYTE PTR [BP]+14,AL
	MOV   WORD PTR [BP]+22,OFFSET chksum
	MOV   DI,SI
	OR    DI,DI
	JZ    L7256H
L71FFH:  MOV   AX,WORD PTR [DI]
	AND   AL,3FH
	CMP   AL,'?'
	JZ    L7249H
	CMP   AL,0
	JNZ   L7210H
	MOV   BYTE PTR [BP]+2,AH
	JMP   SHORT L7244H
L7210H:  CMP   AL,4
	JNZ   L7219H
	MOV   BYTE PTR [BP]+4,AH
	JMP   SHORT L7244H
L7219H:  CMP   AL,5
	JNZ   L7222H
	MOV   BYTE PTR [BP]+6,AH
	JMP   SHORT L7244H
L7222H:  CMP   AL,6
	JNZ   L722BH
	MOV   BYTE PTR [BP]+8,AH
	JMP   SHORT L7244H
L722BH:  CMP   AL,7
	JNZ   L7234H
	MOV   BYTE PTR [BP]+10,AH
	JMP   SHORT L7244H
L7234H:  CMP   AL,10H
	JNZ   L723DH
	MOV   BYTE PTR [BP]+12,AH
	JMP   SHORT L7244H
L723DH:  CMP   AL,11H
	JNZ   L7244H
	MOV   BYTE PTR [BP]+14,AH
L7244H:  ADD   DI,2
	JMP   SHORT L71FFH
L7249H:  MOV   AH,BYTE PTR [BX]+9
	MOV   AL,BYTE PTR [DI]
	AND   AX,OFFSET 3FC0H
	OR    AH,AL
	MOV   BYTE PTR [BP]+0,AH
L7256H:  CALL  L7438H
	MOV   AH,BYTE PTR ES:[BX]+5
	AND   AH,0C0H
	MOV   AL,BYTE PTR ES:[BX]+9
	AND   AL,0CH
	OR    AL,40H
	OR    AL,10H
	MOV   CH,BYTE PTR ES:[BX]+8
	TEST  CH,40H
	JZ    L7279H
	OR    AL,20H
	AND   AL,3FH
	OR    AL,AH
L7279H:  TEST  CH,80H
	JZ    L7284H
	XOR   AL,10H
	AND   AL,3FH
	OR    AL,AH
L7284H:  TEST  CH,20H
	JZ    L728BH
	AND   AL,3FH
L728BH:  TEST  BYTE PTR ES:[BX]+55,30H
	JZ    L7294H
	AND   AL,3FH
L7294H:  MOV   AH,OFFSET 1EH
	MOV   WORD PTR [BP]+18,AX
	MOV   AL,OFFSET 23H
	TEST  BYTE PTR ES:[BX]+7,40H
	JZ    L72A8H
	MOV   BYTE PTR [BP]+19,OFFSET 18H
	OR    AL,10H
L72A8H:  MOV   BYTE PTR [BP]+16,AL
	MOV   WORD PTR [BP]+20,OFFSET chksum
	CMP   BYTE PTR ES:[BX],'P'
	JNZ   L72CCH
	MOV   BYTE PTR [BP]+19,OFFSET 18H
	MOV   DX,OFFSET L42E8H
	IN    AL,DX
	TEST   AL,80H
	JNZ   L72CAH
	OR    BYTE PTR [BP]+22,40H
	AND   BYTE PTR [BP]+16,0F9H
L72CAH:  JMP   SHORT L72D6H
L72CCH:  CMP   BYTE PTR ES:[BX],80H
	JNZ   L72D6H
	OR    BYTE PTR [BP]+22,80H
L72D6H:  CALL  L731EH
	RET
;
L72DAH:  PUSH  DX
	TEST  BYTE PTR ES:[BX]+33,4
	JZ    L72E4H
	SHL   AX,1
L72E4H:  MOV   DL,OFFSET 0FFH
	TEST  BYTE PTR [BP]+22,40H
	JZ    L72F0H
	SHL   AX,1
	MOV   DL,OFFSET 0FDH
L72F0H:  SUB   AX,DI
	AND   AL,DL
	MOV   DX,AX
	AND   DX,0FCH
	SHL   DX,1
	AND   AX,OFFSET start
	OR    AX,DX
	AND   DH,1
	SHL   DH,1
	SHL   DH,1
	OR    AL,DH
	POP   DX
	RET
;
L730BH:  MOV   DL,AH
	SHR   DL,1
	SHR   DL,1
	SHR   DL,1
	SHR   DL,1
	AND   DL,2
	AND   AH,1
	OR    AH,DL
	RET
;
L731EH:  MOV   CH,BYTE PTR [BP]+0
	XOR   CL,CL
	TEST  BYTE PTR [BP]+22,80H
	JZ    L732BH
	MOV   CL,OFFSET 1
L732BH:  MOV   AX,WORD PTR [BP]+2
	ADD   AX,OFFSET L0005H
	SHL   AX,CL
	DEC   AX
	MOV   WORD PTR [BP]+0,AX
	MOV   AL,BYTE PTR ES:[BX]+11
	XOR   AH,AH
	INC   AX
	SHL   AX,CL
	DEC   AX
	MOV   WORD PTR [BP]+2,AX
	MOV   DX,WORD PTR [BP]+4
	MOV   AX,DX
	SUB   AX,OFFSET L0002H
	SHL   AX,CL
	ADD   AL,CL
	MOV   WORD PTR [BP]+4,AX
	MOV   AH,DL
	MOV   AL,BYTE PTR [BP]+6
	AND   AX,OFFSET 1F1FH
	SUB   AL,AH
	AND   AL,1FH
	SHL   AL,CL
	MOV   CL,CH
	AND   CL,40H
	SHR   CL,1
	OR    AL,CL
	XOR   AH,AH
	MOV   WORD PTR [BP]+6,AX
	MOV   DH,BYTE PTR [BP]+10
	MOV   AL,BYTE PTR [BP]+8
	MOV   AH,DH
	CALL  L730BH
	ADD   AX,OFFSET L0002H
	XOR   DI,DI
	CALL  L72DAH
	TEST  BYTE PTR [BP]+16,6
	JNZ   L738BH
	AND   AX,OFFSET 0FFFDH
L738BH:  DEC   AX
	MOV   WORD PTR [BP]+8,AX
	MOV   AL,BYTE PTR ES:[BX]+28
	MOV   AH,DH
	SHR   AH,1
	CALL  L730BH
	INC   AX
	MOV   DI,OFFSET L0001H
	CALL  L72DAH
	MOV   WORD PTR [BP]+10,AX
	MOV   AL,BYTE PTR [BP]+12
	MOV   AH,DH
	SHR   AH,1
	SHR   AH,1
	MOV   DH,AL
	CALL  L730BH
	INC   AX
	MOV   DI,OFFSET L0001H
	CALL  L72DAH
	MOV   WORD PTR [BP]+12,AX
	MOV   AL,BYTE PTR [BP]+14
	MOV   DL,DH
	AND   DL,0FH
	SUB   AL,DL
	TEST  BYTE PTR ES:[BX]+33,4
	JZ    L73CFH
	SHL   AL,1
L73CFH:  AND   AL,0FH
	AND   CH,80H
	SHR   CH,1
	SHR   CH,1
	OR    AL,CH
	XOR   AH,AH
	MOV   WORD PTR [BP]+14,AX
	RET
;
L73E0H:  SUB   SP,1AH
	MOV   BP,SP
	PUSH  AX
	CALL  L71B0H
	POP   AX
	OR    BP,BP
	STC                     ;Set the carry flag.
	JZ    L7434H
	PUSH  SS
	POP   DS
	PUSH  BP
	POP   SI
	MOV   DX,OFFSET L5AEEH
	XOR   AH,AH
	OUT   AX,DX
	MOV   DX,OFFSET L46EEH
	XOR   AX,AX
	OUT   AX,DX
	MOV   CX,OFFSET L0004H
	MOV   DX,OFFSET L02E8H
L7405H:  LODSW                   ;Load AX with wrd at (SI)+-.
	OUT   AL,DX
	ADD   DH,4
	LOOP  L7405H            ;Dec CX, loop if CX<>0.
	MOV   CL,OFFSET 3
L740EH:  LODSW                   ;Load AX with wrd at (SI)+-.
	OUT   AX,DX
	ADD   DH,4
	LOOP  L740EH            ;Dec CX, loop if CX<>0.
	LODSW                   ;Load AX with wrd at (SI)+-.
	OUT   AL,DX
	LODSW                   ;Load AX with wrd at (SI)+-.
	MOV   DX,OFFSET L22E8H
	OUT   AL,DX
	LODSW                   ;Load AX with wrd at (SI)+-.
	MOV   DX,OFFSET L4AEEH
	OUT   AX,DX
	LODSW                   ;Load AX with wrd at (SI)+-.
	MOV   AX,OFFSET L003FH
	MOV   DX,OFFSET L46EEH
	OUT   AX,DX
	MOV   DX,OFFSET L5AEEH
	XOR   AX,AX
	OUT   AX,DX
	MOV   DX,OFFSET L46EEH
	OUT   AX,DX
	CLC                     ;Clear the carry flag.
L7434H:  ADD   SP,1AH
	RET
;
L7438H:  PUSH  BX
	MOV   CL,OFFSET 0DH
	JMP   SHORT L7445H
L743DH:  ADD   CL,0BH
	CMP   CL,'9'
	JGE   L7465H
L7445H:  MOV   BL,OFFSET 1
	ADD   BL,CL
	CALL  strobes
	CMP   CH,BH
	JZ    L7467H
	CMP   CH,BL
	JZ    L7467H
	MOV   BL,OFFSET 2
	ADD   BL,CL
	CALL  strobes
	CMP   CH,BH
	JZ    L7467H
	CMP   CH,BL
	JZ    L7467H
	JMP   SHORT L743DH
L7465H:  POP   BX
	RET
L7467H:  MOV   BL,OFFSET 0
	ADD   BL,CL
	CALL  strobes
	TEST  BH,1
	JNZ   L743DH
	TEST  BL,40H
	JZ    L74B0H
	MOV   BL,OFFSET 3
	ADD   BL,CL
	CALL  strobes
	MOV   BYTE PTR [BP]+2,AH
	MOV   BYTE PTR [BP]+8,AL
	MOV   BL,OFFSET 4
	ADD   BL,CL
	CALL  strobes
	MOV   BYTE PTR [BP]+4,AH
	MOV   BYTE PTR [BP]+6,AL
	MOV   BL,OFFSET 5
	ADD   BL,CL
	CALL  strobes
	MOV   BYTE PTR [BP]+12,AH
	MOV   BYTE PTR [BP]+14,AL
	MOV   BL,OFFSET 8
	ADD   BL,CL
	CALL  strobes
	MOV   BYTE PTR [BP]+10,AH
	MOV   BL,OFFSET 0
	ADD   BL,CL
	CALL  strobes
L74B0H:  AND   BH,0C0H
	MOV   AL,BYTE PTR [BP]+0
	AND   AL,3FH
	OR    AL,BH
	MOV   BYTE PTR [BP]+0,AL
	JMP   SHORT L7465H
;
L74BFH:  PUSH  BX
	MOV   CH,AH
	MOV   CL,OFFSET 0DH
	JMP   SHORT L74CEH
L74C6H:  ADD   CL,0BH
	CMP   CL,'9'
	JGE   L74FAH
L74CEH:  MOV   BL,OFFSET 0
	ADD   BL,CL
	CALL  strobes
	TEST  BH,1
	JZ    L74C6H
	MOV   BL,OFFSET 1
	ADD   BL,CL
	CALL  strobes
	CMP   CH,BH
	JZ    L74FEH
	CMP   CH,BL
	JZ    L74FEH
	MOV   BL,OFFSET 2
	ADD   BL,CL
	CALL  strobes
	CMP   CH,BH
	JZ    L74FEH
	CMP   CH,BL
	JZ    L74FEH
	JMP   SHORT L74C6H
L74FAH:  XOR   BP,BP
L74FCH:  POP   BX
	RET
L74FEH:  MOV   BL,OFFSET 3
	ADD   BL,CL
L7502H:  CALL  strobes
	MOV   BYTE PTR [BP]+0,AH
	MOV   BYTE PTR [BP]+2,AL
	MOV   BL,OFFSET 4
	ADD   BL,CL
	CALL  strobes
	MOV   BYTE PTR [BP]+4,AH
	MOV   BYTE PTR [BP]+6,AL
	MOV   BL,OFFSET 5
	ADD   BL,CL
	CALL  strobes
	MOV   WORD PTR [BP]+8,AX
	MOV   BL,OFFSET 6
	ADD   BL,CL
	CALL  strobes
	MOV   WORD PTR [BP]+10,AX
	MOV   BL,OFFSET 7
	ADD   BL,CL
	CALL  strobes
	MOV   WORD PTR [BP]+12,AX
	MOV   BL,OFFSET 8
	ADD   BL,CL
	CALL  strobes
	MOV   BYTE PTR [BP]+14,AH
	MOV   BYTE PTR [BP]+16,AL
	MOV   BL,OFFSET 9
	ADD   BL,CL
	CALL  strobes
	MOV   WORD PTR [BP]+18,AX
	JMP   SHORT L74FCH
;
L754FH:  PUSH  CS
	POP   ES
	MOV   BX,OFFSET modeinfo
	MOV   DX,BX
	CMP   AH,12H
	JNZ   L7585H
	MOV   AL,OFFSET 0BAH
	CALL  rd_1ce
	TEST   AL,2
	JZ    L7570H
	PUSH  BP
	CALL  L74BFH
	OR    BP,BP
	POP   BP
	JZ    L7570H
	MOV   AL,OFFSET 1
	RET
L7570H:  MOV   AL,OFFSET 0BAH
	CALL  rd_1ce
	ADD   BX,OFFSET 06C0H
	TEST   AL,1
	JZ    L7580H
	MOV   BX,OFFSET L1264H
L7580H:  XOR   SI,SI
	XOR   AL,AL
	RET
L7585H:  CMP   AH,'h'
	JNZ   L7598H
	PUSH  AX
	MOV   BL,OFFSET 0AH
	CALL  strobes
	POP   AX
	TEST  BL,80H
	JZ    L75D6H
	JMP   SHORT L75EFH
L7598H:  PUSH  AX
	PUSH  DX
	MOV   DX,OFFSET L56EEH
	IN    AX,DX
	MOV   BX,AX
	OR    BH,1
	POP   DX
	POP   AX
	CMP   AH,'j'
	JNZ   L75DBH
	TEST  BL,80H
	JNZ   L75EFH
	MOV   DI,OFFSET L6678H
	MOV   SI,OFFSET L6696H
L75B5H:  MOV   AL,BYTE PTR CS:[DI]
	MOV   AH,BL
	AND   AH,AL
	CMP   AH,AL
	JNZ   L75CFH
	MOV   BX,WORD PTR CS:[DI]+2
	ADD   BX,OFFSET 11A4H
	MOV   SI,WORD PTR CS:[DI]+4
	XOR   AL,AL
	RET
L75CFH:  ADD   DI,6
	CMP   DI,SI
	JNZ   L75B5H
L75D6H:  MOV   BX,DX
	XOR   AL,AL
	RET
L75DBH:  CMP   AH,'U'
	JNZ   L75D6H
	MOV   BL,BH
	TEST  BL,80H
	JNZ   L75EFH
	MOV   DI,OFFSET L6696H
	MOV   SI,OFFSET L66AEH
	JMP   SHORT L75B5H
L75EFH:  CALL  L74BFH
	MOV   AL,OFFSET 1
	RET
;
way:     MOV   AX,CS
	MOV   DS,AX
	MOV   AX,OFFSET plug8
	MOV   ES,AX
	CMP   WORD PTR ES:[L0072H],OFFSET 1234H
	JZ    way1
	MOV   SI,OFFSET waya
	CALL  io
way1:    CALL  obsc
	CALL  L7FA4H
	MOV   SI,OFFSET L7A7FH
	CALL  w9aee
	JNC   way2
	MOV   BX,OFFSET L0100H
	JMP   SHORT way3
	NOP
way2:    XOR   BX,BX
	XOR   AL,AL
	CALL  L710BH
	CMP   WORD PTR ES:[L0072H],OFFSET 4321H
	JZ    way5
	MOV   SI,OFFSET L7C91H
	CALL  io
	CALL  L7A39H
	MOV   SI,OFFSET L7A90H
	CALL  w9aee
	JC    way3
	MOV   SI,OFFSET L7C91H
	CALL  io
	JC    way3
	CALL  L7971H
	MOV   SI,OFFSET L7C91H
	CALL  io
	JC    way3
	TEST  BX,L0100H
	JNZ   way3
	CMP   WORD PTR ES:[L0072H],OFFSET 1234H
	JZ    way3
	MOV   SI,OFFSET L7C91H
	CALL  io
	JC    way3
	CALL  cal
way3:    TEST  BX,L1FFFH
	JZ    way4
	MOV   AX,BX
	CALL  L7F05H
	JMP   SHORT way5
way4:    CMP   WORD PTR ES:[L0072H],OFFSET 1234H
	JZ    way5
	MOV   SI,OFFSET L7C96H
	CALL  io
way5:    CALL  faro
	MOV   AX,OFFSET chksum
	MOV   DX,OFFSET L52EEH
way6:    OUT   AX,DX
	XOR   AL,AL
	CALL  L710BH
	MOV   BL,OFFSET 5
	CALL  strobes
	AND   AL,0FH
	MOV   DX,OFFSET L7AEEH
	XOR   AH,AH
	OUT   AX,DX
	RET
waya:    DB    54H,65H,73H,74H,69H,6EH
	DB    67H,0
;
obsc:    MOV   DX,OFFSET L32EEH
	XOR   AX,AX
	OUT   AX,DX
	MOV   DX,OFFSET L42E8H
	MOV   AX,OFFSET L900FH
	OUT   AX,DX
	MOV   AX,OFFSET L400FH
	OUT   AX,DX
	RET
;
faro:    MOV   DX,OFFSET L4AE8H
	MOV   AX,OFFSET L0002H
	OUT   AX,DX
	MOV   DX,OFFSET L02EAH
	MOV   AL,OFFSET 0FFH
	OUT   AL,DX
	RET
;
dist:    PUSH  AX
	PUSH  CX
	PUSH  DX
	XOR   CX,CX
	MOV   DX,OFFSET L9AE8H
dist1:   IN    AX,DX
	TEST   AX,L0100H
	JNZ   dist3
	LOOP  dist1             ;Dec CX, loop if CX<>0.
	STC                     ;Set the carry flag.
dist2:   POP   DX
	POP   CX
	POP   AX
	RET
dist3:   CLC                     ;Clear the carry flag.
	JMP   SHORT dist2
;
wait9a:  PUSH  AX
	PUSH  CX
	PUSH  DX
	XOR   CX,CX
	MOV   DX,OFFSET L9AE8H
wait9a_1:IN    AX,DX
	TEST   AX,L0200H
	JZ    urp3
	LOOP  wait9a_1          ;Dec CX, loop if CX<>0.
	STC                     ;Set the carry flag.
wait9a_2:POP   DX
	POP   CX
	POP   AX
	RET
urp3:    CLC                     ;Clear the carry flag.
	JMP   SHORT wait9a_2
;
foop:    MOV   SI,OFFSET L7B2AH
	CALL  w9aee
	MOV   SI,OFFSET L7B09H
	CALL  w9aee
	MOV   SI,OFFSET L7B2FH
	CALL  w9aee
	RET
;
bits:    PUSH  DX
	XOR   DX,DX
	TEST   AX,start3
	JZ    bits1
	OR    DL,80H
bits1:   TEST   AX,0FH
	JZ    bits2
	OR    DL,40H
bits2:   TEST   AX,LF000H
	JZ    bits3
	OR    DL,20H
bits3:   TEST   AX,0F00H
	JZ    bits4
	OR    DL,10H
bits4:   TEST  CX,L0001H
	JNZ   bits5
L773CH:  SHR   DL,1
	SHR   DL,1
	SHR   DL,1
	SHR   DL,1
bits5:   OR    BL,DL
	POP   DX
	RET
;
gum:     PUSH  DX
	CALL  wait9a
	MOV   DX,OFFSET LA6E8H
	OUT   AX,DX
	MOV   SI,OFFSET L7B09H
	CALL  w9aee
	POP   DX
	JC    gumx
	MOV   AX,DX
	MOV   DX,OFFSET LBAE8H
	OUT   AX,DX
	CALL  L78F5H
	CALL  dist
	JC    wir
	MOV   DX,OFFSET LE2E8H
	MOV   CX,OFFSET L0008H
gum1:    PUSH  CX
	MOV   CX,OFFSET L0004H
gum2:    IN    AX,DX
	XOR   AX,DI
	JZ    gum3
	CALL  bits
gum3:    LOOP  gum2              ;Dec CX, loop if CX<>0.
	POP   CX
	LOOP  gum1              ;Dec CX, loop if CX<>0.
	CALL  chke8
	MOV   DX,OFFSET L9AE8H
	IN    AX,DX
	TEST   AX,L0300H
	JNZ   wir
	MOV   DX,OFFSET L42E8H
	IN    AX,DX
	TEST   AX,L0004H
	JNZ   wir
	MOV   SI,OFFSET L7C91H
	CALL  io
gumx:    RET
wir:     MOV   DX,OFFSET L0004H
	MOV   SI,OFFSET L7C70H
	CALL  err1
	OR    BX,OFFSET L0100H
	STC                     ;Set the carry flag.
	RET
;
oof:     IN    AX,DX
	XOR   AX,SI
	JZ    oof1
	PUSH  CX
	XOR   CX,CX
	CALL  bits
L77B4H:  POP   CX
oof1:    IN    AX,DX
	XOR   AX,SI
	JZ    oof2
	PUSH  CX
	OR    CX,1
	CALL  bits
	POP   CX
oof2:    IN    AX,DX
	CMP   AX,OFFSET chksum
	JZ    oof3
	CALL  bits
oof3:    LOOP  oof2              ;Dec CX, loop if CX<>0.
	RET
;
terp:    CALL  foop
	MOV   SI,OFFSET L78B4H
	CALL  w9aee
	JC    terp3
	MOV   DX,OFFSET LBAE8H
	MOV   AX,OFFSET L0073H
	OUT   AX,DX
	CALL  L78F5H
	CALL  dist
	JC    wir
	MOV   DX,OFFSET LE2E8H
	MOV   SI,OFFSET LAAAAH
	MOV   CX,OFFSET L0006H
	CALL  oof
	JC    terp4
	MOV   SI,OFFSET LA5A5H
	MOV   CX,OFFSET L000CH
	CALL  oof
	JC    terp4
	MOV   SI,OFFSET L5555H
	MOV   CX,OFFSET L0006H
	CALL  oof
	IN    AX,DX
	XOR   AX,OFFSET LFFFFH
	JZ    terp1
	XOR   CL,CL
	CALL  bits
terp1:   IN    AX,DX
	XOR   AX,OFFSET LFFFFH
	JZ    terp2
	OR    CL,1
	CALL  bits
terp2:   CALL  chke8
	TEST  BX,L00FFH
	JZ    terp3
	MOV   DX,OFFSET L0007H
	MOV   SI,OFFSET L7C61H
	CALL  err1
terp3:   RET
terp4:   CALL  obsc
	JMP   SHORT terp2
;
chke8:   MOV   DX,OFFSET L42E8H
	IN    AX,DX
	TEST   AX,start1
	JNZ   chke8x
	AND   BX,OFFSET 0FF55H
chke8x:  RET
;
cal:     CALL  faro
	MOV   AX,OFFSET L0055H
	MOV   DX,OFFSET L006BH
	MOV   DI,OFFSET L5555H
	CALL  gum
	JC    cal1
	TEST  BX,L00FFH
	JNZ   cal1
	MOV   AX,OFFSET L0055H
	MOV   DX,OFFSET L006CH
	MOV   DI,OFFSET L5555H
	CALL  gum
	JC    cal1
	TEST  BX,L00FFH
	JNZ   cal1
	MOV   AX,OFFSET L00AAH
	MOV   DX,OFFSET L006BH
	MOV   DI,OFFSET LAAAAH
	CALL  gum
	JC    cal1
	TEST  BX,L00FFH
	JNZ   cal1
	MOV   AX,OFFSET L00AAH
	MOV   DX,OFFSET L006CH
	MOV   DI,OFFSET LAAAAH
	CALL  gum
	JC    cal1
	TEST  BX,L00FFH
	JNZ   cal1
	CALL  terp
	JMP   SHORT cal2
cal1:    TEST  BX,L00FFH
	JZ    cal2
	MOV   DX,OFFSET L0006H
	MOV   SI,OFFSET L7C5DH
	CALL  err1
	JMP   SHORT cal2
cal2:    CALL  foop
	RET
L78B4H:  CALL  L235DH
	ADD   AL,CH
	XCHG  AL,BYTE PTR [BX+SI]
	ADD   AL,CH
	ADD   BYTE PTR [BX+SI],0
	OUT   AL,DX
	DB    0CAH              ;*** FAR RETURN ***
	ADD   AL,0
	CALL  LCE6DH
	ADD   AL,CH
	XCHG  DL,BYTE PTR [SI]+1
	CALL  LCE51H
	ADD   SI,BP
	DB    0CAH              ;*** FAR RETURN ***
	POP   AX
	ADD   AX,BP
	CMPSB                   ;Compare strings.
	MOVSW                   ;Move wrd, (SI)+- to (DI)+-.
	ADD   AL,CH
	XCHG  CH,BYTE PTR [BX+SI]+0E802H
	SUB   BYTE PTR [BP+SI]+0EE02H,0CAH
	LODSB                   ;Load AL with byt at (SI)+-.
	ADD   CH,AL
	CMPSB                   ;Compare strings.
	INC   WORD PTR [BX+SI]
	CALL  L7571H
	ADD   BP,AX
	CMP   BH,3
	OUT   AL,DX
	DB    0CAH              ;*** FAR RETURN ***
	ADD   BYTE PTR [SI],AL
	ADD   BYTE PTR [BX+DI]+L0007H,BH
	MOV   SI,OFFSET L0200H
L78FBH:  CALL  wait9a
	MOV   DX,OFFSET LBEE8H
	MOV   AX,SI
	DEC   AX
	OUT   AX,DX
	MOV   DX,OFFSET L96E8H
	MOV   AX,SI
	SHL   AX,1
	DEC   AX
	OUT   AX,DX
	MOV   DX,OFFSET L82E8H
	MOV   AX,SI
	OUT   AX,DX
	MOV   DX,OFFSET L86E8H
	XOR   AX,AX
	OUT   AX,DX
	MOV   DX,OFFSET L8EE8H
	OUT   AX,DX
	MOV   DX,OFFSET L8AE8H
	OUT   AX,DX
	MOV   DX,OFFSET L9AE8H
	MOV   AX,OFFSET LC0F1H
	OUT   AX,DX
	CALL  wait9a
	MOV   DX,OFFSET L96E8H
	MOV   AX,SI
	DEC   AX
	OUT   AX,DX
	MOV   DX,OFFSET L86E8H
	MOV   AX,SI
	OUT   AX,DX
	MOV   DX,OFFSET L82E8H
	XOR   AX,AX
	OUT   AX,DX
	MOV   DX,OFFSET L8AE8H
	OUT   AX,DX
	MOV   DX,OFFSET L9AE8H
	MOV   AX,OFFSET LC0F1H
	OUT   AX,DX
	SHR   SI,1
	LOOP  L78FBH            ;Dec CX, loop if CX<>0.
	MOV   SI,OFFSET L7955H
	CALL  w9aee
	RET
L7955H:  CALL  LA112H
	ADD   AL,CH
	XCHG  AL,BYTE PTR [BX+SI]
	ADD   AL,CH
	ADD   BYTE PTR [BX+SI],0
	CALL  L80FAH
	ADD   AL,CH
	MOV   SI,OFFSET L0007H
	CALL  L6A06H
	INC   BX
	ADD   CL,CH
	SUB   SI,DI
;
L7971H:  MOV   SI,OFFSET L7994H
	CALL  w9aee
	JC    L7993H
	CALL  wait9a
	JC    L796EH
	MOV   DX,OFFSET L86E8H
	IN    AX,DX
	CMP   AX,OFFSET L03FFH
	JNZ   L796EH
	MOV   DX,OFFSET L82E8H
	IN    AX,DX
	CMP   AX,OFFSET L03FFH
	JNZ   L796EH
	CALL  foop
L7993H:  RET
L7994H:  OUT   AL,DX
	CALL  FAR 0FEEEH:chksum
	ADD   BYTE PTR [BX+SI],AL
	OUT   AL,DX
	INC   BYTE PTR [BX+SI]
	ADD   DH,CH
	DB    0FEH
	INC   WORD PTR [BP+DI]
L79A4H:  OUT   AL,DX
	DB    0FEH
	INC   WORD PTR [BP+DI]
	ADD   DH,CH
	INTO                    ;Interupt if overflow flag set.
	OUT   AL,DX
	SUB   DH,86H
	OUT   AL,DX
	MOV   CH,DH
	DB    08EH
	OUT   AL,DX
L79B4H:  XCHG  AX,DX
	OUT   AL,DX
	CMPSB                   ;Compare strings.
	OUT   AL,DX
	MOV   DX,OFFSET LEAEEH
	OUT   AL,DX
	SHR   DH,CL
	DB    0D6H
	OUT   AL,DX
	ESC   DH                ;Allow co-processor operation.
	ESC   DH                ;Allow co-processor operation.
	LOOP  L79B4H            ;Dec CX, loop if CX<>0.
	OUT  AL,0EEH
	INC   BYTE PTR [BX+DI]
	DEC   SP
	ADD   WORD PTR [BX+SI],AX
	ADD   WORD PTR [SI],AX
	ADD   WORD PTR [BX+SI],CX
	ADD   WORD PTR [SI],CX
	ADD   WORD PTR [BX+SI],DX
	ADD   WORD PTR [SI],SP
	ADD   WORD PTR [BX+SI],DI
	ADD   WORD PTR [BX+SI]+1,BP
	PUSH  AX
	ADD   WORD PTR [SI]+1,DX
	POP   AX
	ADD   WORD PTR [SI]+1,BX
	DB    060H
	ADD   WORD PTR [SI]+1,SP
	JL    L79A4H
	ADD   AX,WORD PTR [BX+SI]
	MOV   SI,OFFSET L7C53H
	CALL  err1
	STC                     ;Set the carry flag.
	RET
;
L79F4H:  MOV   SI,OFFSET L79A9H
	MOV   DI,OFFSET L79C9H
	MOV   CX,OFFSET extport
L79FDH:  LODSW                   ;Load AX with wrd at (SI)+-.
	MOV   DX,AX
	MOV   AX,BX
	OUT   AX,DX
	LOOP  L79FDH            ;Dec CX, loop if CX<>0.
	MOV   DX,OFFSET L9AEEH
	IN    AX,DX
	CMP   AX,OFFSET LFFFFH
	JNZ   L79E9H
	MOV   CX,OFFSET extport
L7A11H:  MOV   DX,OFFSET L3AEEH
	IN    AX,DX
	AND   AX,OFFSET 7C01H
	SCASW                   ;Scan (DI)+- for wrd in AX.
	JZ    L7A24H
	MOV   DX,OFFSET L12EEH
	IN    AX,DX
	TEST   AX,L0002H
	JNZ   L79E9H
L7A24H:  MOV   DX,OFFSET L1AEEH
	IN    AX,DX
	CMP   AX,BX
	JNZ   L79E9H
	LOOP  L7A11H            ;Dec CX, loop if CX<>0.
	MOV   DX,OFFSET L9AEEH
	IN    AX,DX
	CMP   AX,OFFSET chksum
	JNZ   L79E9H
	CLC                     ;Clear the carry flag.
	RET
;
L7A39H:  PUSH  ES
	PUSH  BX
	MOV   AX,CS
	MOV   ES,AX
	MOV   DX,OFFSET L12EEH
	IN    AX,DX
	MOV   DX,OFFSET L36EEH
	TEST   AX,L0004H
	JNZ   L7A50H
	MOV   AX,OFFSET L0002H
	JMP   SHORT L7A52H
L7A50H:  XOR   AX,AX
L7A52H:  OUT   AX,DX
	MOV   DX,OFFSET L32EEH
	MOV   AX,OFFSET extport
	OUT   AX,DX
	MOV   BX,OFFSET L5555H
	CALL  L79F4H
	JC    L7A78H
	MOV   BX,OFFSET LAAAAH
	CALL  L79F4H
	JC    L7A78H
	POP   BX
L7A6BH:  MOV   DX,OFFSET L32EEH
	XOR   AX,AX
	OUT   AX,DX
	PUSH  BX
	CALL  L7FA4H
	POP   BX
	POP   ES
	RET
L7A78H:  POP   BX
	OR    BX,OFFSET L0100H
	JMP   SHORT L7A6BH
L7A7FH:  OUT   AL,DX
	JPE   L7A8CH
	ADD   AL,CH
	DEC   DX
	PUSH  ES
	ADD   DL,CH
	ADD   BH,BH
	ADD   AL,CH
L7A8CH:  AND   AH,BYTE PTR [BX+DI]
	ADD   BYTE PTR [BX+SI],AL
L7A90H:  CALL  L7B51H
	MOV   AL,BYTE PTR [LBEE8H]
	ADD   BYTE PTR [SI],DL
	CALL  w9aee_3
	AND   AL,0E8H
	MOV   SI,OFFSET L37FFH
	CALL  L7A61H
	INC   DI
	CALL  LA261H
	ADD   AL,CH
	MOV   DH,OFFSET 7
	ADD   AL,CH
	CMPSB                   ;Compare strings.
;
L7AAEH:  INC   WORD PTR [BX+SI]
	CALL  L7B55H
	ADD   AL,CH
	MOV   SI,OFFSET L8000H
	CALL  L7B79H
	NOP
	CALL  L7A6DH
	ADD   AL,CH
	STOSB                   ;Store byt in AL in (DI)+-.
	INC   WORD PTR [BX+SI]
	JMP   FAR 0E800H:L0002H
	XCHG  AL,BYTE PTR [BX+SI]
	ADD   AL,CH
	ADD   BYTE PTR [BX+SI],0
	CALL  L7A69H
	ADD   BP,AX
	MOV   SI,OFFSET L03FFH
;
L7AD8H:  CALL  L6E75H
	INC   AX
	CALL  err_b
	ADD   AL,CH
	ADD   BYTE PTR [BX+SI],0
	CALL  L7B8DH
	ADD   AL,CH
	MOV   AL,BYTE PTR [BX+SI]
	ADD   AL,CH
	MOV   ES,WORD PTR [BX+SI]
	ADD   AL,CH
	XCHG  AX,DX
	ADD   BYTE PTR [BX+SI],AL
	CALL  L7BA9H
	ADD   AL,CH
	CALL  FAR LA6E8H:40F3H
	INC   WORD PTR [BX+SI]
	CALL  L7B89H
	ADD   AL,CH
	ADD   BYTE PTR [BX+SI],0
	ADD   AL,CH
	DEC   DX
	ADD   AL,BYTE PTR [BX+SI]
	CALL  L7B96H
	ADD   AL,CH
	ADD   BYTE PTR [BX+SI],0
	CALL  L7AAEH
	ADD   BP,AX
	MOV   SI,OFFSET L03FFH
	CALL  L6EBAH
	INC   AX
	CALL  L7BAAH
	ADD   AL,CH
	ADD   BYTE PTR [BX+SI],0
	ADD   AL,CH
	CMPSB                   ;Compare strings.
	ADD   BYTE PTR [BX+SI],AL
	ADD   AL,CH
	CMPSB                   ;Compare strings.
	INC   WORD PTR [BX+SI]
	ADD   BYTE PTR [BP+DI],DH
	DB    0C9H
w9aee_1: MOV   DX,OFFSET L9AEEH
	IN    AX,DX
	TEST   AX,extport
	JZ    w9aee_2
	LOOP  w9aee_1           ;Dec CX, loop if CX<>0.
	JMP   wir
w9aee_2: LODSW                   ;Load AX with wrd at (SI)+-.
	CMP   AL,0
	JZ    w9aee_5
	MOV   DX,AX
	LODSW                   ;Load AX with wrd at (SI)+-.
	TEST  DX,LF000H
	JZ    w9aee_4
	CMP   DX,OFFSET L22E8H
	JZ    w9aee_4
	OUT   AX,DX
;
w9aee_3: JMP   SHORT w9aee
w9aee_4: OUT   AL,DX
	JMP   SHORT w9aee
w9aee_5: CLC                     ;Clear the carry flag.
	RET
err_a:   DB    CR,LF,'  1'
;
err_b:   DB    '42',0,' Failure',0
;
err1:    PUSH  ES
	PUSH  BX
	PUSH  DX
	PUSH  SI
	MOV   SI,OFFSET err_a
	CALL  io
	CALL  L7BB5H
	MOV   AX,OFFSET L0E20H
	INT   10H               ;Display control interupt.
	POP   DX
	PUSH  DX
	XCHG  DH,DL
	CALL  L7BB5H
	XCHG  DH,DL
	CALL  L7BB5H
	MOV   AX,OFFSET L0E20H
	INT   10H               ;Display control interupt.
	POP   AX
	POP   DX
;
L7B96H:  PUSH  DX
	PUSH  AX
	XCHG  DH,DL
	CALL  L7BB5H
	XCHG  DH,DL
	CALL  L7BB5H
	MOV   AX,OFFSET L0E20H
	INT   10H               ;Display control interupt.
	POP   SI
	CALL  io
	POP   DX
	CALL  faro
	CALL  obsc
	POP   BX
	POP   ES
	RET
;
L7BB5H:  MOV   AL,DL
	SHR   AL,1
	SHR   AL,1
	SHR   AL,1
	SHR   AL,1
	CALL  L7BCAH
	MOV   AL,DL
	AND   AL,0FH
	CALL  L7BCAH
	RET
;
L7BCAH:  PUSH  DX
	CMP   AL,LF
	JC    L7BD3H
	ADD   AL,37H
	JMP   SHORT L7BD5H
;
L7BD3H:  ADD   AL,30H
L7BD5H:  MOV   AH,OFFSET 0EH
	INT   10H               ;Display control interupt.
	POP   DX
	RET
;
L7BDBH:  PUSH  CX
	PUSH  BX
L7BDDH:  MOV   CX,OFFSET L0064H
L7BE0H:  MOV   BX,OFFSET L04A9H
	CALL  L7BF8H
	LOOP  L7BE0H            ;Dec CX, loop if CX<>0.
	DEC   DL
	JNZ   L7BDDH
	POP   BX
	POP   CX
	RET
	PUSH  BX
	MOV   BX,OFFSET L0020H
	CALL  L7BF8H
	POP   BX
	RET
;
L7BF8H:  PUSH  AX
	PUSH  DX
	PUSHF
	CLI                     ;Disable interupts.
	MOV   AL,OFFSET 0
	OUT  AL,43H
L7C00H:  IN   AL,40H
	MOV   DL,AL
	IN   AL,40H
	MOV   DH,AL
L7C08H:  CLI                     ;Disable interupts.
	MOV   AL,OFFSET 0
	OUT  AL,43H
	IN   AL,40H
	MOV   AH,AL
	IN   AL,40H
	STI                     ;Enable interupts.
	XCHG  AL,AH
	SUB   AX,DX
	NEG   AX
	CMP   AX,BX
	JBE   L7C08H
	POPF
	POP   DX
	POP   AX
	RET
;
io:      PUSH  BX
	CMP   SI,OFFSET L7C91H
	JNZ   io1
	CMP   WORD PTR ES:[L0072H],OFFSET 1234H
	JZ    io2
io1:     LODSB                   ;Load AL with byt at (SI)+-.
	TEST  AL,AL
	JZ    io2
	MOV   AH,OFFSET 0EH
	INT   10H               ;Display control interupt.
	JMP   SHORT io1
io2:     POP   BX
	MOV   AH,OFFSET 1
	INT   16H
	JZ    io3
	MOV   AH,OFFSET 0
	INT   16H
	STC                     ;Set the carry flag.
	RET
io3:     CLC                     ;Clear the carry flag.
	RET
	DB    'RAMDAC',0
L7C53H:  DB    'Subsystem',0
L7C5DH:  DB    'RAM',0
L7C61H:  DB    'RAM Addressing',0
L7C70H:  DB    'Graphics Subsyst'
	DB    'em',0,'Configurat'
	DB    'ion',0
L7C91H:  DB    '.',0
L7C93H:  DB    CR,LF,0
L7C96H:  DB    'Ok',CR
L7C99H:  DB    LF,0
;
L7C9BH:  PUSH  AX
	PUSH  CX
L7C9DH:  LODSW                   ;Load AX with wrd at (SI)+-.
	CMP   AL,0FFH
	JZ    L7CC1H
	PUSH  DX
	PUSH  BX
	ADD   DH,AL
	ADD   DH,BH
	ADD   DL,AH
	ADD   DL,BL
	MOV   AH,OFFSET 2
	MOV   BH,OFFSET 0
	INT   10H               ;Display control interupt.
	LODSW                   ;Load AX with wrd at (SI)+-.
	MOV   CL,AH
	MOV   CH,OFFSET 0
	MOV   AH,OFFSET 9
	MOV   BX,DI
	INT   10H               ;Display control interupt.
	POP   BX
	POP   DX
	JMP   SHORT L7C9DH
L7CC1H:  POP   CX
	POP   AX
	RET
L7CC4H:  ESC   AH                ;Allow co-processor operation.
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
L7CCEH:  DB    0C4H
L7CCFH:  DB    0C4H
	DB    0C4H
L7CD1H:  DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
L7CDDH:  DB    0C4H
L7CDEH:  DB    0C4H
L7CDFH:  DB    0C4H
	LES   DI,DWORD PTR [BX]+0A0DH;Load ES:DI with 32b pointer.
	MOV   BL,OFFSET 20H
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	ESC   AH                ;Allow co-processor operation.
	DB    0C4H
	DB    0C4H
L7CF4H:  LES   DI,DWORD PTR [BX]+L2020H;Load ES:DI with 32b pointer.
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BP+DI]+0A0DH,DH
	MOV   BL,OFFSET 20H
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	MOV   BL,OFFSET 20H
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BP+DI]+L2020H,DH
	AND   DL,BL
	DB    0C4H
	LES   DI,DWORD PTR [BX]+L2020H;Load ES:DI with 32b pointer.
	ESC   AH                ;Allow co-processor operation.
	DB    0C1H
	LES   DI,DWORD PTR [BX]+0A0DH;Load ES:DI with 32b pointer.
	MOV   BL,OFFSET 20H
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	DB    0C0H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	ESC   WORD PTR [BX+SI]  ;Allow co-processor operation.
	AND   BYTE PTR [BX+SI],AH
	DB    0C0H
	DB    0C4H
	DB    0C4H
	ESC   WORD PTR [BX+SI]  ;Allow co-processor operation.
	AND   BYTE PTR [BP+DI]+L2020H,DH
	AND   BYTE PTR [BP+DI]+0A0DH,DH
	MOV   BL,OFFSET 20H
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	ESC   AH                ;Allow co-processor operation.
	DB    0C4H
	DB    0C4H
	LES   DI,DWORD PTR [BX]+L2020H;Load ES:DI with 32b pointer.
	AND   DL,BL
	DB    0C4H
	LES   DI,DWORD PTR [BX]+L2020H;Load ES:DI with 32b pointer.
	DB    0C0H
	DB    0C4H
	RET    0D9C4H
	OR    AX,OFFSET 0B30AH
	AND   DL,BL
	MOV   DI,OFFSET LBFDAH
	ESC   BYTE PTR [BX]+LBFDAH;Allow co-processor operation.
	AND   BYTE PTR [BX+SI],AH
	MOV   BL,OFFSET 20H
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BP+DI]+L2020H,DH
	AND   BYTE PTR [BP+DI]+L2020H,DH
	MOV   BL,OFFSET 20H
	AND   DL,BL
	LES   SI,DWORD PTR [SI]+0A0DH;Load ES:SI with 32b pointer.
	MOV   BL,OFFSET 20H
	DB    0C0H
	ESC   AX                ;Allow co-processor operation.
	ESC   AX                ;Allow co-processor operation.
	ESC   AX                ;Allow co-processor operation.
	ESC   WORD PTR [BX+SI]  ;Allow co-processor operation.
	AND   AL,AL
	DB    0C4H
	DB    0C4H
	DB    0C4H
	DB    0C4H
	ESC   WORD PTR [BX+SI]  ;Allow co-processor operation.
	AND   BYTE PTR [BX+SI],AH
	DB    0C0H
	DB    0C4H
	DB    0C4H
	ESC   WORD PTR [BX+SI]  ;Allow co-processor operation.
	AND   AL,AL
	LES   SI,DWORD PTR [SI]+0A0DH;Load ES:SI with 32b pointer.
	MOV   BL,OFFSET 20H
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   DL,BL
	MOV   DI,OFFSET L2020H
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   BYTE PTR [BX+SI],AH
	AND   DL,BL
	DB    0C4H
	DB    0C4H
	ESC   WORD PTR [DI]     ;Allow co-processor operation.
	OR    AL,AL
	RCL   AL,1
	RCL   AL,1
	RCL   AL,1
	RCL   AL,1
	RCL   AL,1
	ESC   AX                ;Allow co-processor operation.
	RCL   AL,1
	RCL   AL,1
	RCL   AL,1
	RCL   AL,1
	RCL   AL,1
	RCL   AL,1
	RCR   CL,1
	OR    AX,OFFSET L000AH
L7DE8H:  ADD   BYTE PTR [BP+SI],AL
	DB    0D4H
	ADD   WORD PTR [BX+SI],AX
	ADD   CX,BP
	PUSH  ES
	ADD   BYTE PTR [BX+DI],CL
	MOV   SI,OFFSET LFF01H
L7DF5H:  ADD   BYTE PTR [BP+SI],AL
	DB    0D5H
	ADD   WORD PTR [BX+SI],AX
	ADD   CX,BP
	PUSH  ES
	ADD   BYTE PTR [BX+DI],CL
	MOV   AX,OFFSET LFF01H
L7E02H:  ADD   BYTE PTR [BP+SI],AL
	MOV   BYTE PTR [BX+DI],OFFSET 0
	ADD   CX,BP
	PUSH  ES
	ADD   BYTE PTR [BX+DI],CL
	MOV   CH,OFFSET 1
	INC   WORD PTR [BX+SI]
	ADD   CL,CH
	OR    BH,BH
L7E14H:  ADD   WORD PTR [BP+SI],AX
	ESC   BYTE PTR [BX+DI]  ;Allow co-processor operation.
	ADD   WORD PTR [BP+DI],AX
	MOV   DI,OFFSET L0201H
	ADD   AL,AL
	ADD   WORD PTR [BP+SI],AX
	ADD   BX,CX
L7E23H:  ADD   DI,DI
L7E25H:  ADD   WORD PTR [SI],CX
	ESC   BYTE PTR [BX+DI]  ;Allow co-processor operation.
	ADD   WORD PTR [DI],CX
	LES   AX,DWORD PTR [SI] ;Load ES:AX with 32b pointer.
	ADD   WORD PTR [BX+DI],DX
	MOV   DI,OFFSET L0201H
	OR    AL,0B3H
	ADD   WORD PTR [BP+SI],AX
	ADC   WORD PTR [BP+DI]+L0301H,SI
	OR    AL,0C0H
	ADD   WORD PTR [BP+DI],AX
	OR    AX,OFFSET 04C4H
	ADD   DX,WORD PTR [BX+DI]
	ESC   WORD PTR [BX+DI]  ;Allow co-processor operation.
	INC   WORD PTR [BP+SI]
	ADC   AX,OFFSET 01DAH
	ADD   DL,BYTE PTR [L02C4H]
	ADD   BL,BYTE PTR [BX+SI]
	MOV   DI,OFFSET L0301H
	ADC   AX,OFFSET L01C0H
	ADD   DX,WORD PTR [L02C4H]
	ADD   BX,WORD PTR [BX+SI]
	ESC   WORD PTR [BX+DI]  ;Allow co-processor operation.
	INC   WORD PTR [SI]
	ADC   AX,OFFSET 01DAH
	ADD   AL,16H
	LES   AX,DWORD PTR [BP+SI];Load ES:AX with 32b pointer.
	ADD   AL,18H
	MOV   DI,OFFSET L0501H
	ADC   AX,OFFSET 01B3H
	ADD   AX,OFFSET 0B318H
	ADD   WORD PTR [LC015H],AX
	ADD   WORD PTR [LC416H],AX
	ADD   AL,BYTE PTR [LD918H]
	ADD   DI,DI
L7E80H:  ADD   AL,13H
	ESC   WORD PTR [BX+DI]  ;Allow co-processor operation.
	DB    0FFH
;
L7E85H:  PUSH  AX
	PUSH  BX
	MOV   CX,OFFSET L0004H
	MOV   AH,OFFSET 3
L7E8CH:  TEST  AL,AH
	JZ    L7EFCH
	PUSH  AX
	PUSH  AX
	PUSH  DX
	MOV   DX,OFFSET L12EEH
	IN    AX,DX
	POP   DX
	TEST   AX,extport
	POP   AX
	JNZ   L7ECAH
	MOV   BL,OFFSET 0
	MOV   BH,OFFSET 5
	SUB   BH,CL
	CMP   DI,OFFSET L008FH
	JZ    L7EAFH
	MOV   SI,OFFSET L7E0FH
	JMP   SHORT L7EF8H
L7EAFH:  PUSH  AX
	AND   AL,3
	CMP   AL,3
	POP   AX
	JNZ   L7EBCH
	MOV   SI,OFFSET L7E02H
	JMP   SHORT L7EF8H
L7EBCH:  TEST   AL,1
	JZ    L7EC5H
	MOV   SI,OFFSET L7DE8H
	JMP   SHORT L7EF8H
L7EC5H:  MOV   SI,OFFSET L7DF5H
	JMP   SHORT L7EF8H
L7ECAH:  PUSH  CX
	MOV   SI,OFFSET L7E14H
	MOV   BH,OFFSET 0
	CMP   CL,2
	JA    L7EDCH
	ADD   BH,2
	INC   CL
	INC   CL
L7EDCH:  MOV   BL,OFFSET 4
	SUB   BL,CL
	SHL   BL,1
	SHL   BL,1
	POP   CX
	PUSH  SI
	PUSH  BX
	TEST   AL,2
	JZ    L7EF2H
	INC   BL
	INC   BL
	CALL  L7C9BH
L7EF2H:  POP   BX
	POP   SI
	TEST   AL,1
	JZ    L7EFBH
L7EF8H:  CALL  L7C9BH
L7EFBH:  POP   AX
L7EFCH:  SHR   AL,1
	SHR   AL,1
	LOOP  L7E8CH            ;Dec CX, loop if CX<>0.
	POP   BX
	POP   AX
	RET
;
L7F05H:  PUSH  AX
	PUSH  AX
	MOV   SI,OFFSET L7C93H
	CALL  io
	MOV   AH,OFFSET 3
	MOV   BH,OFFSET 0
	INT   10H               ;Display control interupt.
	CMP   DH,0FH
	JBE   L7F1AH
	MOV   DH,OFFSET 0FH
L7F1AH:  PUSH  DX
	MOV   SI,OFFSET L7CC4H
	CALL  io
	POP   DX
	MOV   DI,OFFSET L0007H
	MOV   AL,OFFSET 0FFH
	CALL  L7E85H
	POP   AX
	MOV   DI,OFFSET L008FH
	CALL  L7E85H
	XOR   BX,BX
	TEST   AX,L0100H
	JZ    L7F3EH
	MOV   SI,OFFSET L7E25H
	CALL  L7C9BH
L7F3EH:  TEST   AX,L0200H
	JZ    L7F5BH
	MOV   SI,OFFSET L7E46H
	PUSH  AX
	PUSH  DX
	MOV   DX,OFFSET L12EEH
	IN    AX,DX
	POP   DX
	TEST   AX,L0004H
	JNZ   L7F55H
	MOV   BX,OFFSET L001BH
L7F55H:  CALL  L7C9BH
	POP   AX
	XOR   BX,BX
L7F5BH:  TEST   AX,0400H
	JZ    L7F66H
	MOV   SI,OFFSET L7E5FH
	CALL  L7C9BH
L7F66H:  TEST   AX,L0800H
	JZ    L7F71H
	MOV   SI,OFFSET L7E80H
	CALL  L7C9BH
L7F71H:  ADD   DH,9
	XOR   DL,DL
	MOV   AH,OFFSET 2
	MOV   BH,OFFSET 0
	INT   10H               ;Display control interupt.
	CALL  faro
	MOV   DL,OFFSET 6
	CALL  setqm_1
	MOV   DL,OFFSET 3
	CALL  L7BDBH
	MOV   DL,OFFSET 2
	CALL  setqm_1
	MOV   DL,OFFSET 2
	CALL  L7BDBH
	MOV   DL,OFFSET 2
	CALL  setqm_1
	MOV   DL,OFFSET 0AH
	CALL  L7BDBH
	POP   AX
L7F9EH:  TEST   AX,L4000H
	JNZ   L7F9EH
	RET
;
L7FA4H:  MOV   BX,OFFSET L000AH
	MOV   DX,OFFSET L12EEH
	IN    AX,DX
	TEST   AX,extport
	JZ    L7FB3H
	MOV   BX,OFFSET L000EH
L7FB3H:  OR    BX,OFFSET 0E0H
	PUSH  BX
	MOV   BL,OFFSET 5
	CALL  strobes
	POP   BX
	TEST   AX,L8000H
	JNZ   L7FCFH
	TEST   AX,L4000H
	JNZ   L7FE1H
	CALL  L0679H
	CMP   AL,2
	JGE   L7FE1H
L7FCFH:  OR    BX,OFFSET L0200H
	MOV   AX,BX
	MOV   DX,OFFSET L6AEEH
	OUT   AX,DX
	MOV   DX,OFFSET L36EEH
	MOV   AX,OFFSET start
	OUT   AX,DX
	RET
L7FE1H:  MOV   AX,BX
	MOV   DX,OFFSET L6AEEH
	OUT   AX,DX
	MOV   DX,OFFSET L36EEH
	MOV   AX,OFFSET L0001H
	OUT   AX,DX
	RET
	ADD   BYTE PTR [BX+SI]+1301H,BH
	MOV   BX,OFFSET L0007H
	MOV   DX,WORD PTR [L0450H]
	INT   6DH               ;User defined interupt.
	RET
	DB    0FFH
	DB    0FFH
L7FFFH:  CALL  DWORD PTR [BP+SI]
Code_Seg ENDS
	END   chksum
