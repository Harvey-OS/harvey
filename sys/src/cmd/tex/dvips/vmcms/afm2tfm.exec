
*** EOOH ***
Return-Path: <@Sunburn.Stanford.EDU:hafner@almaden.ibm.com>
Date: Wed, 11 Nov 92 09:01:00 PST
From: "James L. Hafner" <hafner@almaden.ibm.com>
To: rokicki@cs.stanford.edu
Subject: AFM2TFM EXEC

/* AFM2TFM exec: a front end to the AFM2TFM module for VM/CMS */
/* This is version 2.0 as of 9 Nov. 1992.                     */
/* Written by Jim Hafner (hafner@almaden.ibm.com).            */
/*                                                            */
/* Command is:                                                */
/*    afm2tfm fontname options                                */
/* Note: See the DVIPS manual for the correct options.        */

/* END OF HEADER (this line must be preceded by a blank line) */

/* This is part of the VM/CMS distribution of Rokicki's DVIPS program.
 * Installers may need to customize this exec extensively, though we
 * have tried to make it as generic as possible.
 *
 * You are welcome to modify this exec in any way you choose.
 *
 * THANKS:
 *   This EXEC is based in large part on an earlier version
 *   created by Alessio Guglielmi (ALESSIO@IPISNSIB.BITNET).  His
 *   contribution is gratefully acknowledged.
 */

Address COMMAND
Parse Arg args
If args="" | args="?" Then Signal show_header

/* Establish environment for afm2tfm */

call resetLibs ;

/* run the program */
'AFM2TFM' args

/* Restore old libraries */

call restoreLibs ;

Exit Rc


Savelibs: procedure
   arg library
   'MAKEBUF';
   tmplibs = ''
   'QUERY' library '(STACK'
   do i = 1 to queued()
     pull Mode Eq_sign Tmptmplibs
     if Tmptmplibs = 'NONE' then tmplibs = ''
        else tmplibs = tmplibs Tmptmplibs
   end;
   'DROPBUF';
   return tmplibs  ;

resetLibs:
   /* get current status of library settings */
   Txtlibs=Savelibs(TXTLIB)
   Loadlibs=Savelibs(LOADLIB)
   /* Establish environment for afm2tfm */
   'GLOBAL TXTLIB IBMLIB EDCBASE'
   'GLOBAL LOADLIB EDCLINK'
   return ;

restoreLibs:
   'GLOBAL TXTLIB' Txtlibs
   'GLOBAL LOADLIB' Loadlibs
   return ;

show_header:
   index=1
   line=Sourceline(index)
   Do While Substr(line,1,2)="/*"
      parse var line '/*' middle '*/'
      Say middle
      index=index+1
      line=Sourceline(index)
      End
   Exit
