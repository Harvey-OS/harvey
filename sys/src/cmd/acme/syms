sizeof_1_ = 8;
aggr _1_
{
	'D' 0 llength;
	'D' 4 hlength;
};

defn
_1_(addr) {
	complex _1_ addr;
	print("	llength	", addr.llength, "\n");
	print("	hlength	", addr.hlength, "\n");
};

sizeof_2_ = 8;
aggr _2_
{
	'V' 0 length;
	{
	'D' 0 llength;
	'D' 4 hlength;
	};
};

defn
_2_(addr) {
	complex _2_ addr;
	print("	length	", addr.length, "\n");
	print("_1_ {\n");
		_1_(addr+0);
	print("}\n");
};

UTFmax = 3;
Runesync = 128;
Runeself = 128;
Runeerror = 128;
sizeofFconv = 24;
aggr Fconv
{
	'X' 0 out;
	'X' 4 eout;
	'D' 8 f1;
	'D' 12 f2;
	'D' 16 f3;
	'D' 20 chr;
};

defn
Fconv(addr) {
	complex Fconv addr;
	print("	out	", addr.out\X, "\n");
	print("	eout	", addr.eout\X, "\n");
	print("	f1	", addr.f1, "\n");
	print("	f2	", addr.f2, "\n");
	print("	f3	", addr.f3, "\n");
	print("	chr	", addr.chr, "\n");
};

sizeofTm = 40;
aggr Tm
{
	'D' 0 sec;
	'D' 4 min;
	'D' 8 hour;
	'D' 12 mday;
	'D' 16 mon;
	'D' 20 year;
	'D' 24 wday;
	'D' 28 yday;
	'a' 32 zone;
	'D' 36 tzoff;
};

defn
Tm(addr) {
	complex Tm addr;
	print("	sec	", addr.sec, "\n");
	print("	min	", addr.min, "\n");
	print("	hour	", addr.hour, "\n");
	print("	mday	", addr.mday, "\n");
	print("	mon	", addr.mon, "\n");
	print("	year	", addr.year, "\n");
	print("	wday	", addr.wday, "\n");
	print("	yday	", addr.yday, "\n");
	print("	zone	", addr.zone, "\n");
	print("	tzoff	", addr.tzoff, "\n");
};

PNPROC = 1;
PNGROUP = 2;
sizeofLock = 4;
aggr Lock
{
	'D' 0 val;
};

defn
Lock(addr) {
	complex Lock addr;
	print("	val	", addr.val, "\n");
};

sizeofQLp = 12;
aggr QLp
{
	'D' 0 inuse;
	'A' QLp 4 next;
	'C' 8 state;
};

defn
QLp(addr) {
	complex QLp addr;
	print("	inuse	", addr.inuse, "\n");
	print("	next	", addr.next\X, "\n");
	print("	state	", addr.state, "\n");
};

sizeofQLock = 16;
aggr QLock
{
	Lock 0 lock;
	'D' 4 locked;
	'A' QLp 8 $head;
	'A' QLp 12 $tail;
};

defn
QLock(addr) {
	complex QLock addr;
	print("Lock lock {\n");
	Lock(addr.lock);
	print("}\n");
	print("	locked	", addr.locked, "\n");
	print("	$head	", addr.$head\X, "\n");
	print("	$tail	", addr.$tail\X, "\n");
};

sizeofRWLock = 20;
aggr RWLock
{
	Lock 0 lock;
	'D' 4 readers;
	'D' 8 writer;
	'A' QLp 12 $head;
	'A' QLp 16 $tail;
};

defn
RWLock(addr) {
	complex RWLock addr;
	print("Lock lock {\n");
	Lock(addr.lock);
	print("}\n");
	print("	readers	", addr.readers, "\n");
	print("	writer	", addr.writer, "\n");
	print("	$head	", addr.$head\X, "\n");
	print("	$tail	", addr.$tail\X, "\n");
};

RFNAMEG = 1;
RFENVG = 2;
RFFDG = 4;
RFNOTEG = 8;
RFPROC = 16;
RFMEM = 32;
RFNOWAIT = 64;
RFCNAMEG = 1024;
RFCENVG = 2048;
RFCFDG = 4096;
RFREND = 8192;
sizeofQid = 8;
aggr Qid
{
	'U' 0 path;
	'U' 4 vers;
};

defn
Qid(addr) {
	complex Qid addr;
	print("	path	", addr.path, "\n");
	print("	vers	", addr.vers, "\n");
};

sizeofDir = 116;
aggr Dir
{
	'a' 0 name;
	'a' 28 uid;
	'a' 56 gid;
	Qid 84 qid;
	'U' 92 mode;
	'D' 96 atime;
	'D' 100 mtime;
	{
	'V' 104 length;
	{
	'D' 104 llength;
	'D' 108 hlength;
	};
	};
	'u' 112 type;
	'u' 114 dev;
};

defn
Dir(addr) {
	complex Dir addr;
	print("	name	", addr.name, "\n");
	print("	uid	", addr.uid, "\n");
	print("	gid	", addr.gid, "\n");
	print("Qid qid {\n");
	Qid(addr.qid);
	print("}\n");
	print("	mode	", addr.mode, "\n");
	print("	atime	", addr.atime, "\n");
	print("	mtime	", addr.mtime, "\n");
	print("_2_ {\n");
		_2_(addr+104);
	print("}\n");
	print("	type	", addr.type, "\n");
	print("	dev	", addr.dev, "\n");
};

sizeofWaitmsg = 112;
aggr Waitmsg
{
	'a' 0 pid;
	'a' 12 time;
	'a' 48 msg;
};

defn
Waitmsg(addr) {
	complex Waitmsg addr;
	print("	pid	", addr.pid, "\n");
	print("	time	", addr.time, "\n");
	print("	msg	", addr.msg, "\n");
};

DBlack = 255;
DBlue = 201;
DRed = 15;
DYellow = 3;
DGreen = 192;
DWhite = 0;
Displaybufsize = 8000;
ICOSSCALE = 1024;
Borderwidth = 4;
Refbackup = 0;
Refnone = 1;
Refmesg = 2;
Endsquare = 0;
Enddisc = 1;
Endarrow = 2;
Endmask = 31;
sizeofPoint = 8;
aggr Point
{
	'D' 0 x;
	'D' 4 y;
};

defn
Point(addr) {
	complex Point addr;
	print("	x	", addr.x, "\n");
	print("	y	", addr.y, "\n");
};

sizeofRectangle = 16;
aggr Rectangle
{
	Point 0 min;
	Point 8 max;
};

defn
Rectangle(addr) {
	complex Rectangle addr;
	print("Point min {\n");
	Point(addr.min);
	print("}\n");
	print("Point max {\n");
	Point(addr.max);
	print("}\n");
};

sizeofScreen = 16;
aggr Screen
{
	'X' 0 display;
	'D' 4 id;
	'X' 8 image;
	'X' 12 fill;
};

defn
Screen(addr) {
	complex Screen addr;
	print("	display	", addr.display\X, "\n");
	print("	id	", addr.id, "\n");
	print("	image	", addr.image\X, "\n");
	print("	fill	", addr.fill\X, "\n");
};

sizeofDisplay = 8160;
aggr Display
{
	QLock 0 qlock;
	'D' 16 locking;
	'D' 20 dirno;
	'D' 24 fd;
	'D' 28 reffd;
	'D' 32 ctlfd;
	'D' 36 imageid;
	'D' 40 $local;
	'D' 44 ldepth;
	'X' 48 error;
	'X' 52 devdir;
	'X' 56 windir;
	'a' 60 oldlabel;
	'U' 124 dataqid;
	'X' 128 ones;
	'X' 132 zeros;
	'X' 136 image;
	'a' 140 buf;
	'X' 8144 bufp;
	'X' 8148 defaultfont;
	'X' 8152 defaultsubfont;
	'X' 8156 windows;
};

defn
Display(addr) {
	complex Display addr;
	print("QLock qlock {\n");
	QLock(addr.qlock);
	print("}\n");
	print("	locking	", addr.locking, "\n");
	print("	dirno	", addr.dirno, "\n");
	print("	fd	", addr.fd, "\n");
	print("	reffd	", addr.reffd, "\n");
	print("	ctlfd	", addr.ctlfd, "\n");
	print("	imageid	", addr.imageid, "\n");
	print("	$local	", addr.$local, "\n");
	print("	ldepth	", addr.ldepth, "\n");
	print("	error	", addr.error\X, "\n");
	print("	devdir	", addr.devdir\X, "\n");
	print("	windir	", addr.windir\X, "\n");
	print("	oldlabel	", addr.oldlabel, "\n");
	print("	dataqid	", addr.dataqid, "\n");
	print("	ones	", addr.ones\X, "\n");
	print("	zeros	", addr.zeros\X, "\n");
	print("	image	", addr.image\X, "\n");
	print("	buf	", addr.buf, "\n");
	print("	bufp	", addr.bufp\X, "\n");
	print("	defaultfont	", addr.defaultfont\X, "\n");
	print("	defaultsubfont	", addr.defaultsubfont\X, "\n");
	print("	windows	", addr.windows\X, "\n");
};

sizeofImage = 56;
aggr Image
{
	'A' Display 0 display;
	'D' 4 id;
	Rectangle 8 r;
	Rectangle 24 clipr;
	'D' 40 ldepth;
	'D' 44 repl;
	'A' Screen 48 screen;
	'A' Image 52 next;
};

defn
Image(addr) {
	complex Image addr;
	print("	display	", addr.display\X, "\n");
	print("	id	", addr.id, "\n");
	print("Rectangle r {\n");
	Rectangle(addr.r);
	print("}\n");
	print("Rectangle clipr {\n");
	Rectangle(addr.clipr);
	print("}\n");
	print("	ldepth	", addr.ldepth, "\n");
	print("	repl	", addr.repl, "\n");
	print("	screen	", addr.screen\X, "\n");
	print("	next	", addr.next\X, "\n");
};

sizeofRGB = 12;
aggr RGB
{
	'U' 0 red;
	'U' 4 green;
	'U' 8 blue;
};

defn
RGB(addr) {
	complex RGB addr;
	print("	red	", addr.red, "\n");
	print("	green	", addr.green, "\n");
	print("	blue	", addr.blue, "\n");
};

sizeofFontchar = 8;
aggr Fontchar
{
	'D' 0 x;
	'b' 4 top;
	'b' 5 bottom;
	'C' 6 left;
	'b' 7 width;
};

defn
Fontchar(addr) {
	complex Fontchar addr;
	print("	x	", addr.x, "\n");
	print("	top	", addr.top, "\n");
	print("	bottom	", addr.bottom, "\n");
	print("	left	", addr.left, "\n");
	print("	width	", addr.width, "\n");
};

sizeofSubfont = 16;
aggr Subfont
{
	'X' 0 name;
	'd' 4 n;
	'b' 6 height;
	'C' 7 ascent;
	'A' Fontchar 8 info;
	'A' Image 12 bits;
};

defn
Subfont(addr) {
	complex Subfont addr;
	print("	name	", addr.name\X, "\n");
	print("	n	", addr.n, "\n");
	print("	height	", addr.height, "\n");
	print("	ascent	", addr.ascent, "\n");
	print("	info	", addr.info\X, "\n");
	print("	bits	", addr.bits\X, "\n");
};

LOG2NFCACHE = 6;
NFCACHE = 64;
NFLOOK = 5;
NFSUBF = 2;
MAXFCACHE = 1029;
MAXSUBF = 50;
DSUBF = 4;
SUBFAGE = 10000;
CACHEAGE = 10000;
sizeofCachefont = 16;
aggr Cachefont
{
	'u' 0 min;
	'u' 2 max;
	'D' 4 offset;
	'X' 8 name;
	'X' 12 subfontname;
};

defn
Cachefont(addr) {
	complex Cachefont addr;
	print("	min	", addr.min, "\n");
	print("	max	", addr.max, "\n");
	print("	offset	", addr.offset, "\n");
	print("	name	", addr.name\X, "\n");
	print("	subfontname	", addr.subfontname\X, "\n");
};

sizeofCacheinfo = 8;
aggr Cacheinfo
{
	'u' 0 x;
	'b' 2 width;
	'C' 3 left;
	'u' 4 value;
	'u' 6 age;
};

defn
Cacheinfo(addr) {
	complex Cacheinfo addr;
	print("	x	", addr.x, "\n");
	print("	width	", addr.width, "\n");
	print("	left	", addr.left, "\n");
	print("	value	", addr.value, "\n");
	print("	age	", addr.age, "\n");
};

sizeofCachesubf = 12;
aggr Cachesubf
{
	'U' 0 age;
	'A' Cachefont 4 cf;
	'A' Subfont 8 f;
};

defn
Cachesubf(addr) {
	complex Cachesubf addr;
	print("	age	", addr.age, "\n");
	print("	cf	", addr.cf\X, "\n");
	print("	f	", addr.f\X, "\n");
};

sizeofFont = 52;
aggr Font
{
	'X' 0 name;
	'A' Display 4 display;
	'd' 8 height;
	'd' 10 ascent;
	'D' 12 maxldepth;
	'd' 16 width;
	'd' 18 ldepth;
	'd' 20 nsub;
	'U' 24 age;
	'D' 28 ncache;
	'D' 32 nsubf;
	'A' Cacheinfo 36 cache;
	'A' Cachesubf 40 subf;
	'A' Cachefont 44 sub;
	'A' Image 48 cacheimage;
};

defn
Font(addr) {
	complex Font addr;
	print("	name	", addr.name\X, "\n");
	print("	display	", addr.display\X, "\n");
	print("	height	", addr.height, "\n");
	print("	ascent	", addr.ascent, "\n");
	print("	maxldepth	", addr.maxldepth, "\n");
	print("	width	", addr.width, "\n");
	print("	ldepth	", addr.ldepth, "\n");
	print("	nsub	", addr.nsub, "\n");
	print("	age	", addr.age, "\n");
	print("	ncache	", addr.ncache, "\n");
	print("	nsubf	", addr.nsubf, "\n");
	print("	cache	", addr.cache\X, "\n");
	print("	subf	", addr.subf\X, "\n");
	print("	sub	", addr.sub\X, "\n");
	print("	cacheimage	", addr.cacheimage\X, "\n");
};

complex Point ZP;
complex Rectangle ZR;
complex Display display;
complex Font font;
complex Image screen;
sizeofAlt = 20;
aggr Alt
{
	'X' 0 c;
	'X' 4 v;
	'D' 8 op;
	'X' 12 tag;
	'U' 16 q;
};

defn
Alt(addr) {
	complex Alt addr;
	print("	c	", addr.c\X, "\n");
	print("	v	", addr.v\X, "\n");
	print("	op	", addr.op, "\n");
	print("	tag	", addr.tag\X, "\n");
	print("	q	", addr.q, "\n");
};

sizeofRef = 4;
aggr Ref
{
	'D' 0 ref;
};

defn
Ref(addr) {
	complex Ref addr;
	print("	ref	", addr.ref, "\n");
};

sizeofCursor = 72;
aggr Cursor
{
	Point 0 offset;
	'a' 8 clr;
	'a' 40 set;
};

defn
Cursor(addr) {
	complex Cursor addr;
	print("Point offset {\n");
	Point(addr.offset);
	print("}\n");
	print("	clr	", addr.clr, "\n");
	print("	set	", addr.set, "\n");
};

sizeofMouse = 16;
aggr Mouse
{
	'D' 0 buttons;
	Point 4 xy;
	'U' 12 msec;
};

defn
Mouse(addr) {
	complex Mouse addr;
	print("	buttons	", addr.buttons, "\n");
	print("Point xy {\n");
	Point(addr.xy);
	print("}\n");
	print("	msec	", addr.msec, "\n");
};

sizeofMousectl = 44;
aggr Mousectl
{
	{
	'D' 0 buttons;
	Point 4 xy;
	'U' 12 msec;
	};
	'X' 16 c;
	'X' 20 reshapec;
	'X' 24 file;
	'D' 28 mfd;
	'D' 32 cfd;
	'D' 36 pid;
	'A' Image 40 image;
};

defn
Mousectl(addr) {
	complex Mousectl addr;
	print("Mouse {\n");
		Mouse(addr+0);
	print("}\n");
	print("	c	", addr.c\X, "\n");
	print("	reshapec	", addr.reshapec\X, "\n");
	print("	file	", addr.file\X, "\n");
	print("	mfd	", addr.mfd, "\n");
	print("	cfd	", addr.cfd, "\n");
	print("	pid	", addr.pid, "\n");
	print("	image	", addr.image\X, "\n");
};

sizeofMenu = 12;
aggr Menu
{
	'X' 0 item;
	'X' 4 gen;
	'D' 8 lasthit;
};

defn
Menu(addr) {
	complex Menu addr;
	print("	item	", addr.item\X, "\n");
	print("	gen	", addr.gen\X, "\n");
	print("	lasthit	", addr.lasthit, "\n");
};

sizeofKeyboardctl = 20;
aggr Keyboardctl
{
	'X' 0 c;
	'X' 4 file;
	'D' 8 consfd;
	'D' 12 ctlfd;
	'D' 16 pid;
};

defn
Keyboardctl(addr) {
	complex Keyboardctl addr;
	print("	c	", addr.c\X, "\n");
	print("	file	", addr.file\X, "\n");
	print("	consfd	", addr.consfd, "\n");
	print("	ctlfd	", addr.ctlfd, "\n");
	print("	pid	", addr.pid, "\n");
};

BACK = 0;
HIGH = 1;
BORD = 2;
TEXT = 3;
HTEXT = 4;
NCOL = 5;
sizeof_3_ = 4;
aggr _3_
{
	'd' 0 bc;
	'd' 2 minwid;
};

defn
_3_(addr) {
	complex _3_ addr;
	print("	bc	", addr.bc, "\n");
	print("	minwid	", addr.minwid, "\n");
};

sizeof_4_ = 4;
aggr _4_
{
	'X' 0 ptr;
	{
	'd' 0 bc;
	'd' 2 minwid;
	};
};

defn
_4_(addr) {
	complex _4_ addr;
	print("	ptr	", addr.ptr\X, "\n");
	print("_3_ {\n");
		_3_(addr+0);
	print("}\n");
};

sizeofFrbox = 12;
aggr Frbox
{
	'D' 0 wid;
	'D' 4 nrune;
	{
	'X' 8 ptr;
	{
	'd' 8 bc;
	'd' 10 minwid;
	};
	};
};

defn
Frbox(addr) {
	complex Frbox addr;
	print("	wid	", addr.wid, "\n");
	print("	nrune	", addr.nrune, "\n");
	print("_4_ {\n");
		_4_(addr+8);
	print("}\n");
};

complex Font font;
complex Display display;
sizeofFrame = 108;
aggr Frame
{
	'A' Font 0 font;
	'A' Display 4 display;
	'A' Image 8 b;
	'a' 12 cols;
	Rectangle 32 r;
	Rectangle 48 entire;
	'X' 64 scroll;
	'A' Frbox 68 box;
	'U' 72 p0;
	'U' 76 p1;
	'u' 80 nbox;
	'u' 82 nalloc;
	'u' 84 maxtab;
	'u' 86 nchars;
	'u' 88 nlines;
	'u' 90 maxlines;
	'u' 92 lastlinefull;
	'u' 94 modified;
	'A' Image 96 tick;
	'A' Image 100 tickback;
	'D' 104 ticked;
};

defn
Frame(addr) {
	complex Frame addr;
	print("	font	", addr.font\X, "\n");
	print("	display	", addr.display\X, "\n");
	print("	b	", addr.b\X, "\n");
	print("	cols	", addr.cols, "\n");
	print("Rectangle r {\n");
	Rectangle(addr.r);
	print("}\n");
	print("Rectangle entire {\n");
	Rectangle(addr.entire);
	print("}\n");
	print("	scroll	", addr.scroll\X, "\n");
	print("	box	", addr.box\X, "\n");
	print("	p0	", addr.p0, "\n");
	print("	p1	", addr.p1, "\n");
	print("	nbox	", addr.nbox, "\n");
	print("	nalloc	", addr.nalloc, "\n");
	print("	maxtab	", addr.maxtab, "\n");
	print("	nchars	", addr.nchars, "\n");
	print("	nlines	", addr.nlines, "\n");
	print("	maxlines	", addr.maxlines, "\n");
	print("	lastlinefull	", addr.lastlinefull, "\n");
	print("	modified	", addr.modified, "\n");
	print("	tick	", addr.tick\X, "\n");
	print("	tickback	", addr.tickback\X, "\n");
	print("	ticked	", addr.ticked, "\n");
};

DOMLEN = 48;
DESKEYLEN = 7;
CHALLEN = 8;
NETCHLEN = 16;
CONFIGLEN = 14;
SECRETLEN = 32;
APOPCHLEN = 256;
MD5LEN = 16;
KEYDBOFF = 8;
OKEYDBLEN = 41;
KEYDBLEN = 73;
AuthTreq = 1;
AuthChal = 2;
AuthPass = 3;
AuthOK = 4;
AuthErr = 5;
AuthMod = 6;
AuthApop = 7;
AuthOKvar = 9;
AuthChap = 10;
AuthMSchap = 11;
AuthTs = 64;
AuthTc = 65;
AuthAs = 66;
AuthAc = 67;
AuthTp = 68;
sizeofTicketreq = 144;
aggr Ticketreq
{
	'C' 0 type;
	'a' 1 authid;
	'a' 29 authdom;
	'a' 77 chal;
	'a' 85 hostid;
	'a' 113 uid;
};

defn
Ticketreq(addr) {
	complex Ticketreq addr;
	print("	type	", addr.type, "\n");
	print("	authid	", addr.authid, "\n");
	print("	authdom	", addr.authdom, "\n");
	print("	chal	", addr.chal, "\n");
	print("	hostid	", addr.hostid, "\n");
	print("	uid	", addr.uid, "\n");
};

sizeofTicket = 72;
aggr Ticket
{
	'C' 0 num;
	'a' 1 chal;
	'a' 9 cuid;
	'a' 37 suid;
	'a' 65 key;
};

defn
Ticket(addr) {
	complex Ticket addr;
	print("	num	", addr.num, "\n");
	print("	chal	", addr.chal, "\n");
	print("	cuid	", addr.cuid, "\n");
	print("	suid	", addr.suid, "\n");
	print("	key	", addr.key, "\n");
};

sizeofAuthenticator = 16;
aggr Authenticator
{
	'C' 0 num;
	'a' 1 chal;
	'U' 12 id;
};

defn
Authenticator(addr) {
	complex Authenticator addr;
	print("	num	", addr.num, "\n");
	print("	chal	", addr.chal, "\n");
	print("	id	", addr.id, "\n");
};

sizeofPasswordreq = 92;
aggr Passwordreq
{
	'C' 0 num;
	'a' 1 old;
	'a' 29 new;
	'C' 57 changesecret;
	'a' 58 secret;
};

defn
Passwordreq(addr) {
	complex Passwordreq addr;
	print("	num	", addr.num, "\n");
	print("	old	", addr.old, "\n");
	print("	new	", addr.new, "\n");
	print("	changesecret	", addr.changesecret, "\n");
	print("	secret	", addr.secret, "\n");
};

sizeofNvrsafe = 112;
aggr Nvrsafe
{
	'a' 0 machkey;
	'b' 7 machsum;
	'a' 8 authkey;
	'b' 15 authsum;
	'a' 16 config;
	'b' 30 configsum;
	'a' 31 authid;
	'b' 59 authidsum;
	'a' 60 authdom;
	'b' 108 authdomsum;
};

defn
Nvrsafe(addr) {
	complex Nvrsafe addr;
	print("	machkey	", addr.machkey, "\n");
	print("	machsum	", addr.machsum, "\n");
	print("	authkey	", addr.authkey, "\n");
	print("	authsum	", addr.authsum, "\n");
	print("	config	", addr.config, "\n");
	print("	configsum	", addr.configsum, "\n");
	print("	authid	", addr.authid, "\n");
	print("	authidsum	", addr.authidsum, "\n");
	print("	authdom	", addr.authdom, "\n");
	print("	authdomsum	", addr.authdomsum, "\n");
};

sizeofChalstate = 24;
aggr Chalstate
{
	'D' 0 afd;
	'D' 4 asfd;
	'a' 8 chal;
};

defn
Chalstate(addr) {
	complex Chalstate addr;
	print("	afd	", addr.afd, "\n");
	print("	asfd	", addr.asfd, "\n");
	print("	chal	", addr.chal, "\n");
};

sizeofApopchalstate = 264;
aggr Apopchalstate
{
	'D' 0 afd;
	'D' 4 asfd;
	'a' 8 chal;
};

defn
Apopchalstate(addr) {
	complex Apopchalstate addr;
	print("	afd	", addr.afd, "\n");
	print("	asfd	", addr.asfd, "\n");
	print("	chal	", addr.chal, "\n");
};

sizeofChapreply = 48;
aggr Chapreply
{
	'b' 0 id;
	'a' 1 uid;
	'a' 29 resp;
};

defn
Chapreply(addr) {
	complex Chapreply addr;
	print("	id	", addr.id, "\n");
	print("	uid	", addr.uid, "\n");
	print("	resp	", addr.resp, "\n");
};

sizeofMSchapreply = 76;
aggr MSchapreply
{
	'a' 0 uid;
	'a' 28 LMresp;
	'a' 52 NTresp;
};

defn
MSchapreply(addr) {
	complex MSchapreply addr;
	print("	uid	", addr.uid, "\n");
	print("	LMresp	", addr.LMresp, "\n");
	print("	NTresp	", addr.NTresp, "\n");
};

sizeof_5_ = 28;
aggr _5_
{
	'u' 0 oldtag;
	Qid 4 qid;
	'a' 12 rauth;
};

defn
_5_(addr) {
	complex _5_ addr;
	print("	oldtag	", addr.oldtag, "\n");
	print("Qid qid {\n");
	Qid(addr.qid);
	print("}\n");
	print("	rauth	", addr.rauth, "\n");
};

sizeof_6_ = 144;
aggr _6_
{
	'a' 0 uname;
	'a' 28 aname;
	'a' 56 ticket;
	'a' 128 auth;
};

defn
_6_(addr) {
	complex _6_ addr;
	print("	uname	", addr.uname, "\n");
	print("	aname	", addr.aname, "\n");
	print("	ticket	", addr.ticket, "\n");
	print("	auth	", addr.auth, "\n");
};

sizeof_7_ = 148;
aggr _7_
{
	'a' 0 ename;
	'a' 64 authid;
	'a' 92 authdom;
	'a' 140 chal;
};

defn
_7_(addr) {
	complex _7_ addr;
	print("	ename	", addr.ename, "\n");
	print("	authid	", addr.authid, "\n");
	print("	authdom	", addr.authdom, "\n");
	print("	chal	", addr.chal, "\n");
};

sizeof_8_ = 36;
aggr _8_
{
	'D' 0 perm;
	'd' 4 newfid;
	'a' 6 name;
	'C' 34 mode;
};

defn
_8_(addr) {
	complex _8_ addr;
	print("	perm	", addr.perm, "\n");
	print("	newfid	", addr.newfid, "\n");
	print("	name	", addr.name, "\n");
	print("	mode	", addr.mode, "\n");
};

sizeof_9_ = 16;
aggr _9_
{
	'V' 0 offset;
	'D' 8 count;
	'X' 12 data;
};

defn
_9_(addr) {
	complex _9_ addr;
	print("	offset	", addr.offset, "\n");
	print("	count	", addr.count, "\n");
	print("	data	", addr.data\X, "\n");
};

sizeof_10_ = 116;
aggr _10_
{
	'a' 0 stat;
};

defn
_10_(addr) {
	complex _10_ addr;
	print("	stat	", addr.stat, "\n");
};

sizeof_11_ = 148;
aggr _11_
{
	{
	'u' 0 oldtag;
	Qid 4 qid;
	'a' 12 rauth;
	};
	{
	'a' 0 uname;
	'a' 28 aname;
	'a' 56 ticket;
	'a' 128 auth;
	};
	{
	'a' 0 ename;
	'a' 64 authid;
	'a' 92 authdom;
	'a' 140 chal;
	};
	{
	'D' 0 perm;
	'd' 4 newfid;
	'a' 6 name;
	'C' 34 mode;
	};
	{
	'V' 0 offset;
	'D' 8 count;
	'X' 12 data;
	};
	{
	'a' 0 stat;
	};
};

defn
_11_(addr) {
	complex _11_ addr;
	print("_5_ {\n");
		_5_(addr+0);
	print("}\n");
	print("_6_ {\n");
		_6_(addr+0);
	print("}\n");
	print("_7_ {\n");
		_7_(addr+0);
	print("}\n");
	print("_8_ {\n");
		_8_(addr+0);
	print("}\n");
	print("_9_ {\n");
		_9_(addr+0);
	print("}\n");
	print("_10_ {\n");
		_10_(addr+0);
	print("}\n");
};

sizeofFcall = 156;
aggr Fcall
{
	'C' 0 type;
	'd' 2 fid;
	'u' 4 tag;
	{
	{
	'u' 8 oldtag;
	Qid 12 qid;
	'a' 20 rauth;
	};
	{
	'a' 8 uname;
	'a' 36 aname;
	'a' 64 ticket;
	'a' 136 auth;
	};
	{
	'a' 8 ename;
	'a' 72 authid;
	'a' 100 authdom;
	'a' 148 chal;
	};
	{
	'D' 8 perm;
	'd' 12 newfid;
	'a' 14 name;
	'C' 42 mode;
	};
	{
	'V' 8 offset;
	'D' 16 count;
	'X' 20 data;
	};
	{
	'a' 8 stat;
	};
	};
};

defn
Fcall(addr) {
	complex Fcall addr;
	print("	type	", addr.type, "\n");
	print("	fid	", addr.fid, "\n");
	print("	tag	", addr.tag, "\n");
	print("_11_ {\n");
		_11_(addr+8);
	print("}\n");
};

Tnop = 50;
Rnop = 51;
Tosession = 52;
Rosession = 53;
Terror = 54;
Rerror = 55;
Tflush = 56;
Rflush = 57;
Toattach = 58;
Roattach = 59;
Tclone = 60;
Rclone = 61;
Twalk = 62;
Rwalk = 63;
Topen = 64;
Ropen = 65;
Tcreate = 66;
Rcreate = 67;
Tread = 68;
Rread = 69;
Twrite = 70;
Rwrite = 71;
Tclunk = 72;
Rclunk = 73;
Tremove = 74;
Rremove = 75;
Tstat = 76;
Rstat = 77;
Twstat = 78;
Rwstat = 79;
Tclwalk = 80;
Rclwalk = 81;
Tauth = 82;
Rauth = 83;
Tsession = 84;
Rsession = 85;
Tattach = 86;
Rattach = 87;
Ttunnel = 88;
Rtunnel = 89;
Tmax = 90;
sizeofPlumbmsg = 28;
aggr Plumbmsg
{
	'X' 0 src;
	'X' 4 dst;
	'X' 8 wdir;
	'X' 12 kind;
	'X' 16 attr;
	'D' 20 ndata;
	'X' 24 data;
};

defn
Plumbmsg(addr) {
	complex Plumbmsg addr;
	print("	src	", addr.src\X, "\n");
	print("	dst	", addr.dst\X, "\n");
	print("	wdir	", addr.wdir\X, "\n");
	print("	kind	", addr.kind\X, "\n");
	print("	attr	", addr.attr\X, "\n");
	print("	ndata	", addr.ndata, "\n");
	print("	data	", addr.data\X, "\n");
};

sizeofPlumbattr = 12;
aggr Plumbattr
{
	'X' 0 name;
	'X' 4 value;
	'A' Plumbattr 8 next;
};

defn
Plumbattr(addr) {
	complex Plumbattr addr;
	print("	name	", addr.name\X, "\n");
	print("	value	", addr.value\X, "\n");
	print("	next	", addr.next\X, "\n");
};

Qdir = 0;
Qacme = 1;
Qcons = 2;
Qconsctl = 3;
Qindex = 4;
Qlabel = 5;
Qnew = 6;
QWaddr = 7;
QWbody = 8;
QWctl = 9;
QWdata = 10;
QWevent = 11;
QWrdsel = 12;
QWwrsel = 13;
QWtag = 14;
QMAX = 15;
Blockincr = 256;
Maxblock = 8192;
NRange = 10;
Infinity = 2147483647;
MAXRPC = 8352;
sizeofRunestr = 8;
aggr Runestr
{
	'X' 0 r;
	'D' 4 nr;
};

defn
Runestr(addr) {
	complex Runestr addr;
	print("	r	", addr.r\X, "\n");
	print("	nr	", addr.nr, "\n");
};

sizeofRange = 8;
aggr Range
{
	'D' 0 q0;
	'D' 4 q1;
};

defn
Range(addr) {
	complex Range addr;
	print("	q0	", addr.q0, "\n");
	print("	q1	", addr.q1, "\n");
};

sizeof_12_ = 4;
aggr _12_
{
	'U' 0 n;
	'X' 0 next;
};

defn
_12_(addr) {
	complex _12_ addr;
	print("	n	", addr.n, "\n");
	print("	next	", addr.next\X, "\n");
};

sizeofBlock = 8;
aggr Block
{
	'U' 0 addr;
	{
	'U' 4 n;
	'A' Block 4 next;
	};
};

defn
Block(addr) {
	complex Block addr;
	print("	addr	", addr.addr, "\n");
	print("_12_ {\n");
		_12_(addr+4);
	print("}\n");
};

sizeofDisk = 140;
aggr Disk
{
	'D' 0 fd;
	'U' 4 addr;
	'a' 8 free;
};

defn
Disk(addr) {
	complex Disk addr;
	print("	fd	", addr.fd, "\n");
	print("	addr	", addr.addr, "\n");
	print("	free	", addr.free, "\n");
};

sizeofBuffer = 36;
aggr Buffer
{
	'U' 0 nc;
	'X' 4 c;
	'U' 8 cnc;
	'U' 12 cmax;
	'U' 16 cq;
	'D' 20 cdirty;
	'U' 24 cbi;
	'A' Block 28 bl;
	'U' 32 nbl;
};

defn
Buffer(addr) {
	complex Buffer addr;
	print("	nc	", addr.nc, "\n");
	print("	c	", addr.c\X, "\n");
	print("	cnc	", addr.cnc, "\n");
	print("	cmax	", addr.cmax, "\n");
	print("	cq	", addr.cq, "\n");
	print("	cdirty	", addr.cdirty, "\n");
	print("	cbi	", addr.cbi, "\n");
	print("	bl	", addr.bl\X, "\n");
	print("	nbl	", addr.nbl, "\n");
};

sizeofFile = 156;
aggr File
{
	{
	'U' 0 nc;
	'X' 4 c;
	'U' 8 cnc;
	'U' 12 cmax;
	'U' 16 cq;
	'D' 20 cdirty;
	'U' 24 cbi;
	'A' Block 28 bl;
	'U' 32 nbl;
	};
	Buffer 36 delta;
	Buffer 72 epsilon;
	'X' 108 name;
	'D' 112 nname;
	'U' 116 qidpath;
	'U' 120 mtime;
	'D' 124 dev;
	'D' 128 unread;
	'D' 132 seq;
	'D' 136 mod;
	'X' 140 curtext;
	'X' 144 text;
	'D' 148 ntext;
	'D' 152 dumpid;
};

defn
File(addr) {
	complex File addr;
	print("Buffer {\n");
		Buffer(addr+0);
	print("}\n");
	print("Buffer delta {\n");
	Buffer(addr.delta);
	print("}\n");
	print("Buffer epsilon {\n");
	Buffer(addr.epsilon);
	print("}\n");
	print("	name	", addr.name\X, "\n");
	print("	nname	", addr.nname, "\n");
	print("	qidpath	", addr.qidpath, "\n");
	print("	mtime	", addr.mtime, "\n");
	print("	dev	", addr.dev, "\n");
	print("	unread	", addr.unread, "\n");
	print("	seq	", addr.seq, "\n");
	print("	mod	", addr.mod, "\n");
	print("	curtext	", addr.curtext\X, "\n");
	print("	text	", addr.text\X, "\n");
	print("	ntext	", addr.ntext, "\n");
	print("	dumpid	", addr.dumpid, "\n");
};

Columntag = 0;
Rowtag = 1;
Tag = 2;
Body = 3;
sizeofText = 220;
aggr Text
{
	'A' File 0 file;
	{
	'A' Font 4 font;
	'A' Display 8 display;
	'A' Image 12 b;
	'a' 16 cols;
	Rectangle 36 r;
	Rectangle 52 entire;
	'X' 68 scroll;
	'A' Frbox 72 box;
	'U' 76 p0;
	'U' 80 p1;
	'u' 84 nbox;
	'u' 86 nalloc;
	'u' 88 maxtab;
	'u' 90 nchars;
	'u' 92 nlines;
	'u' 94 maxlines;
	'u' 96 lastlinefull;
	'u' 98 modified;
	'A' Image 100 tick;
	'A' Image 104 tickback;
	'D' 108 ticked;
	};
	'X' 112 reffont;
	'U' 116 org;
	'U' 120 q0;
	'U' 124 q1;
	'D' 128 what;
	'D' 132 tabstop;
	'X' 136 w;
	Rectangle 140 scrollr;
	Rectangle 156 lastsr;
	Rectangle 172 all;
	'X' 188 row;
	'X' 192 col;
	'U' 196 eq0;
	'U' 200 cq0;
	'D' 204 ncache;
	'D' 208 ncachealloc;
	'X' 212 cache;
	'D' 216 nofill;
};

defn
Text(addr) {
	complex Text addr;
	print("	file	", addr.file\X, "\n");
	print("Frame {\n");
		Frame(addr+4);
	print("}\n");
	print("	reffont	", addr.reffont\X, "\n");
	print("	org	", addr.org, "\n");
	print("	q0	", addr.q0, "\n");
	print("	q1	", addr.q1, "\n");
	print("	what	", addr.what, "\n");
	print("	tabstop	", addr.tabstop, "\n");
	print("	w	", addr.w\X, "\n");
	print("Rectangle scrollr {\n");
	Rectangle(addr.scrollr);
	print("}\n");
	print("Rectangle lastsr {\n");
	Rectangle(addr.lastsr);
	print("}\n");
	print("Rectangle all {\n");
	Rectangle(addr.all);
	print("}\n");
	print("	row	", addr.row\X, "\n");
	print("	col	", addr.col\X, "\n");
	print("	eq0	", addr.eq0, "\n");
	print("	cq0	", addr.cq0, "\n");
	print("	ncache	", addr.ncache, "\n");
	print("	ncachealloc	", addr.ncachealloc, "\n");
	print("	cache	", addr.cache\X, "\n");
	print("	nofill	", addr.nofill, "\n");
};

sizeofWindow = 624;
aggr Window
{
	{
	Lock 0 lock;
	'D' 4 locked;
	'A' QLp 8 $head;
	'A' QLp 12 $tail;
	};
	{
	'D' 16 ref;
	};
	Text 20 tag;
	Text 240 body;
	Rectangle 460 r;
	'b' 476 isdir;
	'b' 477 isscratch;
	'b' 478 filemenu;
	'b' 479 dirty;
	'D' 480 id;
	Range 484 addr;
	Range 492 limit;
	'a' 500 nopen;
	'b' 515 nomark;
	'b' 516 noscroll;
	Range 520 wrselrange;
	'D' 528 rdselfd;
	'X' 532 col;
	'X' 536 eventx;
	'X' 540 events;
	'D' 544 nevents;
	'D' 548 owner;
	'D' 552 maxlines;
	'X' 556 dlp;
	'D' 560 ndl;
	'D' 564 putseq;
	'D' 568 nincl;
	'X' 572 incl;
	'X' 576 reffont;
	QLock 580 ctllock;
	'U' 596 ctlfid;
	'X' 600 dumpstr;
	'X' 604 dumpdir;
	'D' 608 dumpid;
	'D' 612 utflastqid;
	'D' 616 utflastboff;
	'D' 620 utflastq;
};

defn
Window(addr) {
	complex Window addr;
	print("QLock {\n");
		QLock(addr+0);
	print("}\n");
	print("Ref {\n");
		Ref(addr+16);
	print("}\n");
	print("Text tag {\n");
	Text(addr.tag);
	print("}\n");
	print("Text body {\n");
	Text(addr.body);
	print("}\n");
	print("Rectangle r {\n");
	Rectangle(addr.r);
	print("}\n");
	print("	isdir	", addr.isdir, "\n");
	print("	isscratch	", addr.isscratch, "\n");
	print("	filemenu	", addr.filemenu, "\n");
	print("	dirty	", addr.dirty, "\n");
	print("	id	", addr.id, "\n");
	print("Range addr {\n");
	Range(addr.addr);
	print("}\n");
	print("Range limit {\n");
	Range(addr.limit);
	print("}\n");
	print("	nopen	", addr.nopen, "\n");
	print("	nomark	", addr.nomark, "\n");
	print("	noscroll	", addr.noscroll, "\n");
	print("Range wrselrange {\n");
	Range(addr.wrselrange);
	print("}\n");
	print("	rdselfd	", addr.rdselfd, "\n");
	print("	col	", addr.col\X, "\n");
	print("	eventx	", addr.eventx\X, "\n");
	print("	events	", addr.events\X, "\n");
	print("	nevents	", addr.nevents, "\n");
	print("	owner	", addr.owner, "\n");
	print("	maxlines	", addr.maxlines, "\n");
	print("	dlp	", addr.dlp\X, "\n");
	print("	ndl	", addr.ndl, "\n");
	print("	putseq	", addr.putseq, "\n");
	print("	nincl	", addr.nincl, "\n");
	print("	incl	", addr.incl\X, "\n");
	print("	reffont	", addr.reffont\X, "\n");
	print("QLock ctllock {\n");
	QLock(addr.ctllock);
	print("}\n");
	print("	ctlfid	", addr.ctlfid, "\n");
	print("	dumpstr	", addr.dumpstr\X, "\n");
	print("	dumpdir	", addr.dumpdir\X, "\n");
	print("	dumpid	", addr.dumpid, "\n");
	print("	utflastqid	", addr.utflastqid, "\n");
	print("	utflastboff	", addr.utflastboff, "\n");
	print("	utflastq	", addr.utflastq, "\n");
};

sizeofColumn = 252;
aggr Column
{
	Rectangle 0 r;
	Text 16 tag;
	'X' 236 row;
	'A' Window 240 w;
	'D' 244 nw;
	'D' 248 safe;
};

defn
Column(addr) {
	complex Column addr;
	print("Rectangle r {\n");
	Rectangle(addr.r);
	print("}\n");
	print("Text tag {\n");
	Text(addr.tag);
	print("}\n");
	print("	row	", addr.row\X, "\n");
	print("	w	", addr.w\X, "\n");
	print("	nw	", addr.nw, "\n");
	print("	safe	", addr.safe, "\n");
};

sizeofRow = 260;
aggr Row
{
	{
	Lock 0 lock;
	'D' 4 locked;
	'A' QLp 8 $head;
	'A' QLp 12 $tail;
	};
	Rectangle 16 r;
	Text 32 tag;
	'A' Column 252 col;
	'D' 256 ncol;
};

defn
Row(addr) {
	complex Row addr;
	print("QLock {\n");
		QLock(addr+0);
	print("}\n");
	print("Rectangle r {\n");
	Rectangle(addr.r);
	print("}\n");
	print("Text tag {\n");
	Text(addr.tag);
	print("}\n");
	print("	col	", addr.col\X, "\n");
	print("	ncol	", addr.ncol, "\n");
};

sizeofTimer = 16;
aggr Timer
{
	'D' 0 dt;
	'D' 4 cancel;
	'X' 8 c;
	'A' Timer 12 next;
};

defn
Timer(addr) {
	complex Timer addr;
	print("	dt	", addr.dt, "\n");
	print("	cancel	", addr.cancel, "\n");
	print("	c	", addr.c\X, "\n");
	print("	next	", addr.next\X, "\n");
};

sizeofCommand = 28;
aggr Command
{
	'D' 0 pid;
	'X' 4 name;
	'D' 8 nname;
	'X' 12 text;
	'X' 16 av;
	'X' 20 md;
	'A' Command 24 next;
};

defn
Command(addr) {
	complex Command addr;
	print("	pid	", addr.pid, "\n");
	print("	name	", addr.name\X, "\n");
	print("	nname	", addr.nname, "\n");
	print("	text	", addr.text\X, "\n");
	print("	av	", addr.av\X, "\n");
	print("	md	", addr.md\X, "\n");
	print("	next	", addr.next\X, "\n");
};

sizeofDirtab = 12;
aggr Dirtab
{
	'X' 0 name;
	'U' 4 qid;
	'U' 8 perm;
};

defn
Dirtab(addr) {
	complex Dirtab addr;
	print("	name	", addr.name\X, "\n");
	print("	qid	", addr.qid, "\n");
	print("	perm	", addr.perm, "\n");
};

sizeofMntdir = 28;
aggr Mntdir
{
	'D' 0 id;
	'D' 4 ref;
	'X' 8 dir;
	'D' 12 ndir;
	'A' Mntdir 16 next;
	'D' 20 nincl;
	'X' 24 incl;
};

defn
Mntdir(addr) {
	complex Mntdir addr;
	print("	id	", addr.id, "\n");
	print("	ref	", addr.ref, "\n");
	print("	dir	", addr.dir\X, "\n");
	print("	ndir	", addr.ndir, "\n");
	print("	next	", addr.next\X, "\n");
	print("	nincl	", addr.nincl, "\n");
	print("	incl	", addr.incl\X, "\n");
};

sizeofFid = 44;
aggr Fid
{
	'D' 0 fid;
	'D' 4 busy;
	'D' 8 open;
	Qid 12 qid;
	'A' Window 20 w;
	'A' Dirtab 24 dir;
	'A' Fid 28 next;
	'A' Mntdir 32 mntdir;
	'D' 36 nrpart;
	'a' 40 rpart;
};

defn
Fid(addr) {
	complex Fid addr;
	print("	fid	", addr.fid, "\n");
	print("	busy	", addr.busy, "\n");
	print("	open	", addr.open, "\n");
	print("Qid qid {\n");
	Qid(addr.qid);
	print("}\n");
	print("	w	", addr.w\X, "\n");
	print("	dir	", addr.dir\X, "\n");
	print("	next	", addr.next\X, "\n");
	print("	mntdir	", addr.mntdir\X, "\n");
	print("	nrpart	", addr.nrpart, "\n");
	print("	rpart	", addr.rpart, "\n");
};

sizeofXfid = 180;
aggr Xfid
{
	'X' 0 arg;
	{
	'C' 4 type;
	'd' 6 fid;
	'u' 8 tag;
	{
	{
	'u' 12 oldtag;
	Qid 16 qid;
	'a' 24 rauth;
	};
	{
	'a' 12 uname;
	'a' 40 aname;
	'a' 68 ticket;
	'a' 140 auth;
	};
	{
	'a' 12 ename;
	'a' 76 authid;
	'a' 104 authdom;
	'a' 152 chal;
	};
	{
	'D' 12 perm;
	'd' 16 newfid;
	'a' 18 name;
	'C' 46 mode;
	};
	{
	'V' 12 offset;
	'D' 20 count;
	'X' 24 data;
	};
	{
	'a' 12 stat;
	};
	};
	};
	'A' Xfid 160 next;
	'X' 164 c;
	'A' Fid 168 f;
	'X' 172 buf;
	'D' 176 flushed;
};

defn
Xfid(addr) {
	complex Xfid addr;
	print("	arg	", addr.arg\X, "\n");
	print("Fcall {\n");
		Fcall(addr+4);
	print("}\n");
	print("	next	", addr.next\X, "\n");
	print("	c	", addr.c\X, "\n");
	print("	f	", addr.f\X, "\n");
	print("	buf	", addr.buf\X, "\n");
	print("	flushed	", addr.flushed, "\n");
};

sizeofReffont = 8;
aggr Reffont
{
	{
	'D' 0 ref;
	};
	'A' Font 4 f;
};

defn
Reffont(addr) {
	complex Reffont addr;
	print("Ref {\n");
		Ref(addr+0);
	print("}\n");
	print("	f	", addr.f\X, "\n");
};

sizeofRangeset = 80;
aggr Rangeset
{
	'a' 0 r;
};

defn
Rangeset(addr) {
	complex Rangeset addr;
	print("	r	", addr.r, "\n");
};

sizeofDirlist = 12;
aggr Dirlist
{
	'X' 0 r;
	'D' 4 nr;
	'D' 8 wid;
};

defn
Dirlist(addr) {
	complex Dirlist addr;
	print("	r	", addr.r\X, "\n");
	print("	nr	", addr.nr, "\n");
	print("	wid	", addr.wid, "\n");
};

sizeof_13_ = 4;
aggr _13_
{
	'A' Text 0 at;
	'X' 0 ar;
};

defn
_13_(addr) {
	complex _13_ addr;
	print("	at	", addr.at\X, "\n");
	print("	ar	", addr.ar\X, "\n");
};

sizeofExpand = 40;
aggr Expand
{
	'U' 0 q0;
	'U' 4 q1;
	'X' 8 name;
	'D' 12 nname;
	'X' 16 bname;
	'D' 20 jump;
	{
	'A' Text 24 at;
	'X' 24 ar;
	};
	'X' 28 agetc;
	'D' 32 a0;
	'D' 36 a1;
};

defn
Expand(addr) {
	complex Expand addr;
	print("	q0	", addr.q0, "\n");
	print("	q1	", addr.q1, "\n");
	print("	name	", addr.name\X, "\n");
	print("	nname	", addr.nname, "\n");
	print("	bname	", addr.bname\X, "\n");
	print("	jump	", addr.jump, "\n");
	print("_13_ {\n");
		_13_(addr+24);
	print("}\n");
	print("	agetc	", addr.agetc\X, "\n");
	print("	a0	", addr.a0, "\n");
	print("	a1	", addr.a1, "\n");
};

BUFSIZE = 8352;
RBUFSIZE = 4176;
EVENTSIZE = 256;
Scrollwid = 12;
Scrollgap = 4;
Margin = 4;
Border = 2;
FALSE = 0;
TRUE = 1;
XXX = 2;
Null = 45;
Delete = 100;
Insert = 105;
Filename = 102;
complex Display display;
complex Image screen;
complex Font font;
complex Mouse mouse;
complex Mousectl mousectl;
complex Keyboardctl keyboardctl;
complex Reffont reffont;
complex Image modbutton;
complex Image colbutton;
complex Image button;
complex Image but2col;
complex Image but3col;
complex Cursor boxcursor;
complex Row row;
complex Disk disk;
complex Text seltext;
complex Text argtext;
complex Text mousetext;
complex Text typetext;
complex Text barttext;
complex Window activewin;
complex Column activecol;
complex Buffer snarfbuf;
complex Rectangle nullrect;
complex Reffont fontcache;
NSnarf = 1000;
complex Command command;
complex Column threadmain:c;
complex Display threadmain:d;
complex Column readfile:c;
complex Window readfile:w;
complex Runestr readfile:rs;
complex Command killprocs:c;
complex Plumbmsg plumbproc:m;
complex Timer keyboardthread:timer;
complex Text keyboardthread:t;
KTimer = 0;
KKey = 1;
NKALT = 2;
complex Text mousethread:t;
complex Text mousethread:argt;
complex Window mousethread:w;
complex Plumbmsg mousethread:pm;
MReshape = 0;
MMouse = 1;
MPlumb = 2;
NMALT = 3;
complex Waitmsg waitthread:w;
complex Command waitthread:c;
complex Command waitthread:lc;
complex Text waitthread:t;
WErr = 0;
WKill = 1;
WWait = 2;
WCmd = 3;
NWALT = 4;
complex Xfid xfidallocthread:xfree;
complex Xfid xfidallocthread:x;
Alloc = 0;
Free = 1;
N = 2;
complex Reffont rfget:r;
complex Font rfget:f;
complex Reffont rfclose:r;
complex Cursor boxcursor;
complex Rectangle iconinit:r;
complex Image iconinit:tmp;
